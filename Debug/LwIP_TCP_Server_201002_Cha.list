
LwIP_TCP_Server_201002_Cha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000108b0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d3c  08010a60  08010a60  00020a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801379c  0801379c  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  0801379c  0801379c  0002379c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080137a4  080137a4  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080137a4  080137a4  000237a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080137a8  080137a8  000237a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080137ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000068ec  20000078  08013824  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006964  08013824  00036964  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e545  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000058f5  00000000  00000000  0005e5ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f0  00000000  00000000  00063ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001558  00000000  00000000  000654d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f820  00000000  00000000  00066a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002386f  00000000  00000000  00096250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef732  00000000  00000000  000b9abf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a91f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006380  00000000  00000000  001a9244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010a48 	.word	0x08010a48

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08010a48 	.word	0x08010a48

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f001 fa24 	bl	8001a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f81a 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 f8e8 	bl	8000798 <MX_GPIO_Init>
  MX_LWIP_Init();
 80005c8:	f003 ff48 	bl	800445c <MX_LWIP_Init>
  MX_TIM4_Init();
 80005cc:	f000 f87e 	bl	80006cc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  User_notification(&gnetif);
 80005d0:	4807      	ldr	r0, [pc, #28]	; (80005f0 <main+0x38>)
 80005d2:	f000 fb87 	bl	8000ce4 <User_notification>
  tcp_echoserver_init();
 80005d6:	f000 fd7b 	bl	80010d0 <tcp_echoserver_init>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80005da:	2108      	movs	r1, #8
 80005dc:	4805      	ldr	r0, [pc, #20]	; (80005f4 <main+0x3c>)
 80005de:	f003 fb47 	bl	8003c70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80005e2:	210c      	movs	r1, #12
 80005e4:	4803      	ldr	r0, [pc, #12]	; (80005f4 <main+0x3c>)
 80005e6:	f003 fb43 	bl	8003c70 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 80005ea:	f004 f869 	bl	80046c0 <MX_LWIP_Process>
 80005ee:	e7fc      	b.n	80005ea <main+0x32>
 80005f0:	20000258 	.word	0x20000258
 80005f4:	20000218 	.word	0x20000218

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	; 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	; 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f00f f852 	bl	800f6b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	4b28      	ldr	r3, [pc, #160]	; (80006c4 <SystemClock_Config+0xcc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	4a27      	ldr	r2, [pc, #156]	; (80006c4 <SystemClock_Config+0xcc>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	; 0x40
 800062c:	4b25      	ldr	r3, [pc, #148]	; (80006c4 <SystemClock_Config+0xcc>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <SystemClock_Config+0xd0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <SystemClock_Config+0xd0>)
 8000642:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <SystemClock_Config+0xd0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000654:	2301      	movs	r3, #1
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000658:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000668:	2304      	movs	r3, #4
 800066a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800066c:	23a8      	movs	r3, #168	; 0xa8
 800066e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000674:	2304      	movs	r3, #4
 8000676:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0320 	add.w	r3, r7, #32
 800067c:	4618      	mov	r0, r3
 800067e:	f002 fe87 	bl	8003390 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000688:	f000 fb4a 	bl	8000d20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000690:	2302      	movs	r3, #2
 8000692:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000698:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800069c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2105      	movs	r1, #5
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 f8e0 	bl	8003870 <HAL_RCC_ClockConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006b6:	f000 fb33 	bl	8000d20 <Error_Handler>
  }
}
 80006ba:	bf00      	nop
 80006bc:	3750      	adds	r7, #80	; 0x50
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000

080006cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]
 80006ea:	615a      	str	r2, [r3, #20]
 80006ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <MX_TIM4_Init+0xc4>)
 80006f0:	4a28      	ldr	r2, [pc, #160]	; (8000794 <MX_TIM4_Init+0xc8>)
 80006f2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 80006f4:	4b26      	ldr	r3, [pc, #152]	; (8000790 <MX_TIM4_Init+0xc4>)
 80006f6:	2253      	movs	r2, #83	; 0x53
 80006f8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fa:	4b25      	ldr	r3, [pc, #148]	; (8000790 <MX_TIM4_Init+0xc4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8000700:	4b23      	ldr	r3, [pc, #140]	; (8000790 <MX_TIM4_Init+0xc4>)
 8000702:	f242 720f 	movw	r2, #9999	; 0x270f
 8000706:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000708:	4b21      	ldr	r3, [pc, #132]	; (8000790 <MX_TIM4_Init+0xc4>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <MX_TIM4_Init+0xc4>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000714:	481e      	ldr	r0, [pc, #120]	; (8000790 <MX_TIM4_Init+0xc4>)
 8000716:	f003 fa7f 	bl	8003c18 <HAL_TIM_PWM_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000720:	f000 fafe 	bl	8000d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000724:	2300      	movs	r3, #0
 8000726:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800072c:	f107 0320 	add.w	r3, r7, #32
 8000730:	4619      	mov	r1, r3
 8000732:	4817      	ldr	r0, [pc, #92]	; (8000790 <MX_TIM4_Init+0xc4>)
 8000734:	f003 fe16 	bl	8004364 <HAL_TIMEx_MasterConfigSynchronization>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800073e:	f000 faef 	bl	8000d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000742:	2360      	movs	r3, #96	; 0x60
 8000744:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50000;
 8000746:	f24c 3350 	movw	r3, #50000	; 0xc350
 800074a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2208      	movs	r2, #8
 8000758:	4619      	mov	r1, r3
 800075a:	480d      	ldr	r0, [pc, #52]	; (8000790 <MX_TIM4_Init+0xc4>)
 800075c:	f003 fac6 	bl	8003cec <HAL_TIM_PWM_ConfigChannel>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000766:	f000 fadb 	bl	8000d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	220c      	movs	r2, #12
 800076e:	4619      	mov	r1, r3
 8000770:	4807      	ldr	r0, [pc, #28]	; (8000790 <MX_TIM4_Init+0xc4>)
 8000772:	f003 fabb 	bl	8003cec <HAL_TIM_PWM_ConfigChannel>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800077c:	f000 fad0 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000780:	4803      	ldr	r0, [pc, #12]	; (8000790 <MX_TIM4_Init+0xc4>)
 8000782:	f000 fb1f 	bl	8000dc4 <HAL_TIM_MspPostInit>

}
 8000786:	bf00      	nop
 8000788:	3728      	adds	r7, #40	; 0x28
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000218 	.word	0x20000218
 8000794:	40000800 	.word	0x40000800

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08e      	sub	sp, #56	; 0x38
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	623b      	str	r3, [r7, #32]
 80007b2:	4b81      	ldr	r3, [pc, #516]	; (80009b8 <MX_GPIO_Init+0x220>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a80      	ldr	r2, [pc, #512]	; (80009b8 <MX_GPIO_Init+0x220>)
 80007b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b7e      	ldr	r3, [pc, #504]	; (80009b8 <MX_GPIO_Init+0x220>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c6:	623b      	str	r3, [r7, #32]
 80007c8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
 80007ce:	4b7a      	ldr	r3, [pc, #488]	; (80009b8 <MX_GPIO_Init+0x220>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a79      	ldr	r2, [pc, #484]	; (80009b8 <MX_GPIO_Init+0x220>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b77      	ldr	r3, [pc, #476]	; (80009b8 <MX_GPIO_Init+0x220>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	61fb      	str	r3, [r7, #28]
 80007e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	61bb      	str	r3, [r7, #24]
 80007ea:	4b73      	ldr	r3, [pc, #460]	; (80009b8 <MX_GPIO_Init+0x220>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a72      	ldr	r2, [pc, #456]	; (80009b8 <MX_GPIO_Init+0x220>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b70      	ldr	r3, [pc, #448]	; (80009b8 <MX_GPIO_Init+0x220>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	61bb      	str	r3, [r7, #24]
 8000800:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
 8000806:	4b6c      	ldr	r3, [pc, #432]	; (80009b8 <MX_GPIO_Init+0x220>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a6b      	ldr	r2, [pc, #428]	; (80009b8 <MX_GPIO_Init+0x220>)
 800080c:	f043 0320 	orr.w	r3, r3, #32
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b69      	ldr	r3, [pc, #420]	; (80009b8 <MX_GPIO_Init+0x220>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0320 	and.w	r3, r3, #32
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	4b65      	ldr	r3, [pc, #404]	; (80009b8 <MX_GPIO_Init+0x220>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a64      	ldr	r2, [pc, #400]	; (80009b8 <MX_GPIO_Init+0x220>)
 8000828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b62      	ldr	r3, [pc, #392]	; (80009b8 <MX_GPIO_Init+0x220>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	4b5e      	ldr	r3, [pc, #376]	; (80009b8 <MX_GPIO_Init+0x220>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a5d      	ldr	r2, [pc, #372]	; (80009b8 <MX_GPIO_Init+0x220>)
 8000844:	f043 0310 	orr.w	r3, r3, #16
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b5b      	ldr	r3, [pc, #364]	; (80009b8 <MX_GPIO_Init+0x220>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0310 	and.w	r3, r3, #16
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	4b57      	ldr	r3, [pc, #348]	; (80009b8 <MX_GPIO_Init+0x220>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a56      	ldr	r2, [pc, #344]	; (80009b8 <MX_GPIO_Init+0x220>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b54      	ldr	r3, [pc, #336]	; (80009b8 <MX_GPIO_Init+0x220>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	4b50      	ldr	r3, [pc, #320]	; (80009b8 <MX_GPIO_Init+0x220>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a4f      	ldr	r2, [pc, #316]	; (80009b8 <MX_GPIO_Init+0x220>)
 800087c:	f043 0308 	orr.w	r3, r3, #8
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b4d      	ldr	r3, [pc, #308]	; (80009b8 <MX_GPIO_Init+0x220>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0308 	and.w	r3, r3, #8
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	2160      	movs	r1, #96	; 0x60
 8000892:	484a      	ldr	r0, [pc, #296]	; (80009bc <MX_GPIO_Init+0x224>)
 8000894:	f002 fd4a 	bl	800332c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800089e:	4848      	ldr	r0, [pc, #288]	; (80009c0 <MX_GPIO_Init+0x228>)
 80008a0:	f002 fd44 	bl	800332c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 80008a4:	2200      	movs	r2, #0
 80008a6:	f244 01ff 	movw	r1, #16639	; 0x40ff
 80008aa:	4846      	ldr	r0, [pc, #280]	; (80009c4 <MX_GPIO_Init+0x22c>)
 80008ac:	f002 fd3e 	bl	800332c <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80008b0:	2360      	movs	r3, #96	; 0x60
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c4:	4619      	mov	r1, r3
 80008c6:	483d      	ldr	r0, [pc, #244]	; (80009bc <MX_GPIO_Init+0x224>)
 80008c8:	f002 fb6c 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e2:	4619      	mov	r1, r3
 80008e4:	4836      	ldr	r0, [pc, #216]	; (80009c0 <MX_GPIO_Init+0x228>)
 80008e6:	f002 fb5d 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80008ea:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fc:	4619      	mov	r1, r3
 80008fe:	4830      	ldr	r0, [pc, #192]	; (80009c0 <MX_GPIO_Init+0x228>)
 8000900:	f002 fb50 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000904:	230f      	movs	r3, #15
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000908:	4b2f      	ldr	r3, [pc, #188]	; (80009c8 <MX_GPIO_Init+0x230>)
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000914:	4619      	mov	r1, r3
 8000916:	482d      	ldr	r0, [pc, #180]	; (80009cc <MX_GPIO_Init+0x234>)
 8000918:	f002 fb44 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800091c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800092a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092e:	4619      	mov	r1, r3
 8000930:	4827      	ldr	r0, [pc, #156]	; (80009d0 <MX_GPIO_Init+0x238>)
 8000932:	f002 fb37 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000936:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093c:	2301      	movs	r3, #1
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094c:	4619      	mov	r1, r3
 800094e:	481d      	ldr	r0, [pc, #116]	; (80009c4 <MX_GPIO_Init+0x22c>)
 8000950:	f002 fb28 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000954:	23ff      	movs	r3, #255	; 0xff
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000960:	2302      	movs	r3, #2
 8000962:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000968:	4619      	mov	r1, r3
 800096a:	4816      	ldr	r0, [pc, #88]	; (80009c4 <MX_GPIO_Init+0x22c>)
 800096c:	f002 fb1a 	bl	8002fa4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	2100      	movs	r1, #0
 8000974:	2006      	movs	r0, #6
 8000976:	f001 f9b8 	bl	8001cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800097a:	2006      	movs	r0, #6
 800097c:	f001 f9d1 	bl	8001d22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	2007      	movs	r0, #7
 8000986:	f001 f9b0 	bl	8001cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800098a:	2007      	movs	r0, #7
 800098c:	f001 f9c9 	bl	8001d22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000990:	2200      	movs	r2, #0
 8000992:	2100      	movs	r1, #0
 8000994:	2008      	movs	r0, #8
 8000996:	f001 f9a8 	bl	8001cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800099a:	2008      	movs	r0, #8
 800099c:	f001 f9c1 	bl	8001d22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	2009      	movs	r0, #9
 80009a6:	f001 f9a0 	bl	8001cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80009aa:	2009      	movs	r0, #9
 80009ac:	f001 f9b9 	bl	8001d22 <HAL_NVIC_EnableIRQ>

}
 80009b0:	bf00      	nop
 80009b2:	3738      	adds	r7, #56	; 0x38
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40020000 	.word	0x40020000
 80009c0:	40021400 	.word	0x40021400
 80009c4:	40020c00 	.word	0x40020c00
 80009c8:	10210000 	.word	0x10210000
 80009cc:	40021800 	.word	0x40021800
 80009d0:	40021000 	.word	0x40021000

080009d4 <Right>:
	HAL_GPIO_WritePin(GPIO_LED, led, GPIO_PIN_RESET );

}

void Right()
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	2120      	movs	r1, #32
 80009dc:	480a      	ldr	r0, [pc, #40]	; (8000a08 <Right+0x34>)
 80009de:	f002 fca5 	bl	800332c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80009e2:	2201      	movs	r2, #1
 80009e4:	2140      	movs	r1, #64	; 0x40
 80009e6:	4808      	ldr	r0, [pc, #32]	; (8000a08 <Right+0x34>)
 80009e8:	f002 fca0 	bl	800332c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f2:	4806      	ldr	r0, [pc, #24]	; (8000a0c <Right+0x38>)
 80009f4:	f002 fc9a 	bl	800332c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80009f8:	2201      	movs	r2, #1
 80009fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009fe:	4804      	ldr	r0, [pc, #16]	; (8000a10 <Right+0x3c>)
 8000a00:	f002 fc94 	bl	800332c <HAL_GPIO_WritePin>
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40020000 	.word	0x40020000
 8000a0c:	40021400 	.word	0x40021400
 8000a10:	40020c00 	.word	0x40020c00

08000a14 <Left>:

void Left()
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2120      	movs	r1, #32
 8000a1c:	480a      	ldr	r0, [pc, #40]	; (8000a48 <Left+0x34>)
 8000a1e:	f002 fc85 	bl	800332c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2140      	movs	r1, #64	; 0x40
 8000a26:	4808      	ldr	r0, [pc, #32]	; (8000a48 <Left+0x34>)
 8000a28:	f002 fc80 	bl	800332c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_SET);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a32:	4806      	ldr	r0, [pc, #24]	; (8000a4c <Left+0x38>)
 8000a34:	f002 fc7a 	bl	800332c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a3e:	4804      	ldr	r0, [pc, #16]	; (8000a50 <Left+0x3c>)
 8000a40:	f002 fc74 	bl	800332c <HAL_GPIO_WritePin>
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40020000 	.word	0x40020000
 8000a4c:	40021400 	.word	0x40021400
 8000a50:	40020c00 	.word	0x40020c00

08000a54 <Foward>:

void Foward()
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2120      	movs	r1, #32
 8000a5c:	480a      	ldr	r0, [pc, #40]	; (8000a88 <Foward+0x34>)
 8000a5e:	f002 fc65 	bl	800332c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2140      	movs	r1, #64	; 0x40
 8000a66:	4808      	ldr	r0, [pc, #32]	; (8000a88 <Foward+0x34>)
 8000a68:	f002 fc60 	bl	800332c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a72:	4806      	ldr	r0, [pc, #24]	; (8000a8c <Foward+0x38>)
 8000a74:	f002 fc5a 	bl	800332c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a7e:	4804      	ldr	r0, [pc, #16]	; (8000a90 <Foward+0x3c>)
 8000a80:	f002 fc54 	bl	800332c <HAL_GPIO_WritePin>
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40020000 	.word	0x40020000
 8000a8c:	40021400 	.word	0x40021400
 8000a90:	40020c00 	.word	0x40020c00

08000a94 <Back>:

void Back()
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2120      	movs	r1, #32
 8000a9c:	480a      	ldr	r0, [pc, #40]	; (8000ac8 <Back+0x34>)
 8000a9e:	f002 fc45 	bl	800332c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	2140      	movs	r1, #64	; 0x40
 8000aa6:	4808      	ldr	r0, [pc, #32]	; (8000ac8 <Back+0x34>)
 8000aa8:	f002 fc40 	bl	800332c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_SET);
 8000aac:	2201      	movs	r2, #1
 8000aae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ab2:	4806      	ldr	r0, [pc, #24]	; (8000acc <Back+0x38>)
 8000ab4:	f002 fc3a 	bl	800332c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000abe:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <Back+0x3c>)
 8000ac0:	f002 fc34 	bl	800332c <HAL_GPIO_WritePin>
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40020000 	.word	0x40020000
 8000acc:	40021400 	.word	0x40021400
 8000ad0:	40020c00 	.word	0x40020c00

08000ad4 <Stop>:

void Stop()
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2120      	movs	r1, #32
 8000adc:	480a      	ldr	r0, [pc, #40]	; (8000b08 <Stop+0x34>)
 8000ade:	f002 fc25 	bl	800332c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2140      	movs	r1, #64	; 0x40
 8000ae6:	4808      	ldr	r0, [pc, #32]	; (8000b08 <Stop+0x34>)
 8000ae8:	f002 fc20 	bl	800332c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000af2:	4806      	ldr	r0, [pc, #24]	; (8000b0c <Stop+0x38>)
 8000af4:	f002 fc1a 	bl	800332c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000af8:	2201      	movs	r2, #1
 8000afa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000afe:	4804      	ldr	r0, [pc, #16]	; (8000b10 <Stop+0x3c>)
 8000b00:	f002 fc14 	bl	800332c <HAL_GPIO_WritePin>
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40020000 	.word	0x40020000
 8000b0c:	40021400 	.word	0x40021400
 8000b10:	40020c00 	.word	0x40020c00

08000b14 <Photo_2>:

void Photo_2()
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	while(1)
	{
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) == GPIO_PIN_SET)
 8000b18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b1c:	4808      	ldr	r0, [pc, #32]	; (8000b40 <Photo_2+0x2c>)
 8000b1e:	f002 fbed 	bl	80032fc <HAL_GPIO_ReadPin>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d106      	bne.n	8000b36 <Photo_2+0x22>
		{
			Stop();
 8000b28:	f7ff ffd4 	bl	8000ad4 <Stop>
			HAL_Delay(500);
 8000b2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b30:	f000 ffdc 	bl	8001aec <HAL_Delay>
			break;
 8000b34:	e002      	b.n	8000b3c <Photo_2+0x28>
		}
		else
		{
			Right();
 8000b36:	f7ff ff4d 	bl	80009d4 <Right>
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) == GPIO_PIN_SET)
 8000b3a:	e7ed      	b.n	8000b18 <Photo_2+0x4>
		}
	}
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40021000 	.word	0x40021000

08000b44 <Photo_3>:

void Photo_3()
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	while(1)
	{
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9) == GPIO_PIN_SET)
 8000b48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b4c:	4808      	ldr	r0, [pc, #32]	; (8000b70 <Photo_3+0x2c>)
 8000b4e:	f002 fbd5 	bl	80032fc <HAL_GPIO_ReadPin>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d106      	bne.n	8000b66 <Photo_3+0x22>
		{
			Stop();
 8000b58:	f7ff ffbc 	bl	8000ad4 <Stop>
			HAL_Delay(500);
 8000b5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b60:	f000 ffc4 	bl	8001aec <HAL_Delay>
			break;
 8000b64:	e002      	b.n	8000b6c <Photo_3+0x28>
		}
		else
		{
			Right();
 8000b66:	f7ff ff35 	bl	80009d4 <Right>
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9) == GPIO_PIN_SET)
 8000b6a:	e7ed      	b.n	8000b48 <Photo_3+0x4>
		}
	}
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40021000 	.word	0x40021000

08000b74 <Photo_4>:

void Photo_4()
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	while(1)
	{
		if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_13) == GPIO_PIN_SET)
 8000b78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b7c:	4808      	ldr	r0, [pc, #32]	; (8000ba0 <Photo_4+0x2c>)
 8000b7e:	f002 fbbd 	bl	80032fc <HAL_GPIO_ReadPin>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d106      	bne.n	8000b96 <Photo_4+0x22>
		{
			Stop();
 8000b88:	f7ff ffa4 	bl	8000ad4 <Stop>
			HAL_Delay(500);
 8000b8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b90:	f000 ffac 	bl	8001aec <HAL_Delay>
			break;
 8000b94:	e002      	b.n	8000b9c <Photo_4+0x28>
		}
		else
		{
			Right();
 8000b96:	f7ff ff1d 	bl	80009d4 <Right>
		if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_13) == GPIO_PIN_SET)
 8000b9a:	e7ed      	b.n	8000b78 <Photo_4+0x4>
		}
	}
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40021400 	.word	0x40021400

08000ba4 <Bbop>:

void Bbop()
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	Foward();
 8000ba8:	f7ff ff54 	bl	8000a54 <Foward>
	HAL_Delay(2000);
 8000bac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bb0:	f000 ff9c 	bl	8001aec <HAL_Delay>
	Stop();
 8000bb4:	f7ff ff8e 	bl	8000ad4 <Stop>
	HAL_Delay(500);
 8000bb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bbc:	f000 ff96 	bl	8001aec <HAL_Delay>
	Back();
 8000bc0:	f7ff ff68 	bl	8000a94 <Back>
	HAL_Delay(2000);
 8000bc4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bc8:	f000 ff90 	bl	8001aec <HAL_Delay>
	while(1)
	{
		if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_14) == GPIO_PIN_SET)
 8000bcc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bd0:	4806      	ldr	r0, [pc, #24]	; (8000bec <Bbop+0x48>)
 8000bd2:	f002 fb93 	bl	80032fc <HAL_GPIO_ReadPin>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d102      	bne.n	8000be2 <Bbop+0x3e>
		{
			Stop();
 8000bdc:	f7ff ff7a 	bl	8000ad4 <Stop>
			break;
 8000be0:	e002      	b.n	8000be8 <Bbop+0x44>
		}
		else
		{
			Left();
 8000be2:	f7ff ff17 	bl	8000a14 <Left>
		if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_14) == GPIO_PIN_SET)
 8000be6:	e7f1      	b.n	8000bcc <Bbop+0x28>
		}
	}
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40021400 	.word	0x40021400

08000bf0 <Motion_1>:

void Motion_1()
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	Photo_2();
 8000bf4:	f7ff ff8e 	bl	8000b14 <Photo_2>
	Bbop();
 8000bf8:	f7ff ffd4 	bl	8000ba4 <Bbop>
	Stop();
 8000bfc:	f7ff ff6a 	bl	8000ad4 <Stop>
	HAL_Delay(1000);
 8000c00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c04:	f000 ff72 	bl	8001aec <HAL_Delay>
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <Motion_2>:

void Motion_2()
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	Photo_3();
 8000c10:	f7ff ff98 	bl	8000b44 <Photo_3>
	Bbop();
 8000c14:	f7ff ffc6 	bl	8000ba4 <Bbop>
	Stop();
 8000c18:	f7ff ff5c 	bl	8000ad4 <Stop>
	HAL_Delay(1000);
 8000c1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c20:	f000 ff64 	bl	8001aec <HAL_Delay>
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <Motion_3>:

void Motion_3()
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	Photo_4();
 8000c2c:	f7ff ffa2 	bl	8000b74 <Photo_4>
	Bbop();
 8000c30:	f7ff ffb8 	bl	8000ba4 <Bbop>
	Stop();
 8000c34:	f7ff ff4e 	bl	8000ad4 <Stop>
	HAL_Delay(1000);
 8000c38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c3c:	f000 ff56 	bl	8001aec <HAL_Delay>
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <sw_Left>:

void sw_Left()
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	while(1)
	{
		if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_0) == RESET)
 8000c48:	2101      	movs	r1, #1
 8000c4a:	4807      	ldr	r0, [pc, #28]	; (8000c68 <sw_Left+0x24>)
 8000c4c:	f002 fb56 	bl	80032fc <HAL_GPIO_ReadPin>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d102      	bne.n	8000c5c <sw_Left+0x18>
		{
			Left();
 8000c56:	f7ff fedd 	bl	8000a14 <Left>
 8000c5a:	e7f5      	b.n	8000c48 <sw_Left+0x4>
		}
		else
		{
			Stop();
 8000c5c:	f7ff ff3a 	bl	8000ad4 <Stop>
			break;
 8000c60:	bf00      	nop
		}
	}
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40021800 	.word	0x40021800

08000c6c <sw_Right>:

void sw_Right()
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	while(1)
	{
		if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_1) == RESET)
 8000c70:	2102      	movs	r1, #2
 8000c72:	4807      	ldr	r0, [pc, #28]	; (8000c90 <sw_Right+0x24>)
 8000c74:	f002 fb42 	bl	80032fc <HAL_GPIO_ReadPin>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d102      	bne.n	8000c84 <sw_Right+0x18>
		{
			Right();
 8000c7e:	f7ff fea9 	bl	80009d4 <Right>
 8000c82:	e7f5      	b.n	8000c70 <sw_Right+0x4>
		}
		else
		{
			Stop();
 8000c84:	f7ff ff26 	bl	8000ad4 <Stop>
			break;
 8000c88:	bf00      	nop
		}
	}
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40021800 	.word	0x40021800

08000c94 <sw_Foward>:

void sw_Foward()
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	while(1)
	{
		if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_2) == RESET)
 8000c98:	2104      	movs	r1, #4
 8000c9a:	4807      	ldr	r0, [pc, #28]	; (8000cb8 <sw_Foward+0x24>)
 8000c9c:	f002 fb2e 	bl	80032fc <HAL_GPIO_ReadPin>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d102      	bne.n	8000cac <sw_Foward+0x18>
		{
			Foward();
 8000ca6:	f7ff fed5 	bl	8000a54 <Foward>
 8000caa:	e7f5      	b.n	8000c98 <sw_Foward+0x4>
		}
		else
		{
			Stop();
 8000cac:	f7ff ff12 	bl	8000ad4 <Stop>
			break;
 8000cb0:	bf00      	nop
		}
	}
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40021800 	.word	0x40021800

08000cbc <sw_Back>:

void sw_Back()
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	while(1)
	{
		if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_3) == RESET)
 8000cc0:	2108      	movs	r1, #8
 8000cc2:	4807      	ldr	r0, [pc, #28]	; (8000ce0 <sw_Back+0x24>)
 8000cc4:	f002 fb1a 	bl	80032fc <HAL_GPIO_ReadPin>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d102      	bne.n	8000cd4 <sw_Back+0x18>
		{
			Back();
 8000cce:	f7ff fee1 	bl	8000a94 <Back>
 8000cd2:	e7f5      	b.n	8000cc0 <sw_Back+0x4>
		}
		else
		{
			Stop();
 8000cd4:	f7ff fefe 	bl	8000ad4 <Stop>
			break;
 8000cd8:	bf00      	nop
		}
	}
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40021800 	.word	0x40021800

08000ce4 <User_notification>:
void User_notification(struct netif *netif)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	if (netif_is_up(netif))  {
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d005      	beq.n	8000d08 <User_notification+0x24>
		HAL_GPIO_WritePin(GPIO_LED, LED7, GPIO_PIN_SET);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	2140      	movs	r1, #64	; 0x40
 8000d00:	4806      	ldr	r0, [pc, #24]	; (8000d1c <User_notification+0x38>)
 8000d02:	f002 fb13 	bl	800332c <HAL_GPIO_WritePin>
	}

	else  {
		HAL_GPIO_WritePin(GPIO_LED, LED8, GPIO_PIN_SET);
	}
}
 8000d06:	e004      	b.n	8000d12 <User_notification+0x2e>
		HAL_GPIO_WritePin(GPIO_LED, LED8, GPIO_PIN_SET);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2180      	movs	r1, #128	; 0x80
 8000d0c:	4803      	ldr	r0, [pc, #12]	; (8000d1c <User_notification+0x38>)
 8000d0e:	f002 fb0d 	bl	800332c <HAL_GPIO_WritePin>
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40020c00 	.word	0x40020c00

08000d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	4a0f      	ldr	r2, [pc, #60]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d44:	6453      	str	r3, [r2, #68]	; 0x44
 8000d46:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	603b      	str	r3, [r7, #0]
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d60:	6413      	str	r3, [r2, #64]	; 0x40
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40023800 	.word	0x40023800

08000d80 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0b      	ldr	r2, [pc, #44]	; (8000dbc <HAL_TIM_PWM_MspInit+0x3c>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d10d      	bne.n	8000dae <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <HAL_TIM_PWM_MspInit+0x40>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	4a09      	ldr	r2, [pc, #36]	; (8000dc0 <HAL_TIM_PWM_MspInit+0x40>)
 8000d9c:	f043 0304 	orr.w	r3, r3, #4
 8000da0:	6413      	str	r3, [r2, #64]	; 0x40
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <HAL_TIM_PWM_MspInit+0x40>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	f003 0304 	and.w	r3, r3, #4
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000dae:	bf00      	nop
 8000db0:	3714      	adds	r7, #20
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	40000800 	.word	0x40000800
 8000dc0:	40023800 	.word	0x40023800

08000dc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	; 0x28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a22      	ldr	r2, [pc, #136]	; (8000e6c <HAL_TIM_MspPostInit+0xa8>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d13d      	bne.n	8000e62 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	4b21      	ldr	r3, [pc, #132]	; (8000e70 <HAL_TIM_MspPostInit+0xac>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a20      	ldr	r2, [pc, #128]	; (8000e70 <HAL_TIM_MspPostInit+0xac>)
 8000df0:	f043 0308 	orr.w	r3, r3, #8
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <HAL_TIM_MspPostInit+0xac>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0308 	and.w	r3, r3, #8
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <HAL_TIM_MspPostInit+0xac>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a19      	ldr	r2, [pc, #100]	; (8000e70 <HAL_TIM_MspPostInit+0xac>)
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <HAL_TIM_MspPostInit+0xac>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e30:	2302      	movs	r3, #2
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4619      	mov	r1, r3
 8000e3a:	480e      	ldr	r0, [pc, #56]	; (8000e74 <HAL_TIM_MspPostInit+0xb0>)
 8000e3c:	f002 f8b2 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e52:	2302      	movs	r3, #2
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4806      	ldr	r0, [pc, #24]	; (8000e78 <HAL_TIM_MspPostInit+0xb4>)
 8000e5e:	f002 f8a1 	bl	8002fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000e62:	bf00      	nop
 8000e64:	3728      	adds	r7, #40	; 0x28
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40000800 	.word	0x40000800
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40020c00 	.word	0x40020c00
 8000e78:	40020400 	.word	0x40020400

08000e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <HardFault_Handler+0x4>

08000e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <MemManage_Handler+0x4>

08000e96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed0:	f000 fdec 	bl	8001aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000edc:	2001      	movs	r0, #1
 8000ede:	f002 fa3f 	bl	8003360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000eea:	2002      	movs	r0, #2
 8000eec:	f002 fa38 	bl	8003360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000ef8:	2004      	movs	r0, #4
 8000efa:	f002 fa31 	bl	8003360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000f06:	2008      	movs	r0, #8
 8000f08:	f002 fa2a 	bl	8003360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
	return 1;
 8000f14:	2301      	movs	r3, #1
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <_kill>:

int _kill(int pid, int sig)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <_kill+0x20>)
 8000f2c:	2216      	movs	r2, #22
 8000f2e:	601a      	str	r2, [r3, #0]
	return -1;
 8000f30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	20006954 	.word	0x20006954

08000f44 <_exit>:

void _exit (int status)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff ffe5 	bl	8000f20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f56:	e7fe      	b.n	8000f56 <_exit+0x12>

08000f58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	e00a      	b.n	8000f80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f6a:	f3af 8000 	nop.w
 8000f6e:	4601      	mov	r1, r0
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	1c5a      	adds	r2, r3, #1
 8000f74:	60ba      	str	r2, [r7, #8]
 8000f76:	b2ca      	uxtb	r2, r1
 8000f78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	697a      	ldr	r2, [r7, #20]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	dbf0      	blt.n	8000f6a <_read+0x12>
	}

return len;
 8000f88:	687b      	ldr	r3, [r7, #4]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b086      	sub	sp, #24
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	60f8      	str	r0, [r7, #12]
 8000f9a:	60b9      	str	r1, [r7, #8]
 8000f9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	e009      	b.n	8000fb8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	1c5a      	adds	r2, r3, #1
 8000fa8:	60ba      	str	r2, [r7, #8]
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	dbf1      	blt.n	8000fa4 <_write+0x12>
	}
	return len;
 8000fc0:	687b      	ldr	r3, [r7, #4]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <_close>:

int _close(int file)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b083      	sub	sp, #12
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
	return -1;
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
 8000fea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ff2:	605a      	str	r2, [r3, #4]
	return 0;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <_isatty>:

int _isatty(int file)
{
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
	return 1;
 800100a:	2301      	movs	r3, #1
}
 800100c:	4618      	mov	r0, r3
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
	return 0;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001034:	b480      	push	{r7}
 8001036:	b087      	sub	sp, #28
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800103c:	4a14      	ldr	r2, [pc, #80]	; (8001090 <_sbrk+0x5c>)
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <_sbrk+0x60>)
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001048:	4b13      	ldr	r3, [pc, #76]	; (8001098 <_sbrk+0x64>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d102      	bne.n	8001056 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <_sbrk+0x64>)
 8001052:	4a12      	ldr	r2, [pc, #72]	; (800109c <_sbrk+0x68>)
 8001054:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <_sbrk+0x64>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	429a      	cmp	r2, r3
 8001062:	d205      	bcs.n	8001070 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001064:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <_sbrk+0x6c>)
 8001066:	220c      	movs	r2, #12
 8001068:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
 800106e:	e009      	b.n	8001084 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <_sbrk+0x64>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <_sbrk+0x64>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	4a06      	ldr	r2, [pc, #24]	; (8001098 <_sbrk+0x64>)
 8001080:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001082:	68fb      	ldr	r3, [r7, #12]
}
 8001084:	4618      	mov	r0, r3
 8001086:	371c      	adds	r7, #28
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	20030000 	.word	0x20030000
 8001094:	00000400 	.word	0x00000400
 8001098:	20000094 	.word	0x20000094
 800109c:	20006968 	.word	0x20006968
 80010a0:	20006954 	.word	0x20006954

080010a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <SystemInit+0x28>)
 80010aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ae:	4a07      	ldr	r2, [pc, #28]	; (80010cc <SystemInit+0x28>)
 80010b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <SystemInit+0x28>)
 80010ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010be:	609a      	str	r2, [r3, #8]
#endif
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <tcp_echoserver_init>:
// -----------------------------------------------------------------------------
// -- <4> TCP 서버를 초기화함
//	Server의 IP를 binding하고 listening을 시작
// -----------------------------------------------------------------------------
void tcp_echoserver_init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
  // -- <4-1> create new tcp pcb 
  tcp_echoserver_pcb = tcp_new();
 80010d6:	f007 f827 	bl	8008128 <tcp_new>
 80010da:	4603      	mov	r3, r0
 80010dc:	4a16      	ldr	r2, [pc, #88]	; (8001138 <tcp_echoserver_init+0x68>)
 80010de:	6013      	str	r3, [r2, #0]

  if (tcp_echoserver_pcb != NULL)  {
 80010e0:	4b15      	ldr	r3, [pc, #84]	; (8001138 <tcp_echoserver_init+0x68>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d023      	beq.n	8001130 <tcp_echoserver_init+0x60>
		err_t  err;

		// -- <4-2> 위에서 만든 tcp_echoserver_pcb에  접속될 client의 IP (IP_ADDR_ANY)와
		//             Port (PORT)를 bind 함
		err = tcp_bind(tcp_echoserver_pcb, IP_ADDR_ANY, PORT);
 80010e8:	4b13      	ldr	r3, [pc, #76]	; (8001138 <tcp_echoserver_init+0x68>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f641 3258 	movw	r2, #7000	; 0x1b58
 80010f0:	4912      	ldr	r1, [pc, #72]	; (800113c <tcp_echoserver_init+0x6c>)
 80010f2:	4618      	mov	r0, r3
 80010f4:	f005 ff74 	bl	8006fe0 <tcp_bind>
 80010f8:	4603      	mov	r3, r0
 80010fa:	71fb      	strb	r3, [r7, #7]
		
		if (err == ERR_OK) {
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d10f      	bne.n	8001124 <tcp_echoserver_init+0x54>
			// -- <4-3> listening(client에서 접속 요청 수신을 대기)을 시작
			  tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);      
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <tcp_echoserver_init+0x68>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	21ff      	movs	r1, #255	; 0xff
 800110a:	4618      	mov	r0, r3
 800110c:	f006 f820 	bl	8007150 <tcp_listen_with_backlog>
 8001110:	4603      	mov	r3, r0
 8001112:	4a09      	ldr	r2, [pc, #36]	; (8001138 <tcp_echoserver_init+0x68>)
 8001114:	6013      	str	r3, [r2, #0]
			  // -- <4-4> 새로운 tcp connection이 accept될때 호출될 콜백 함수를 지정
			  tcp_accept(tcp_echoserver_pcb, tcp_echoserver_accept);
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <tcp_echoserver_init+0x68>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4909      	ldr	r1, [pc, #36]	; (8001140 <tcp_echoserver_init+0x70>)
 800111c:	4618      	mov	r0, r3
 800111e:	f007 f883 	bl	8008228 <tcp_accept>
		else {
			  /* deallocate the pcb */
			  memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
		}
  }
}
 8001122:	e005      	b.n	8001130 <tcp_echoserver_init+0x60>
			  memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 8001124:	4b04      	ldr	r3, [pc, #16]	; (8001138 <tcp_echoserver_init+0x68>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	2001      	movs	r0, #1
 800112c:	f004 fb10 	bl	8005750 <memp_free>
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000098 	.word	0x20000098
 800113c:	0801363c 	.word	0x0801363c
 8001140:	08001145 	.word	0x08001145

08001144 <tcp_echoserver_accept>:
   retval    err_t		: error status
  */
// -------------------------------------------------------------------------------

static err_t tcp_echoserver_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	4613      	mov	r3, r2
 8001150:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8001152:	2101      	movs	r1, #1
 8001154:	68b8      	ldr	r0, [r7, #8]
 8001156:	f006 fdf5 	bl	8007d44 <tcp_setprio>

  /* allocate structure es to maintain tcp connection informations */
  es = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 800115a:	200c      	movs	r0, #12
 800115c:	f004 f93e 	bl	80053dc <mem_malloc>
 8001160:	6138      	str	r0, [r7, #16]
	
  if (es != NULL)  {
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d024      	beq.n	80011b2 <tcp_echoserver_accept+0x6e>
		es->state = ES_ACCEPTED;
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	2201      	movs	r2, #1
 800116c:	701a      	strb	r2, [r3, #0]
		es->pcb = newpcb;
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	68ba      	ldr	r2, [r7, #8]
 8001172:	605a      	str	r2, [r3, #4]
		es->p = NULL;
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
		
		/* pass newly allocated es structure as argument to newpcb */
		tcp_arg(newpcb, es);		
 800117a:	6939      	ldr	r1, [r7, #16]
 800117c:	68b8      	ldr	r0, [r7, #8]
 800117e:	f006 ffdb 	bl	8008138 <tcp_arg>
		
		tcp_sent(newpcb, tcp_echoserver_sent);
 8001182:	4912      	ldr	r1, [pc, #72]	; (80011cc <tcp_echoserver_accept+0x88>)
 8001184:	68b8      	ldr	r0, [r7, #8]
 8001186:	f007 f80b 	bl	80081a0 <tcp_sent>
		
		// -- <5-2> ������ �۽��� �Ϸ�Ǹ� ȣ��� �ݹ��Լ��� ���� 
		tcp_recv(newpcb, tcp_echoserver_recv);			
 800118a:	4911      	ldr	r1, [pc, #68]	; (80011d0 <tcp_echoserver_accept+0x8c>)
 800118c:	68b8      	ldr	r0, [r7, #8]
 800118e:	f006 ffe5 	bl	800815c <tcp_recv>
		
		/* initialize lwip tcp_err callback function for newpcb  */
		tcp_err(newpcb, tcp_echoserver_error);		
 8001192:	4910      	ldr	r1, [pc, #64]	; (80011d4 <tcp_echoserver_accept+0x90>)
 8001194:	68b8      	ldr	r0, [r7, #8]
 8001196:	f007 f825 	bl	80081e4 <tcp_err>
		
		// -- <5-3> polling시 호출될 콜백함수를 지정
		//       - 이 콜백함수는 주기적으로 호출되어야 한다.
		//      - 이 콜백함수에서는 송신할 데이터 중에서 아직 미송신된 것이 있는지와
		//	close되어야 할 connection이 있는지를 체크한다.
		tcp_poll(newpcb, tcp_echoserver_poll, 1);
 800119a:	2201      	movs	r2, #1
 800119c:	490e      	ldr	r1, [pc, #56]	; (80011d8 <tcp_echoserver_accept+0x94>)
 800119e:	68b8      	ldr	r0, [r7, #8]
 80011a0:	f007 f85a 	bl	8008258 <tcp_poll>
		
		/* send data */
		tcp_echoserver_send(newpcb,es);
 80011a4:	6939      	ldr	r1, [r7, #16]
 80011a6:	68b8      	ldr	r0, [r7, #8]
 80011a8:	f000 f998 	bl	80014dc <tcp_echoserver_send>
					
		ret_err = ERR_OK;
 80011ac:	2300      	movs	r3, #0
 80011ae:	75fb      	strb	r3, [r7, #23]
 80011b0:	e005      	b.n	80011be <tcp_echoserver_accept+0x7a>
  }
  
  else  {
		/*  close tcp connection */
		tcp_echoserver_connection_close(newpcb, es);
 80011b2:	6939      	ldr	r1, [r7, #16]
 80011b4:	68b8      	ldr	r0, [r7, #8]
 80011b6:	f000 fa27 	bl	8001608 <tcp_echoserver_connection_close>
		/* return memory error */
		ret_err = ERR_MEM;
 80011ba:	23ff      	movs	r3, #255	; 0xff
 80011bc:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err; 
 80011be:	f997 3017 	ldrsb.w	r3, [r7, #23]
  
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	08001579 	.word	0x08001579
 80011d0:	080011dd 	.word	0x080011dd
 80011d4:	08001657 	.word	0x08001657
 80011d8:	080015b7 	.word	0x080015b7

080011dc <tcp_echoserver_recv>:
  * retval err_		t: error code
  */
// -------------------------------------------------------------------------------

static err_t   tcp_echoserver_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
 80011e8:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;	
  err_t 	ret_err;
  char 	*cp;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d105      	bne.n	80011fc <tcp_echoserver_recv+0x20>
 80011f0:	4bad      	ldr	r3, [pc, #692]	; (80014a8 <tcp_echoserver_recv+0x2cc>)
 80011f2:	22b1      	movs	r2, #177	; 0xb1
 80011f4:	49ad      	ldr	r1, [pc, #692]	; (80014ac <tcp_echoserver_recv+0x2d0>)
 80011f6:	48ae      	ldr	r0, [pc, #696]	; (80014b0 <tcp_echoserver_recv+0x2d4>)
 80011f8:	f00e fa62 	bl	800f6c0 <iprintf>
  
  es = (struct tcp_echoserver_struct *)arg;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	61bb      	str	r3, [r7, #24]
  
  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)  {
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d116      	bne.n	8001234 <tcp_echoserver_recv+0x58>
		/* remote host closed connection */
		es->state = ES_CLOSING;
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	2203      	movs	r2, #3
 800120a:	701a      	strb	r2, [r3, #0]
		if(es->p == NULL) {
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d104      	bne.n	800121e <tcp_echoserver_recv+0x42>
			   /* we're done sending, close connection */
			   tcp_echoserver_connection_close(tpcb, es);
 8001214:	69b9      	ldr	r1, [r7, #24]
 8001216:	68b8      	ldr	r0, [r7, #8]
 8001218:	f000 f9f6 	bl	8001608 <tcp_echoserver_connection_close>
 800121c:	e007      	b.n	800122e <tcp_echoserver_recv+0x52>
		}
		else {
			  /* we're not done yet */
			  /* acknowledge received packet */
			  tcp_sent(tpcb, tcp_echoserver_sent);
 800121e:	49a5      	ldr	r1, [pc, #660]	; (80014b4 <tcp_echoserver_recv+0x2d8>)
 8001220:	68b8      	ldr	r0, [r7, #8]
 8001222:	f006 ffbd 	bl	80081a0 <tcp_sent>
			  
			  /* send remaining data*/
			  tcp_echoserver_send(tpcb, es);
 8001226:	69b9      	ldr	r1, [r7, #24]
 8001228:	68b8      	ldr	r0, [r7, #8]
 800122a:	f000 f957 	bl	80014dc <tcp_echoserver_send>
		}
		ret_err = ERR_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	77fb      	strb	r3, [r7, #31]
 8001232:	e132      	b.n	800149a <tcp_echoserver_recv+0x2be>
  }
  
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)  {
 8001234:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d00b      	beq.n	8001254 <tcp_echoserver_recv+0x78>
		/* free received pbuf*/
		if (p != NULL)	{
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d005      	beq.n	800124e <tcp_echoserver_recv+0x72>
			  es->p = NULL;
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
			  pbuf_free(p);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f005 f893 	bl	8006374 <pbuf_free>
		}
		ret_err = err;
 800124e:	78fb      	ldrb	r3, [r7, #3]
 8001250:	77fb      	strb	r3, [r7, #31]
 8001252:	e122      	b.n	800149a <tcp_echoserver_recv+0x2be>
  }
 
	// -- <6-1> 통신이 accept되고 데이터가 최초로 수신(es->state == ES_ACCEPTED)되는 경우
  else if(es->state == ES_ACCEPTED)  {	
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b01      	cmp	r3, #1
 800125a:	f040 8084 	bne.w	8001366 <tcp_echoserver_recv+0x18a>
	  
		// -- my code 추가 : ST의 orignal  소스코드에는 없는 부분임 ----

	  	  	// -- <6-1-1> 수신된 데이터(p->payload)를 cp에 대입
			cp  = p->payload;		
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	613b      	str	r3, [r7, #16]
	  
			//  -- <6-1-2> : <L11> 형식의 데이터가 수신될 경우
			//	              -> 대응하는 LED를 On/Off 하고, 메시지를 송신함
			if(strcmp(cp,"Ba") == 0) {
 8001264:	4994      	ldr	r1, [pc, #592]	; (80014b8 <tcp_echoserver_recv+0x2dc>)
 8001266:	6938      	ldr	r0, [r7, #16]
 8001268:	f7fe ffc2 	bl	80001f0 <strcmp>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d106      	bne.n	8001280 <tcp_echoserver_recv+0xa4>
				Motion_1();
 8001272:	f7ff fcbd 	bl	8000bf0 <Motion_1>
				message_send(tpcb, 10);
 8001276:	210a      	movs	r1, #10
 8001278:	68b8      	ldr	r0, [r7, #8]
 800127a:	f000 f9ff 	bl	800167c <message_send>
 800127e:	e065      	b.n	800134c <tcp_echoserver_recv+0x170>
			}			
			else if(strcmp(cp,"Bb") == 0) {
 8001280:	498e      	ldr	r1, [pc, #568]	; (80014bc <tcp_echoserver_recv+0x2e0>)
 8001282:	6938      	ldr	r0, [r7, #16]
 8001284:	f7fe ffb4 	bl	80001f0 <strcmp>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d106      	bne.n	800129c <tcp_echoserver_recv+0xc0>
				Motion_2();
 800128e:	f7ff fcbd 	bl	8000c0c <Motion_2>
				message_send(tpcb, 11);
 8001292:	210b      	movs	r1, #11
 8001294:	68b8      	ldr	r0, [r7, #8]
 8001296:	f000 f9f1 	bl	800167c <message_send>
 800129a:	e057      	b.n	800134c <tcp_echoserver_recv+0x170>
			}			
			else if(strcmp(cp,"Bc") == 0)	{
 800129c:	4988      	ldr	r1, [pc, #544]	; (80014c0 <tcp_echoserver_recv+0x2e4>)
 800129e:	6938      	ldr	r0, [r7, #16]
 80012a0:	f7fe ffa6 	bl	80001f0 <strcmp>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d106      	bne.n	80012b8 <tcp_echoserver_recv+0xdc>
				Motion_3();
 80012aa:	f7ff fcbd 	bl	8000c28 <Motion_3>
				message_send(tpcb, 20);
 80012ae:	2114      	movs	r1, #20
 80012b0:	68b8      	ldr	r0, [r7, #8]
 80012b2:	f000 f9e3 	bl	800167c <message_send>
 80012b6:	e049      	b.n	800134c <tcp_echoserver_recv+0x170>
			}
			else if(strcmp(cp,"L") == 0)	{
 80012b8:	4982      	ldr	r1, [pc, #520]	; (80014c4 <tcp_echoserver_recv+0x2e8>)
 80012ba:	6938      	ldr	r0, [r7, #16]
 80012bc:	f7fe ff98 	bl	80001f0 <strcmp>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d106      	bne.n	80012d4 <tcp_echoserver_recv+0xf8>
				sw_Left();
 80012c6:	f7ff fcbd 	bl	8000c44 <sw_Left>
				message_send(tpcb, 21);
 80012ca:	2115      	movs	r1, #21
 80012cc:	68b8      	ldr	r0, [r7, #8]
 80012ce:	f000 f9d5 	bl	800167c <message_send>
 80012d2:	e03b      	b.n	800134c <tcp_echoserver_recv+0x170>
			}
			else if(strcmp(cp,"R") == 0)	{
 80012d4:	497c      	ldr	r1, [pc, #496]	; (80014c8 <tcp_echoserver_recv+0x2ec>)
 80012d6:	6938      	ldr	r0, [r7, #16]
 80012d8:	f7fe ff8a 	bl	80001f0 <strcmp>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d106      	bne.n	80012f0 <tcp_echoserver_recv+0x114>
				sw_Right();
 80012e2:	f7ff fcc3 	bl	8000c6c <sw_Right>
				message_send(tpcb, 30);
 80012e6:	211e      	movs	r1, #30
 80012e8:	68b8      	ldr	r0, [r7, #8]
 80012ea:	f000 f9c7 	bl	800167c <message_send>
 80012ee:	e02d      	b.n	800134c <tcp_echoserver_recv+0x170>
			}
			else if(strcmp(cp,"F") == 0)	{
 80012f0:	4976      	ldr	r1, [pc, #472]	; (80014cc <tcp_echoserver_recv+0x2f0>)
 80012f2:	6938      	ldr	r0, [r7, #16]
 80012f4:	f7fe ff7c 	bl	80001f0 <strcmp>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d106      	bne.n	800130c <tcp_echoserver_recv+0x130>
				sw_Foward();
 80012fe:	f7ff fcc9 	bl	8000c94 <sw_Foward>
				message_send(tpcb, 31);
 8001302:	211f      	movs	r1, #31
 8001304:	68b8      	ldr	r0, [r7, #8]
 8001306:	f000 f9b9 	bl	800167c <message_send>
 800130a:	e01f      	b.n	800134c <tcp_echoserver_recv+0x170>
			}
			else if(strcmp(cp,"B") == 0)	{
 800130c:	4970      	ldr	r1, [pc, #448]	; (80014d0 <tcp_echoserver_recv+0x2f4>)
 800130e:	6938      	ldr	r0, [r7, #16]
 8001310:	f7fe ff6e 	bl	80001f0 <strcmp>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d106      	bne.n	8001328 <tcp_echoserver_recv+0x14c>
				sw_Back();
 800131a:	f7ff fccf 	bl	8000cbc <sw_Back>
				message_send(tpcb, 40);
 800131e:	2128      	movs	r1, #40	; 0x28
 8001320:	68b8      	ldr	r0, [r7, #8]
 8001322:	f000 f9ab 	bl	800167c <message_send>
 8001326:	e011      	b.n	800134c <tcp_echoserver_recv+0x170>
			}
			else if(strcmp(cp,"Cc") == 0)	{
 8001328:	496a      	ldr	r1, [pc, #424]	; (80014d4 <tcp_echoserver_recv+0x2f8>)
 800132a:	6938      	ldr	r0, [r7, #16]
 800132c:	f7fe ff60 	bl	80001f0 <strcmp>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d104      	bne.n	8001340 <tcp_echoserver_recv+0x164>
				message_send(tpcb, 41);
 8001336:	2129      	movs	r1, #41	; 0x29
 8001338:	68b8      	ldr	r0, [r7, #8]
 800133a:	f000 f99f 	bl	800167c <message_send>
 800133e:	e005      	b.n	800134c <tcp_echoserver_recv+0x170>
			}
			
			// -- <6-1-3> : <L11> 형식이 아닌 데이터가 수신될 경우
			//	- 99번 메시지를 송신함
			else {
				message_send(tpcb_this, 99);
 8001340:	4b65      	ldr	r3, [pc, #404]	; (80014d8 <tcp_echoserver_recv+0x2fc>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2163      	movs	r1, #99	; 0x63
 8001346:	4618      	mov	r0, r3
 8001348:	f000 f998 	bl	800167c <message_send>
			//   -- 끝 :  my code 추가 --
			
			
			// -- <6-1-4> ES_ACCEPTED 상태에서 필요한 처리를 함
			/* first data chunk in p->payload */
			es->state = ES_RECEIVED;		
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	2202      	movs	r2, #2
 8001350:	701a      	strb	r2, [r3, #0]
			/* store reference to incoming pbuf (chain) */
			es->p = p;
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	609a      	str	r2, [r3, #8]
				
			/* initialize LwIP tcp_sent callback function */
			tcp_sent(tpcb, tcp_echoserver_sent);		
 8001358:	4956      	ldr	r1, [pc, #344]	; (80014b4 <tcp_echoserver_recv+0x2d8>)
 800135a:	68b8      	ldr	r0, [r7, #8]
 800135c:	f006 ff20 	bl	80081a0 <tcp_sent>
			/* send back the received data (echo) */
			//tcp_echoserver_send(tpcb, es);		
			ret_err = ERR_OK;
 8001360:	2300      	movs	r3, #0
 8001362:	77fb      	strb	r3, [r7, #31]
 8001364:	e099      	b.n	800149a <tcp_echoserver_recv+0x2be>

  }   //  End of <6-1>

  
  // -- <6-2> 데이터가 수신(es->state == ES_RECEIVED)되는 경우
  else if (es->state == ES_RECEIVED)  {
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b02      	cmp	r3, #2
 800136c:	f040 8087 	bne.w	800147e <tcp_echoserver_recv+0x2a2>
		/* more data received from client and previous data has been already sent*/
		if(es->p == NULL)	{	
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d178      	bne.n	800146a <tcp_echoserver_recv+0x28e>
			
			// -- my code 추가 : ST의 orignal  소스코드에는 없는 부분임 -----

			// -- <6-2-1> 수신된 데이터(p->payload)를 cp에 대입
			cp  = p->payload; 	
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	613b      	str	r3, [r7, #16]
			
			//  -- <6-2-2> : <L11> 형식의 데이터가 수신될 경우
			//      		- 대응하는 LED를 On/Off 하고, 메시지를 송신함
			if(strcmp(cp,"Ba") == 0) {
 800137e:	494e      	ldr	r1, [pc, #312]	; (80014b8 <tcp_echoserver_recv+0x2dc>)
 8001380:	6938      	ldr	r0, [r7, #16]
 8001382:	f7fe ff35 	bl	80001f0 <strcmp>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d106      	bne.n	800139a <tcp_echoserver_recv+0x1be>
				Motion_1();
 800138c:	f7ff fc30 	bl	8000bf0 <Motion_1>
				message_send(tpcb, 10);
 8001390:	210a      	movs	r1, #10
 8001392:	68b8      	ldr	r0, [r7, #8]
 8001394:	f000 f972 	bl	800167c <message_send>
 8001398:	e06e      	b.n	8001478 <tcp_echoserver_recv+0x29c>
			}			
			else if(strcmp(cp,"Bb") == 0) {
 800139a:	4948      	ldr	r1, [pc, #288]	; (80014bc <tcp_echoserver_recv+0x2e0>)
 800139c:	6938      	ldr	r0, [r7, #16]
 800139e:	f7fe ff27 	bl	80001f0 <strcmp>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d106      	bne.n	80013b6 <tcp_echoserver_recv+0x1da>
				Motion_2();
 80013a8:	f7ff fc30 	bl	8000c0c <Motion_2>
				message_send(tpcb, 11);
 80013ac:	210b      	movs	r1, #11
 80013ae:	68b8      	ldr	r0, [r7, #8]
 80013b0:	f000 f964 	bl	800167c <message_send>
 80013b4:	e060      	b.n	8001478 <tcp_echoserver_recv+0x29c>
			}			
			else if(strcmp(cp,"Bc") == 0)	{
 80013b6:	4942      	ldr	r1, [pc, #264]	; (80014c0 <tcp_echoserver_recv+0x2e4>)
 80013b8:	6938      	ldr	r0, [r7, #16]
 80013ba:	f7fe ff19 	bl	80001f0 <strcmp>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d106      	bne.n	80013d2 <tcp_echoserver_recv+0x1f6>
				Motion_3();
 80013c4:	f7ff fc30 	bl	8000c28 <Motion_3>
				message_send(tpcb, 20);
 80013c8:	2114      	movs	r1, #20
 80013ca:	68b8      	ldr	r0, [r7, #8]
 80013cc:	f000 f956 	bl	800167c <message_send>
 80013d0:	e052      	b.n	8001478 <tcp_echoserver_recv+0x29c>
			}
			else if(strcmp(cp,"L") == 0)	{
 80013d2:	493c      	ldr	r1, [pc, #240]	; (80014c4 <tcp_echoserver_recv+0x2e8>)
 80013d4:	6938      	ldr	r0, [r7, #16]
 80013d6:	f7fe ff0b 	bl	80001f0 <strcmp>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d106      	bne.n	80013ee <tcp_echoserver_recv+0x212>
				sw_Left();
 80013e0:	f7ff fc30 	bl	8000c44 <sw_Left>
				message_send(tpcb, 21);
 80013e4:	2115      	movs	r1, #21
 80013e6:	68b8      	ldr	r0, [r7, #8]
 80013e8:	f000 f948 	bl	800167c <message_send>
 80013ec:	e044      	b.n	8001478 <tcp_echoserver_recv+0x29c>
			}
			else if(strcmp(cp,"R") == 0)	{
 80013ee:	4936      	ldr	r1, [pc, #216]	; (80014c8 <tcp_echoserver_recv+0x2ec>)
 80013f0:	6938      	ldr	r0, [r7, #16]
 80013f2:	f7fe fefd 	bl	80001f0 <strcmp>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d106      	bne.n	800140a <tcp_echoserver_recv+0x22e>
				sw_Right();
 80013fc:	f7ff fc36 	bl	8000c6c <sw_Right>
				message_send(tpcb, 30);
 8001400:	211e      	movs	r1, #30
 8001402:	68b8      	ldr	r0, [r7, #8]
 8001404:	f000 f93a 	bl	800167c <message_send>
 8001408:	e036      	b.n	8001478 <tcp_echoserver_recv+0x29c>
			}
			else if(strcmp(cp,"F") == 0)	{
 800140a:	4930      	ldr	r1, [pc, #192]	; (80014cc <tcp_echoserver_recv+0x2f0>)
 800140c:	6938      	ldr	r0, [r7, #16]
 800140e:	f7fe feef 	bl	80001f0 <strcmp>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d106      	bne.n	8001426 <tcp_echoserver_recv+0x24a>
				sw_Foward();
 8001418:	f7ff fc3c 	bl	8000c94 <sw_Foward>
				message_send(tpcb, 31);
 800141c:	211f      	movs	r1, #31
 800141e:	68b8      	ldr	r0, [r7, #8]
 8001420:	f000 f92c 	bl	800167c <message_send>
 8001424:	e028      	b.n	8001478 <tcp_echoserver_recv+0x29c>
			}
			else if(strcmp(cp,"B") == 0)	{
 8001426:	492a      	ldr	r1, [pc, #168]	; (80014d0 <tcp_echoserver_recv+0x2f4>)
 8001428:	6938      	ldr	r0, [r7, #16]
 800142a:	f7fe fee1 	bl	80001f0 <strcmp>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d106      	bne.n	8001442 <tcp_echoserver_recv+0x266>
				sw_Back();
 8001434:	f7ff fc42 	bl	8000cbc <sw_Back>
				message_send(tpcb, 40);
 8001438:	2128      	movs	r1, #40	; 0x28
 800143a:	68b8      	ldr	r0, [r7, #8]
 800143c:	f000 f91e 	bl	800167c <message_send>
 8001440:	e01a      	b.n	8001478 <tcp_echoserver_recv+0x29c>
			}
			else if(strcmp(cp,"Cc") == 0)	{
 8001442:	4924      	ldr	r1, [pc, #144]	; (80014d4 <tcp_echoserver_recv+0x2f8>)
 8001444:	6938      	ldr	r0, [r7, #16]
 8001446:	f7fe fed3 	bl	80001f0 <strcmp>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d104      	bne.n	800145a <tcp_echoserver_recv+0x27e>
				message_send(tpcb, 41);
 8001450:	2129      	movs	r1, #41	; 0x29
 8001452:	68b8      	ldr	r0, [r7, #8]
 8001454:	f000 f912 	bl	800167c <message_send>
 8001458:	e00e      	b.n	8001478 <tcp_echoserver_recv+0x29c>

			// -- <6-1-3> : <L11> 형식이 아닌 데이터가 수신될 경우
			// 	- 수신된 데이터를 그대로 echo back 함
			else {
				/* send back received data */
				 es->p = p;
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	609a      	str	r2, [r3, #8]
				tcp_echoserver_send(tpcb, es);	
 8001460:	69b9      	ldr	r1, [r7, #24]
 8001462:	68b8      	ldr	r0, [r7, #8]
 8001464:	f000 f83a 	bl	80014dc <tcp_echoserver_send>
 8001468:	e006      	b.n	8001478 <tcp_echoserver_recv+0x29c>
		}
		
		else	{
			  struct pbuf *ptr;
			  /* chain pbufs to the end of what we recv'ed previously  */
			  ptr = es->p;
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	617b      	str	r3, [r7, #20]
			  pbuf_chain(ptr,p);
 8001470:	6879      	ldr	r1, [r7, #4]
 8001472:	6978      	ldr	r0, [r7, #20]
 8001474:	f005 f896 	bl	80065a4 <pbuf_chain>
		}
		ret_err = ERR_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	77fb      	strb	r3, [r7, #31]
 800147c:	e00d      	b.n	800149a <tcp_echoserver_recv+0x2be>
  }
  
  /* data received when connection already closed */
  else  {
		/* Acknowledge data reception */
		tcp_recved(tpcb, p->tot_len);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	891b      	ldrh	r3, [r3, #8]
 8001482:	4619      	mov	r1, r3
 8001484:	68b8      	ldr	r0, [r7, #8]
 8001486:	f005 ff79 	bl	800737c <tcp_recved>
		
		/* free pbuf and do nothing */
		es->p = NULL;
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
		pbuf_free(p);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f004 ff6f 	bl	8006374 <pbuf_free>
		ret_err = ERR_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 800149a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3720      	adds	r7, #32
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	08010a60 	.word	0x08010a60
 80014ac:	08010a80 	.word	0x08010a80
 80014b0:	08010a8c 	.word	0x08010a8c
 80014b4:	08001579 	.word	0x08001579
 80014b8:	08010ab4 	.word	0x08010ab4
 80014bc:	08010ab8 	.word	0x08010ab8
 80014c0:	08010abc 	.word	0x08010abc
 80014c4:	08010ac0 	.word	0x08010ac0
 80014c8:	08010ac4 	.word	0x08010ac4
 80014cc:	08010ac8 	.word	0x08010ac8
 80014d0:	08010acc 	.word	0x08010acc
 80014d4:	08010ad0 	.word	0x08010ad0
 80014d8:	2000009c 	.word	0x2000009c

080014dc <tcp_echoserver_send>:
  * retval None
  */
// -------------------------------------------------------------------------------

static void tcp_echoserver_send(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 80014e6:	2300      	movs	r3, #0
 80014e8:	75fb      	strb	r3, [r7, #23]
 
  while ((wr_err == ERR_OK) &&
 80014ea:	e031      	b.n	8001550 <tcp_echoserver_send+0x74>
         (es->p != NULL) && 
         (es->p->len <= tcp_sndbuf(tpcb)))
  {
    
    /* get pointer on pbuf from es structure */
    ptr = es->p;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	6859      	ldr	r1, [r3, #4]
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	895a      	ldrh	r2, [r3, #10]
 80014fa:	2301      	movs	r3, #1
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f009 fd59 	bl	800afb4 <tcp_write>
 8001502:	4603      	mov	r3, r0
 8001504:	75fb      	strb	r3, [r7, #23]
    
    if (wr_err == ERR_OK)
 8001506:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d118      	bne.n	8001540 <tcp_echoserver_send+0x64>
    {
      u16_t plen;

      plen = ptr->len;
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	895b      	ldrh	r3, [r3, #10]
 8001512:	81fb      	strh	r3, [r7, #14]
     
      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	609a      	str	r2, [r3, #8]
      
      if(es->p != NULL)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d004      	beq.n	800152e <tcp_echoserver_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	4618      	mov	r0, r3
 800152a:	f004 ffc3 	bl	80064b4 <pbuf_ref>
      }
      
      /* free pbuf: will free pbufs up to es->p (because es->p has a reference count > 0) */
      pbuf_free(ptr);
 800152e:	6938      	ldr	r0, [r7, #16]
 8001530:	f004 ff20 	bl	8006374 <pbuf_free>

      /* Update tcp window size to be advertized : should be called when received
      data (with the amount plen) has been processed by the application layer */
      tcp_recved(tpcb, plen);
 8001534:	89fb      	ldrh	r3, [r7, #14]
 8001536:	4619      	mov	r1, r3
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f005 ff1f 	bl	800737c <tcp_recved>
 800153e:	e007      	b.n	8001550 <tcp_echoserver_send+0x74>
   }
   else if(wr_err == ERR_MEM)
 8001540:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001548:	d102      	bne.n	8001550 <tcp_echoserver_send+0x74>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8001550:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d10b      	bne.n	8001570 <tcp_echoserver_send+0x94>
         (es->p != NULL) && 
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 800155c:	2b00      	cmp	r3, #0
 800155e:	d007      	beq.n	8001570 <tcp_echoserver_send+0x94>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	895a      	ldrh	r2, [r3, #10]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) && 
 800156c:	429a      	cmp	r2, r3
 800156e:	d9bd      	bls.n	80014ec <tcp_echoserver_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8001570:	bf00      	nop
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <tcp_echoserver_sent>:
  * retval 	err_t		: returned error code
  */
// -------------------------------------------------------------------------

static err_t tcp_echoserver_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	4613      	mov	r3, r2
 8001584:	80fb      	strh	r3, [r7, #6]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_echoserver_struct *)arg;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	617b      	str	r3, [r7, #20]
  
  if(es->p != NULL)
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d004      	beq.n	800159c <tcp_echoserver_sent+0x24>
  {
    /* still got pbufs to send */
    tcp_echoserver_send(tpcb, es);
 8001592:	6979      	ldr	r1, [r7, #20]
 8001594:	68b8      	ldr	r0, [r7, #8]
 8001596:	f7ff ffa1 	bl	80014dc <tcp_echoserver_send>
 800159a:	e007      	b.n	80015ac <tcp_echoserver_sent+0x34>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b03      	cmp	r3, #3
 80015a2:	d103      	bne.n	80015ac <tcp_echoserver_sent+0x34>
      tcp_echoserver_connection_close(tpcb, es);
 80015a4:	6979      	ldr	r1, [r7, #20]
 80015a6:	68b8      	ldr	r0, [r7, #8]
 80015a8:	f000 f82e 	bl	8001608 <tcp_echoserver_connection_close>
  }
  return ERR_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <tcp_echoserver_poll>:
  * retval 		err_t	: error code
  */
// ------------------------------------------------------------

static err_t tcp_echoserver_poll(void *arg, struct tcp_pcb *tpcb)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b084      	sub	sp, #16
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
 80015be:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_echoserver_struct *es;

  es = (struct tcp_echoserver_struct *)arg;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	60bb      	str	r3, [r7, #8]
  
	if (es != NULL)  {
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d013      	beq.n	80015f2 <tcp_echoserver_poll+0x3c>
		if (es->p != NULL)    {
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d004      	beq.n	80015dc <tcp_echoserver_poll+0x26>
			  /* there is a remaining pbuf (chain) , try to send data */
			  tcp_echoserver_send(tpcb, es);
 80015d2:	68b9      	ldr	r1, [r7, #8]
 80015d4:	6838      	ldr	r0, [r7, #0]
 80015d6:	f7ff ff81 	bl	80014dc <tcp_echoserver_send>
 80015da:	e007      	b.n	80015ec <tcp_echoserver_poll+0x36>
		}
		else  {
			  /* no remaining pbuf (chain)  */
			  if(es->state == ES_CLOSING)  {
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b03      	cmp	r3, #3
 80015e2:	d103      	bne.n	80015ec <tcp_echoserver_poll+0x36>
					/*  close tcp connection */
					tcp_echoserver_connection_close(tpcb, es);
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	6838      	ldr	r0, [r7, #0]
 80015e8:	f000 f80e 	bl	8001608 <tcp_echoserver_connection_close>
			  }
		}
		ret_err = ERR_OK;
 80015ec:	2300      	movs	r3, #0
 80015ee:	73fb      	strb	r3, [r7, #15]
 80015f0:	e004      	b.n	80015fc <tcp_echoserver_poll+0x46>
  }
  
  else  {
		/* nothing to be done */
		tcp_abort(tpcb);
 80015f2:	6838      	ldr	r0, [r7, #0]
 80015f4:	f005 fce8 	bl	8006fc8 <tcp_abort>
		ret_err = ERR_ABRT;
 80015f8:	23f3      	movs	r3, #243	; 0xf3
 80015fa:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 80015fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
  
}
 8001600:	4618      	mov	r0, r3
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <tcp_echoserver_connection_close>:
  * retval 	None
  */
// -------------------------------------------------------------------------------

static void tcp_echoserver_connection_close(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  
  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8001612:	2100      	movs	r1, #0
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f006 fd8f 	bl	8008138 <tcp_arg>
  tcp_sent(tpcb, NULL);
 800161a:	2100      	movs	r1, #0
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f006 fdbf 	bl	80081a0 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8001622:	2100      	movs	r1, #0
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f006 fd99 	bl	800815c <tcp_recv>
  tcp_err(tpcb, NULL);
 800162a:	2100      	movs	r1, #0
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f006 fdd9 	bl	80081e4 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f006 fe0e 	bl	8008258 <tcp_poll>
  
  /* delete es structure */
  if (es != NULL)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d002      	beq.n	8001648 <tcp_echoserver_connection_close+0x40>
  {
    mem_free(es);
 8001642:	6838      	ldr	r0, [r7, #0]
 8001644:	f003 fd64 	bl	8005110 <mem_free>
  }  
  
  /* close tcp connection */
  tcp_close(tpcb);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f005 fbd3 	bl	8006df4 <tcp_close>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <tcp_echoserver_error>:
  * retval 	None
  */
// -------------------------------------------------------------------------------

static void tcp_echoserver_error(void *arg, err_t err)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b084      	sub	sp, #16
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	460b      	mov	r3, r1
 8001660:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_echoserver_struct *)arg;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d002      	beq.n	8001672 <tcp_echoserver_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f003 fd4f 	bl	8005110 <mem_free>
  }
}
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <message_send>:
//  -- <12>   Nucleo-F429 보드(Server)에서  PC(Client)로 메시지를 전송하는 함수
//
// -------------------------------------------------------------------------

void message_send(struct tcp_pcb *tpcb2, int number)
{
 800167c:	b590      	push	{r4, r7, lr}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
		struct tcp_echoserver_struct *es2;	
	
		es2 = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 8001686:	200c      	movs	r0, #12
 8001688:	f003 fea8 	bl	80053dc <mem_malloc>
 800168c:	60f8      	str	r0, [r7, #12]
		tpcb_this = tpcb2;
 800168e:	4a9c      	ldr	r2, [pc, #624]	; (8001900 <message_send+0x284>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	3b01      	subs	r3, #1
 8001698:	2b62      	cmp	r3, #98	; 0x62
 800169a:	f200 810a 	bhi.w	80018b2 <message_send+0x236>
 800169e:	a201      	add	r2, pc, #4	; (adr r2, 80016a4 <message_send+0x28>)
 80016a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a4:	08001831 	.word	0x08001831
 80016a8:	0800183b 	.word	0x0800183b
 80016ac:	08001845 	.word	0x08001845
 80016b0:	0800184f 	.word	0x0800184f
 80016b4:	080018b3 	.word	0x080018b3
 80016b8:	080018b3 	.word	0x080018b3
 80016bc:	080018b3 	.word	0x080018b3
 80016c0:	080018b3 	.word	0x080018b3
 80016c4:	080018b3 	.word	0x080018b3
 80016c8:	08001859 	.word	0x08001859
 80016cc:	08001863 	.word	0x08001863
 80016d0:	080018b3 	.word	0x080018b3
 80016d4:	080018b3 	.word	0x080018b3
 80016d8:	080018b3 	.word	0x080018b3
 80016dc:	080018b3 	.word	0x080018b3
 80016e0:	080018b3 	.word	0x080018b3
 80016e4:	080018b3 	.word	0x080018b3
 80016e8:	080018b3 	.word	0x080018b3
 80016ec:	080018b3 	.word	0x080018b3
 80016f0:	0800186d 	.word	0x0800186d
 80016f4:	08001877 	.word	0x08001877
 80016f8:	080018b3 	.word	0x080018b3
 80016fc:	080018b3 	.word	0x080018b3
 8001700:	080018b3 	.word	0x080018b3
 8001704:	080018b3 	.word	0x080018b3
 8001708:	080018b3 	.word	0x080018b3
 800170c:	080018b3 	.word	0x080018b3
 8001710:	080018b3 	.word	0x080018b3
 8001714:	080018b3 	.word	0x080018b3
 8001718:	08001881 	.word	0x08001881
 800171c:	0800188b 	.word	0x0800188b
 8001720:	080018b3 	.word	0x080018b3
 8001724:	080018b3 	.word	0x080018b3
 8001728:	080018b3 	.word	0x080018b3
 800172c:	080018b3 	.word	0x080018b3
 8001730:	080018b3 	.word	0x080018b3
 8001734:	080018b3 	.word	0x080018b3
 8001738:	080018b3 	.word	0x080018b3
 800173c:	080018b3 	.word	0x080018b3
 8001740:	08001895 	.word	0x08001895
 8001744:	0800189f 	.word	0x0800189f
 8001748:	080018b3 	.word	0x080018b3
 800174c:	080018b3 	.word	0x080018b3
 8001750:	080018b3 	.word	0x080018b3
 8001754:	080018b3 	.word	0x080018b3
 8001758:	080018b3 	.word	0x080018b3
 800175c:	080018b3 	.word	0x080018b3
 8001760:	080018b3 	.word	0x080018b3
 8001764:	080018b3 	.word	0x080018b3
 8001768:	080018b3 	.word	0x080018b3
 800176c:	080018b3 	.word	0x080018b3
 8001770:	080018b3 	.word	0x080018b3
 8001774:	080018b3 	.word	0x080018b3
 8001778:	080018b3 	.word	0x080018b3
 800177c:	080018b3 	.word	0x080018b3
 8001780:	080018b3 	.word	0x080018b3
 8001784:	080018b3 	.word	0x080018b3
 8001788:	080018b3 	.word	0x080018b3
 800178c:	080018b3 	.word	0x080018b3
 8001790:	080018b3 	.word	0x080018b3
 8001794:	080018b3 	.word	0x080018b3
 8001798:	080018b3 	.word	0x080018b3
 800179c:	080018b3 	.word	0x080018b3
 80017a0:	080018b3 	.word	0x080018b3
 80017a4:	080018b3 	.word	0x080018b3
 80017a8:	080018b3 	.word	0x080018b3
 80017ac:	080018b3 	.word	0x080018b3
 80017b0:	080018b3 	.word	0x080018b3
 80017b4:	080018b3 	.word	0x080018b3
 80017b8:	080018b3 	.word	0x080018b3
 80017bc:	080018b3 	.word	0x080018b3
 80017c0:	080018b3 	.word	0x080018b3
 80017c4:	080018b3 	.word	0x080018b3
 80017c8:	080018b3 	.word	0x080018b3
 80017cc:	080018b3 	.word	0x080018b3
 80017d0:	080018b3 	.word	0x080018b3
 80017d4:	080018b3 	.word	0x080018b3
 80017d8:	080018b3 	.word	0x080018b3
 80017dc:	080018b3 	.word	0x080018b3
 80017e0:	080018b3 	.word	0x080018b3
 80017e4:	080018b3 	.word	0x080018b3
 80017e8:	080018b3 	.word	0x080018b3
 80017ec:	080018b3 	.word	0x080018b3
 80017f0:	080018b3 	.word	0x080018b3
 80017f4:	080018b3 	.word	0x080018b3
 80017f8:	080018b3 	.word	0x080018b3
 80017fc:	080018b3 	.word	0x080018b3
 8001800:	080018b3 	.word	0x080018b3
 8001804:	080018b3 	.word	0x080018b3
 8001808:	080018b3 	.word	0x080018b3
 800180c:	080018b3 	.word	0x080018b3
 8001810:	080018b3 	.word	0x080018b3
 8001814:	080018b3 	.word	0x080018b3
 8001818:	080018b3 	.word	0x080018b3
 800181c:	080018b3 	.word	0x080018b3
 8001820:	080018b3 	.word	0x080018b3
 8001824:	080018b3 	.word	0x080018b3
 8001828:	080018b3 	.word	0x080018b3
 800182c:	080018a9 	.word	0x080018a9
		
		switch(number) {
				// --  <12-1> number의 값에 따라 대응되는 메시지를 data에 저장.
				case 1 :	sprintf((char*)data, " Go Go Left!!! ");
 8001830:	4934      	ldr	r1, [pc, #208]	; (8001904 <message_send+0x288>)
 8001832:	4835      	ldr	r0, [pc, #212]	; (8001908 <message_send+0x28c>)
 8001834:	f00d ff9c 	bl	800f770 <siprintf>
								break;
 8001838:	e03b      	b.n	80018b2 <message_send+0x236>
				case 2 :	sprintf((char*)data, " Go Go Right!!! ");
 800183a:	4934      	ldr	r1, [pc, #208]	; (800190c <message_send+0x290>)
 800183c:	4832      	ldr	r0, [pc, #200]	; (8001908 <message_send+0x28c>)
 800183e:	f00d ff97 	bl	800f770 <siprintf>
								break;
 8001842:	e036      	b.n	80018b2 <message_send+0x236>
				case 3 :	sprintf((char*)data, " Go Go Foward!!! ");
 8001844:	4932      	ldr	r1, [pc, #200]	; (8001910 <message_send+0x294>)
 8001846:	4830      	ldr	r0, [pc, #192]	; (8001908 <message_send+0x28c>)
 8001848:	f00d ff92 	bl	800f770 <siprintf>
								break;
 800184c:	e031      	b.n	80018b2 <message_send+0x236>
				case 4 :	sprintf((char*)data, " Go Go Back!!! ");
 800184e:	4931      	ldr	r1, [pc, #196]	; (8001914 <message_send+0x298>)
 8001850:	482d      	ldr	r0, [pc, #180]	; (8001908 <message_send+0x28c>)
 8001852:	f00d ff8d 	bl	800f770 <siprintf>
								break;
 8001856:	e02c      	b.n	80018b2 <message_send+0x236>
				case 10 :	sprintf((char*)data, " Box1 is Open!! ");
 8001858:	492f      	ldr	r1, [pc, #188]	; (8001918 <message_send+0x29c>)
 800185a:	482b      	ldr	r0, [pc, #172]	; (8001908 <message_send+0x28c>)
 800185c:	f00d ff88 	bl	800f770 <siprintf>
								break;
 8001860:	e027      	b.n	80018b2 <message_send+0x236>
				case 11 :	sprintf((char*)data, " Box2 is Open!! ");
 8001862:	492e      	ldr	r1, [pc, #184]	; (800191c <message_send+0x2a0>)
 8001864:	4828      	ldr	r0, [pc, #160]	; (8001908 <message_send+0x28c>)
 8001866:	f00d ff83 	bl	800f770 <siprintf>
								break;
 800186a:	e022      	b.n	80018b2 <message_send+0x236>
				case 20 :	sprintf((char*)data, " Box3 is Open!! ");
 800186c:	492c      	ldr	r1, [pc, #176]	; (8001920 <message_send+0x2a4>)
 800186e:	4826      	ldr	r0, [pc, #152]	; (8001908 <message_send+0x28c>)
 8001870:	f00d ff7e 	bl	800f770 <siprintf>
								break;
 8001874:	e01d      	b.n	80018b2 <message_send+0x236>
				case 21 :	sprintf((char*)data, " Go Go Left!!! ");
 8001876:	4923      	ldr	r1, [pc, #140]	; (8001904 <message_send+0x288>)
 8001878:	4823      	ldr	r0, [pc, #140]	; (8001908 <message_send+0x28c>)
 800187a:	f00d ff79 	bl	800f770 <siprintf>
								break;
 800187e:	e018      	b.n	80018b2 <message_send+0x236>
				case 30 :	sprintf((char*)data, " Go Go Right!!! ");
 8001880:	4922      	ldr	r1, [pc, #136]	; (800190c <message_send+0x290>)
 8001882:	4821      	ldr	r0, [pc, #132]	; (8001908 <message_send+0x28c>)
 8001884:	f00d ff74 	bl	800f770 <siprintf>
								break;
 8001888:	e013      	b.n	80018b2 <message_send+0x236>
				case 31 :	sprintf((char*)data, " Go Go Foward!!! ");
 800188a:	4921      	ldr	r1, [pc, #132]	; (8001910 <message_send+0x294>)
 800188c:	481e      	ldr	r0, [pc, #120]	; (8001908 <message_send+0x28c>)
 800188e:	f00d ff6f 	bl	800f770 <siprintf>
								break;
 8001892:	e00e      	b.n	80018b2 <message_send+0x236>
				case 40 :	sprintf((char*)data, " Go Go Back!!! ");
 8001894:	491f      	ldr	r1, [pc, #124]	; (8001914 <message_send+0x298>)
 8001896:	481c      	ldr	r0, [pc, #112]	; (8001908 <message_send+0x28c>)
 8001898:	f00d ff6a 	bl	800f770 <siprintf>
								break;
 800189c:	e009      	b.n	80018b2 <message_send+0x236>
				case 41 :	sprintf((char*)data, " Camera is ON!!! ");
 800189e:	4921      	ldr	r1, [pc, #132]	; (8001924 <message_send+0x2a8>)
 80018a0:	4819      	ldr	r0, [pc, #100]	; (8001908 <message_send+0x28c>)
 80018a2:	f00d ff65 	bl	800f770 <siprintf>
								break;
 80018a6:	e004      	b.n	80018b2 <message_send+0x236>
				case 99 :	sprintf((char*)data, " Connected ! ");
 80018a8:	491f      	ldr	r1, [pc, #124]	; (8001928 <message_send+0x2ac>)
 80018aa:	4817      	ldr	r0, [pc, #92]	; (8001908 <message_send+0x28c>)
 80018ac:	f00d ff60 	bl	800f770 <siprintf>
								break;								
 80018b0:	bf00      	nop
		}

		//--<12-2> 데이터를 보냄 : - server의 message_send() 와 비슷한 방법을 사용
		// 송신할 데이터를 es->p_tx (pbuf)에 넣는다	 (allocate pbuf )

		es2->p = pbuf_alloc(PBUF_TRANSPORT, strlen((char*)data) , PBUF_POOL);
 80018b2:	4815      	ldr	r0, [pc, #84]	; (8001908 <message_send+0x28c>)
 80018b4:	f7fe fca6 	bl	8000204 <strlen>
 80018b8:	4603      	mov	r3, r0
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80018c0:	4619      	mov	r1, r3
 80018c2:	2036      	movs	r0, #54	; 0x36
 80018c4:	f004 fa72 	bl	8005dac <pbuf_alloc>
 80018c8:	4602      	mov	r2, r0
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	609a      	str	r2, [r3, #8]
		
		if (es2->p) {
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00f      	beq.n	80018f6 <message_send+0x27a>
					// copy data to pbuf 
					pbuf_take(es2->p, (char*)data, strlen((char*)data));
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	689c      	ldr	r4, [r3, #8]
 80018da:	480b      	ldr	r0, [pc, #44]	; (8001908 <message_send+0x28c>)
 80018dc:	f7fe fc92 	bl	8000204 <strlen>
 80018e0:	4603      	mov	r3, r0
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	461a      	mov	r2, r3
 80018e6:	4908      	ldr	r1, [pc, #32]	; (8001908 <message_send+0x28c>)
 80018e8:	4620      	mov	r0, r4
 80018ea:	f004 ffaf 	bl	800684c <pbuf_take>
					// send data 
					tcp_echoserver_send(tpcb2, es2);
 80018ee:	68f9      	ldr	r1, [r7, #12]
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff fdf3 	bl	80014dc <tcp_echoserver_send>
		}

}
 80018f6:	bf00      	nop
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd90      	pop	{r4, r7, pc}
 80018fe:	bf00      	nop
 8001900:	2000009c 	.word	0x2000009c
 8001904:	08010ad4 	.word	0x08010ad4
 8001908:	2000028c 	.word	0x2000028c
 800190c:	08010ae4 	.word	0x08010ae4
 8001910:	08010af8 	.word	0x08010af8
 8001914:	08010b0c 	.word	0x08010b0c
 8001918:	08010b1c 	.word	0x08010b1c
 800191c:	08010b30 	.word	0x08010b30
 8001920:	08010b44 	.word	0x08010b44
 8001924:	08010b58 	.word	0x08010b58
 8001928:	08010b6c 	.word	0x08010b6c

0800192c <HAL_GPIO_EXTI_Callback>:
// -- <13> GPIO의 EXTI 가 발생하면 (즉, SW가 눌러지면) 호출되는 callback 함수
//
// ------------------------------------------------------------------------

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	80fb      	strh	r3, [r7, #6]

  // -- <13-1> 눌러지는 SW 값에 따라 message_send( ) 함수를 호출함
  if (GPIO_Pin == SW1)  {
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d107      	bne.n	800194c <HAL_GPIO_EXTI_Callback+0x20>
	  sw_Left();
 800193c:	f7ff f982 	bl	8000c44 <sw_Left>
	  message_send(tpcb_this, 1);
 8001940:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <HAL_GPIO_EXTI_Callback+0x80>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2101      	movs	r1, #1
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff fe98 	bl	800167c <message_send>
  }
  if (GPIO_Pin == SW2)  {
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d107      	bne.n	8001962 <HAL_GPIO_EXTI_Callback+0x36>
	  	sw_Right();
 8001952:	f7ff f98b 	bl	8000c6c <sw_Right>
		message_send(tpcb_this, 2);
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <HAL_GPIO_EXTI_Callback+0x80>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2102      	movs	r1, #2
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fe8d 	bl	800167c <message_send>
  }
  if (GPIO_Pin == SW3)  {
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	2b04      	cmp	r3, #4
 8001966:	d107      	bne.n	8001978 <HAL_GPIO_EXTI_Callback+0x4c>
	    sw_Foward();
 8001968:	f7ff f994 	bl	8000c94 <sw_Foward>
		message_send(tpcb_this, 3);
 800196c:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <HAL_GPIO_EXTI_Callback+0x80>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2103      	movs	r1, #3
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fe82 	bl	800167c <message_send>
  }
  if (GPIO_Pin == SW4)  {
 8001978:	88fb      	ldrh	r3, [r7, #6]
 800197a:	2b08      	cmp	r3, #8
 800197c:	d107      	bne.n	800198e <HAL_GPIO_EXTI_Callback+0x62>
	    sw_Back();
 800197e:	f7ff f99d 	bl	8000cbc <sw_Back>
		message_send(tpcb_this, 4);
 8001982:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <HAL_GPIO_EXTI_Callback+0x80>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2104      	movs	r1, #4
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fe77 	bl	800167c <message_send>
  }
  // -- <13-2> SW의 chattering 현상을 방지하기 위해 시간지연을 준다
  for (int i=0; i<=100000; i++) ;
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	e002      	b.n	800199a <HAL_GPIO_EXTI_Callback+0x6e>
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	3301      	adds	r3, #1
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4a04      	ldr	r2, [pc, #16]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x84>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	ddf8      	ble.n	8001994 <HAL_GPIO_EXTI_Callback+0x68>
 
}
 80019a2:	bf00      	nop
 80019a4:	bf00      	nop
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	2000009c 	.word	0x2000009c
 80019b0:	000186a0 	.word	0x000186a0

080019b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80019b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019ec <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019ba:	e003      	b.n	80019c4 <LoopCopyDataInit>

080019bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019c2:	3104      	adds	r1, #4

080019c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019c4:	480b      	ldr	r0, [pc, #44]	; (80019f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019c6:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019cc:	d3f6      	bcc.n	80019bc <CopyDataInit>
  ldr  r2, =_sbss
 80019ce:	4a0b      	ldr	r2, [pc, #44]	; (80019fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019d0:	e002      	b.n	80019d8 <LoopFillZerobss>

080019d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019d4:	f842 3b04 	str.w	r3, [r2], #4

080019d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019dc:	d3f9      	bcc.n	80019d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019de:	f7ff fb61 	bl	80010a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019e2:	f00d fe0b 	bl	800f5fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019e6:	f7fe fde7 	bl	80005b8 <main>
  bx  lr    
 80019ea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80019ec:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80019f0:	080137ac 	.word	0x080137ac
  ldr  r0, =_sdata
 80019f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019f8:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 80019fc:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8001a00:	20006964 	.word	0x20006964

08001a04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a04:	e7fe      	b.n	8001a04 <ADC_IRQHandler>
	...

08001a08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a0c:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <HAL_Init+0x40>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a0d      	ldr	r2, [pc, #52]	; (8001a48 <HAL_Init+0x40>)
 8001a12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HAL_Init+0x40>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <HAL_Init+0x40>)
 8001a1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <HAL_Init+0x40>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a07      	ldr	r2, [pc, #28]	; (8001a48 <HAL_Init+0x40>)
 8001a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a30:	2003      	movs	r0, #3
 8001a32:	f000 f94f 	bl	8001cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a36:	2000      	movs	r0, #0
 8001a38:	f000 f808 	bl	8001a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a3c:	f7ff f978 	bl	8000d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40023c00 	.word	0x40023c00

08001a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_InitTick+0x54>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_InitTick+0x58>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 f967 	bl	8001d3e <HAL_SYSTICK_Config>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e00e      	b.n	8001a98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b0f      	cmp	r3, #15
 8001a7e:	d80a      	bhi.n	8001a96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a80:	2200      	movs	r2, #0
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	f04f 30ff 	mov.w	r0, #4294967295
 8001a88:	f000 f92f 	bl	8001cea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a8c:	4a06      	ldr	r2, [pc, #24]	; (8001aa8 <HAL_InitTick+0x5c>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	e000      	b.n	8001a98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000000 	.word	0x20000000
 8001aa4:	20000008 	.word	0x20000008
 8001aa8:	20000004 	.word	0x20000004

08001aac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_IncTick+0x20>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_IncTick+0x24>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4413      	add	r3, r2
 8001abc:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <HAL_IncTick+0x24>)
 8001abe:	6013      	str	r3, [r2, #0]
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	20000008 	.word	0x20000008
 8001ad0:	200002f0 	.word	0x200002f0

08001ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad8:	4b03      	ldr	r3, [pc, #12]	; (8001ae8 <HAL_GetTick+0x14>)
 8001ada:	681b      	ldr	r3, [r3, #0]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	200002f0 	.word	0x200002f0

08001aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af4:	f7ff ffee 	bl	8001ad4 <HAL_GetTick>
 8001af8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b04:	d005      	beq.n	8001b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <HAL_Delay+0x44>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4413      	add	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b12:	bf00      	nop
 8001b14:	f7ff ffde 	bl	8001ad4 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d8f7      	bhi.n	8001b14 <HAL_Delay+0x28>
  {
  }
}
 8001b24:	bf00      	nop
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000008 	.word	0x20000008

08001b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <__NVIC_SetPriorityGrouping+0x44>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b50:	4013      	ands	r3, r2
 8001b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b66:	4a04      	ldr	r2, [pc, #16]	; (8001b78 <__NVIC_SetPriorityGrouping+0x44>)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	60d3      	str	r3, [r2, #12]
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b80:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <__NVIC_GetPriorityGrouping+0x18>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	0a1b      	lsrs	r3, r3, #8
 8001b86:	f003 0307 	and.w	r3, r3, #7
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	db0b      	blt.n	8001bc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	f003 021f 	and.w	r2, r3, #31
 8001bb0:	4907      	ldr	r1, [pc, #28]	; (8001bd0 <__NVIC_EnableIRQ+0x38>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	095b      	lsrs	r3, r3, #5
 8001bb8:	2001      	movs	r0, #1
 8001bba:	fa00 f202 	lsl.w	r2, r0, r2
 8001bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	e000e100 	.word	0xe000e100

08001bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	6039      	str	r1, [r7, #0]
 8001bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	db0a      	blt.n	8001bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	490c      	ldr	r1, [pc, #48]	; (8001c20 <__NVIC_SetPriority+0x4c>)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	0112      	lsls	r2, r2, #4
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bfc:	e00a      	b.n	8001c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	4908      	ldr	r1, [pc, #32]	; (8001c24 <__NVIC_SetPriority+0x50>)
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	3b04      	subs	r3, #4
 8001c0c:	0112      	lsls	r2, r2, #4
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	440b      	add	r3, r1
 8001c12:	761a      	strb	r2, [r3, #24]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	e000e100 	.word	0xe000e100
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b089      	sub	sp, #36	; 0x24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f1c3 0307 	rsb	r3, r3, #7
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	bf28      	it	cs
 8001c46:	2304      	movcs	r3, #4
 8001c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	2b06      	cmp	r3, #6
 8001c50:	d902      	bls.n	8001c58 <NVIC_EncodePriority+0x30>
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3b03      	subs	r3, #3
 8001c56:	e000      	b.n	8001c5a <NVIC_EncodePriority+0x32>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43da      	mvns	r2, r3
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	401a      	ands	r2, r3
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c70:	f04f 31ff 	mov.w	r1, #4294967295
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7a:	43d9      	mvns	r1, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c80:	4313      	orrs	r3, r2
         );
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3724      	adds	r7, #36	; 0x24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
	...

08001c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ca0:	d301      	bcc.n	8001ca6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e00f      	b.n	8001cc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ca6:	4a0a      	ldr	r2, [pc, #40]	; (8001cd0 <SysTick_Config+0x40>)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cae:	210f      	movs	r1, #15
 8001cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb4:	f7ff ff8e 	bl	8001bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cb8:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <SysTick_Config+0x40>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cbe:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <SysTick_Config+0x40>)
 8001cc0:	2207      	movs	r2, #7
 8001cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	e000e010 	.word	0xe000e010

08001cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff ff29 	bl	8001b34 <__NVIC_SetPriorityGrouping>
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b086      	sub	sp, #24
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]
 8001cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cfc:	f7ff ff3e 	bl	8001b7c <__NVIC_GetPriorityGrouping>
 8001d00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	68b9      	ldr	r1, [r7, #8]
 8001d06:	6978      	ldr	r0, [r7, #20]
 8001d08:	f7ff ff8e 	bl	8001c28 <NVIC_EncodePriority>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d12:	4611      	mov	r1, r2
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff5d 	bl	8001bd4 <__NVIC_SetPriority>
}
 8001d1a:	bf00      	nop
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	4603      	mov	r3, r0
 8001d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff ff31 	bl	8001b98 <__NVIC_EnableIRQ>
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff ffa2 	bl	8001c90 <SysTick_Config>
 8001d4c:	4603      	mov	r3, r0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	61fb      	str	r3, [r7, #28]
 8001d64:	2300      	movs	r3, #0
 8001d66:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001d68:	4baa      	ldr	r3, [pc, #680]	; (8002014 <HAL_ETH_Init+0x2bc>)
 8001d6a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001d70:	2300      	movs	r3, #0
 8001d72:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e183      	b.n	8002086 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d106      	bne.n	8001d98 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f002 fca0 	bl	80046d8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	4b9e      	ldr	r3, [pc, #632]	; (8002018 <HAL_ETH_Init+0x2c0>)
 8001d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da0:	4a9d      	ldr	r2, [pc, #628]	; (8002018 <HAL_ETH_Init+0x2c0>)
 8001da2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da6:	6453      	str	r3, [r2, #68]	; 0x44
 8001da8:	4b9b      	ldr	r3, [pc, #620]	; (8002018 <HAL_ETH_Init+0x2c0>)
 8001daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001db4:	4b99      	ldr	r3, [pc, #612]	; (800201c <HAL_ETH_Init+0x2c4>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	4a98      	ldr	r2, [pc, #608]	; (800201c <HAL_ETH_Init+0x2c4>)
 8001dba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001dbe:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001dc0:	4b96      	ldr	r3, [pc, #600]	; (800201c <HAL_ETH_Init+0x2c4>)
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	4994      	ldr	r1, [pc, #592]	; (800201c <HAL_ETH_Init+0x2c4>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f042 0201 	orr.w	r2, r2, #1
 8001de0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001de6:	f7ff fe75 	bl	8001ad4 <HAL_GetTick>
 8001dea:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001dec:	e011      	b.n	8001e12 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001dee:	f7ff fe71 	bl	8001ad4 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001dfc:	d909      	bls.n	8001e12 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2203      	movs	r2, #3
 8001e02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e139      	b.n	8002086 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1e4      	bne.n	8001dee <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f023 031c 	bic.w	r3, r3, #28
 8001e32:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001e34:	f001 fee4 	bl	8003c00 <HAL_RCC_GetHCLKFreq>
 8001e38:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	4a78      	ldr	r2, [pc, #480]	; (8002020 <HAL_ETH_Init+0x2c8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d908      	bls.n	8001e54 <HAL_ETH_Init+0xfc>
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	4a77      	ldr	r2, [pc, #476]	; (8002024 <HAL_ETH_Init+0x2cc>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d804      	bhi.n	8001e54 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	f043 0308 	orr.w	r3, r3, #8
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	e027      	b.n	8001ea4 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	4a73      	ldr	r2, [pc, #460]	; (8002024 <HAL_ETH_Init+0x2cc>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d908      	bls.n	8001e6e <HAL_ETH_Init+0x116>
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	4a6d      	ldr	r2, [pc, #436]	; (8002014 <HAL_ETH_Init+0x2bc>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d204      	bcs.n	8001e6e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f043 030c 	orr.w	r3, r3, #12
 8001e6a:	61fb      	str	r3, [r7, #28]
 8001e6c:	e01a      	b.n	8001ea4 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	4a68      	ldr	r2, [pc, #416]	; (8002014 <HAL_ETH_Init+0x2bc>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d303      	bcc.n	8001e7e <HAL_ETH_Init+0x126>
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	4a6b      	ldr	r2, [pc, #428]	; (8002028 <HAL_ETH_Init+0x2d0>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d911      	bls.n	8001ea2 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	4a69      	ldr	r2, [pc, #420]	; (8002028 <HAL_ETH_Init+0x2d0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d908      	bls.n	8001e98 <HAL_ETH_Init+0x140>
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	4a68      	ldr	r2, [pc, #416]	; (800202c <HAL_ETH_Init+0x2d4>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d804      	bhi.n	8001e98 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	f043 0304 	orr.w	r3, r3, #4
 8001e94:	61fb      	str	r3, [r7, #28]
 8001e96:	e005      	b.n	8001ea4 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f043 0310 	orr.w	r3, r3, #16
 8001e9e:	61fb      	str	r3, [r7, #28]
 8001ea0:	e000      	b.n	8001ea4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001ea2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	69fa      	ldr	r2, [r7, #28]
 8001eaa:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001eac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 fb98 	bl	80025e8 <HAL_ETH_WritePHYRegister>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00b      	beq.n	8001ed6 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001ec2:	6939      	ldr	r1, [r7, #16]
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 fd4d 	bl	8002964 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e0d7      	b.n	8002086 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001ed6:	20ff      	movs	r0, #255	; 0xff
 8001ed8:	f7ff fe08 	bl	8001aec <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 80a5 	beq.w	8002030 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ee6:	f7ff fdf5 	bl	8001ad4 <HAL_GetTick>
 8001eea:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001eec:	f107 030c 	add.w	r3, r7, #12
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 fb0f 	bl	8002518 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001efa:	f7ff fdeb 	bl	8001ad4 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d90f      	bls.n	8001f2c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001f10:	6939      	ldr	r1, [r7, #16]
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 fd26 	bl	8002964 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e0ac      	b.n	8002086 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f003 0304 	and.w	r3, r3, #4
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0da      	beq.n	8001eec <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001f36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 fb53 	bl	80025e8 <HAL_ETH_WritePHYRegister>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00b      	beq.n	8001f60 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001f4c:	6939      	ldr	r1, [r7, #16]
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 fd08 	bl	8002964 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e092      	b.n	8002086 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f60:	f7ff fdb8 	bl	8001ad4 <HAL_GetTick>
 8001f64:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001f66:	f107 030c 	add.w	r3, r7, #12
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 fad2 	bl	8002518 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001f74:	f7ff fdae 	bl	8001ad4 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d90f      	bls.n	8001fa6 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001f8a:	6939      	ldr	r1, [r7, #16]
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 fce9 	bl	8002964 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e06f      	b.n	8002086 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f003 0320 	and.w	r3, r3, #32
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0da      	beq.n	8001f66 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001fb0:	f107 030c 	add.w	r3, r7, #12
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	211f      	movs	r1, #31
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 faad 	bl	8002518 <HAL_ETH_ReadPHYRegister>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00b      	beq.n	8001fdc <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001fc8:	6939      	ldr	r1, [r7, #16]
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 fcca 	bl	8002964 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e054      	b.n	8002086 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f003 0310 	and.w	r3, r3, #16
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d004      	beq.n	8001ff0 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	e002      	b.n	8001ff6 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	e035      	b.n	8002074 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	e030      	b.n	8002074 <HAL_ETH_Init+0x31c>
 8002012:	bf00      	nop
 8002014:	03938700 	.word	0x03938700
 8002018:	40023800 	.word	0x40023800
 800201c:	40013800 	.word	0x40013800
 8002020:	01312cff 	.word	0x01312cff
 8002024:	02160ebf 	.word	0x02160ebf
 8002028:	05f5e0ff 	.word	0x05f5e0ff
 800202c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	08db      	lsrs	r3, r3, #3
 8002036:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	085b      	lsrs	r3, r3, #1
 800203e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002040:	4313      	orrs	r3, r2
 8002042:	b29b      	uxth	r3, r3
 8002044:	461a      	mov	r2, r3
 8002046:	2100      	movs	r1, #0
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 facd 	bl	80025e8 <HAL_ETH_WritePHYRegister>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00b      	beq.n	800206c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002058:	6939      	ldr	r1, [r7, #16]
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 fc82 	bl	8002964 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e00c      	b.n	8002086 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800206c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002070:	f7ff fd3c 	bl	8001aec <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002074:	6939      	ldr	r1, [r7, #16]
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 fc74 	bl	8002964 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3720      	adds	r7, #32
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop

08002090 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002090:	b480      	push	{r7}
 8002092:	b087      	sub	sp, #28
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d101      	bne.n	80020b0 <HAL_ETH_DMATxDescListInit+0x20>
 80020ac:	2302      	movs	r3, #2
 80020ae:	e052      	b.n	8002156 <HAL_ETH_DMATxDescListInit+0xc6>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2202      	movs	r2, #2
 80020bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	e030      	b.n	800212e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	015b      	lsls	r3, r3, #5
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	4413      	add	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80020dc:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80020e4:	fb02 f303 	mul.w	r3, r2, r3
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	4413      	add	r3, r2
 80020ec:	461a      	mov	r2, r3
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d105      	bne.n	8002106 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	3b01      	subs	r3, #1
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	429a      	cmp	r2, r3
 800210e:	d208      	bcs.n	8002122 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	3301      	adds	r3, #1
 8002114:	015b      	lsls	r3, r3, #5
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	4413      	add	r3, r2
 800211a:	461a      	mov	r2, r3
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	60da      	str	r2, [r3, #12]
 8002120:	e002      	b.n	8002128 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	3301      	adds	r3, #1
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d3ca      	bcc.n	80020cc <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002140:	3310      	adds	r3, #16
 8002142:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	371c      	adds	r7, #28
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8002162:	b480      	push	{r7}
 8002164:	b087      	sub	sp, #28
 8002166:	af00      	add	r7, sp, #0
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	607a      	str	r2, [r7, #4]
 800216e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800217a:	2b01      	cmp	r3, #1
 800217c:	d101      	bne.n	8002182 <HAL_ETH_DMARxDescListInit+0x20>
 800217e:	2302      	movs	r3, #2
 8002180:	e056      	b.n	8002230 <HAL_ETH_DMARxDescListInit+0xce>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2202      	movs	r2, #2
 800218e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	e034      	b.n	8002208 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	015b      	lsls	r3, r3, #5
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	4413      	add	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80021ae:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80021b6:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80021be:	fb02 f303 	mul.w	r3, r2, r3
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	461a      	mov	r2, r3
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d105      	bne.n	80021e0 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d208      	bcs.n	80021fc <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	3301      	adds	r3, #1
 80021ee:	015b      	lsls	r3, r3, #5
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	4413      	add	r3, r2
 80021f4:	461a      	mov	r2, r3
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	60da      	str	r2, [r3, #12]
 80021fa:	e002      	b.n	8002202 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	3301      	adds	r3, #1
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	d3c6      	bcc.n	800219e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800221a:	330c      	adds	r3, #12
 800221c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	371c      	adds	r7, #28
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800223c:	b480      	push	{r7}
 800223e:	b087      	sub	sp, #28
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_ETH_TransmitFrame+0x24>
 800225c:	2302      	movs	r3, #2
 800225e:	e0cd      	b.n	80023fc <HAL_ETH_TransmitFrame+0x1c0>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2202      	movs	r2, #2
 800226c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d109      	bne.n	800228a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8002286:	2301      	movs	r3, #1
 8002288:	e0b8      	b.n	80023fc <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	da09      	bge.n	80022a8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2212      	movs	r2, #18
 8002298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e0a9      	b.n	80023fc <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d915      	bls.n	80022de <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	4a54      	ldr	r2, [pc, #336]	; (8002408 <HAL_ETH_TransmitFrame+0x1cc>)
 80022b6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ba:	0a9b      	lsrs	r3, r3, #10
 80022bc:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	4b51      	ldr	r3, [pc, #324]	; (8002408 <HAL_ETH_TransmitFrame+0x1cc>)
 80022c2:	fba3 1302 	umull	r1, r3, r3, r2
 80022c6:	0a9b      	lsrs	r3, r3, #10
 80022c8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80022cc:	fb01 f303 	mul.w	r3, r1, r3
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d005      	beq.n	80022e2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	3301      	adds	r3, #1
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	e001      	b.n	80022e2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80022de:	2301      	movs	r3, #1
 80022e0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d11c      	bne.n	8002322 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80022f6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002302:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002312:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	461a      	mov	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002320:	e04b      	b.n	80023ba <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	e044      	b.n	80023b2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002332:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002336:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d107      	bne.n	800234e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002348:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800234c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002352:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002356:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	3b01      	subs	r3, #1
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	429a      	cmp	r2, r3
 8002360:	d116      	bne.n	8002390 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002370:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	4a25      	ldr	r2, [pc, #148]	; (800240c <HAL_ETH_TransmitFrame+0x1d0>)
 8002376:	fb02 f203 	mul.w	r2, r2, r3
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	4413      	add	r3, r2
 800237e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002382:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800238e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800239e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	461a      	mov	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	3301      	adds	r3, #1
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d3b6      	bcc.n	8002328 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c2:	3314      	adds	r3, #20
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00d      	beq.n	80023ea <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d6:	3314      	adds	r3, #20
 80023d8:	2204      	movs	r2, #4
 80023da:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023e4:	3304      	adds	r3, #4
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	371c      	adds	r7, #28
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	ac02b00b 	.word	0xac02b00b
 800240c:	fffffa0c 	.word	0xfffffa0c

08002410 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002422:	2b01      	cmp	r3, #1
 8002424:	d101      	bne.n	800242a <HAL_ETH_GetReceivedFrame+0x1a>
 8002426:	2302      	movs	r3, #2
 8002428:	e070      	b.n	800250c <HAL_ETH_GetReceivedFrame+0xfc>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2202      	movs	r2, #2
 8002436:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	db5a      	blt.n	80024fa <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244e:	2b00      	cmp	r3, #0
 8002450:	d030      	beq.n	80024b4 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002460:	2b01      	cmp	r3, #1
 8002462:	d103      	bne.n	800246c <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	0c1b      	lsrs	r3, r3, #16
 800247c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002480:	3b04      	subs	r3, #4
 8002482:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	461a      	mov	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80024b0:	2300      	movs	r3, #0
 80024b2:	e02b      	b.n	800250c <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d010      	beq.n	80024e4 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	461a      	mov	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	629a      	str	r2, [r3, #40]	; 0x28
 80024e2:	e00a      	b.n	80024fa <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e8:	1c5a      	adds	r2, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	461a      	mov	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
}
 800250c:	4618      	mov	r0, r3
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	460b      	mov	r3, r1
 8002522:	607a      	str	r2, [r7, #4]
 8002524:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b82      	cmp	r3, #130	; 0x82
 8002538:	d101      	bne.n	800253e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800253a:	2302      	movs	r3, #2
 800253c:	e050      	b.n	80025e0 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2282      	movs	r2, #130	; 0x82
 8002542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f003 031c 	and.w	r3, r3, #28
 8002554:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8a1b      	ldrh	r3, [r3, #16]
 800255a:	02db      	lsls	r3, r3, #11
 800255c:	b29b      	uxth	r3, r3
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	4313      	orrs	r3, r2
 8002562:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002564:	897b      	ldrh	r3, [r7, #10]
 8002566:	019b      	lsls	r3, r3, #6
 8002568:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	4313      	orrs	r3, r2
 8002570:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f023 0302 	bic.w	r3, r3, #2
 8002578:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800258a:	f7ff faa3 	bl	8001ad4 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002590:	e015      	b.n	80025be <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002592:	f7ff fa9f 	bl	8001ad4 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a0:	d309      	bcc.n	80025b6 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e014      	b.n	80025e0 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1e4      	bne.n	8002592 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	461a      	mov	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	460b      	mov	r3, r1
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b42      	cmp	r3, #66	; 0x42
 8002608:	d101      	bne.n	800260e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800260a:	2302      	movs	r3, #2
 800260c:	e04e      	b.n	80026ac <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2242      	movs	r2, #66	; 0x42
 8002612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f003 031c 	and.w	r3, r3, #28
 8002624:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8a1b      	ldrh	r3, [r3, #16]
 800262a:	02db      	lsls	r3, r3, #11
 800262c:	b29b      	uxth	r3, r3
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	4313      	orrs	r3, r2
 8002632:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002634:	897b      	ldrh	r3, [r7, #10]
 8002636:	019b      	lsls	r3, r3, #6
 8002638:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	4313      	orrs	r3, r2
 8002640:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f043 0302 	orr.w	r3, r3, #2
 8002648:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	b29a      	uxth	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002664:	f7ff fa36 	bl	8001ad4 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800266a:	e015      	b.n	8002698 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800266c:	f7ff fa32 	bl	8001ad4 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800267a:	d309      	bcc.n	8002690 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e00d      	b.n	80026ac <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1e4      	bne.n	800266c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_ETH_Start+0x16>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e01f      	b.n	800270a <HAL_ETH_Start+0x56>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2202      	movs	r2, #2
 80026d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 fb44 	bl	8002d68 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 fb7b 	bl	8002ddc <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 fc12 	bl	8002f10 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 fbaf 	bl	8002e50 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 fbdc 	bl	8002eb0 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <HAL_ETH_Stop+0x16>
 8002724:	2302      	movs	r3, #2
 8002726:	e01f      	b.n	8002768 <HAL_ETH_Stop+0x56>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2202      	movs	r2, #2
 8002734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 fba1 	bl	8002e80 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 fbce 	bl	8002ee0 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 fb66 	bl	8002e16 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 fbe0 	bl	8002f10 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 fb26 	bl	8002da2 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002784:	2b01      	cmp	r3, #1
 8002786:	d101      	bne.n	800278c <HAL_ETH_ConfigMAC+0x1c>
 8002788:	2302      	movs	r3, #2
 800278a:	e0e4      	b.n	8002956 <HAL_ETH_ConfigMAC+0x1e6>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2202      	movs	r2, #2
 8002798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 80b1 	beq.w	8002906 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	4b6c      	ldr	r3, [pc, #432]	; (8002960 <HAL_ETH_ConfigMAC+0x1f0>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80027bc:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80027c2:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80027c8:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80027ce:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80027d4:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80027da:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80027e0:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80027e6:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80027ec:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80027f2:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80027f8:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80027fe:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	4313      	orrs	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002816:	2001      	movs	r0, #1
 8002818:	f7ff f968 	bl	8001aec <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800282c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002832:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002838:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800283e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002844:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800284a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002856:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002858:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002862:	2001      	movs	r0, #1
 8002864:	f7ff f942 	bl	8001aec <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002878:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002882:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002892:	4013      	ands	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80028a0:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80028a6:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80028ac:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80028b2:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80028b8:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4313      	orrs	r3, r2
 80028be:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80028d0:	2001      	movs	r0, #1
 80028d2:	f7ff f90b 	bl	8001aec <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80028f6:	2001      	movs	r0, #1
 80028f8:	f7ff f8f8 	bl	8001aec <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	61da      	str	r2, [r3, #28]
 8002904:	e01e      	b.n	8002944 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002914:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	4313      	orrs	r3, r2
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002936:	2001      	movs	r0, #1
 8002938:	f7ff f8d8 	bl	8001aec <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	ff20810f 	.word	0xff20810f

08002964 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b0b0      	sub	sp, #192	; 0xc0
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800296e:	2300      	movs	r3, #0
 8002970:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d007      	beq.n	800298a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002980:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002988:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800298a:	2300      	movs	r3, #0
 800298c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800298e:	2300      	movs	r3, #0
 8002990:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002992:	2300      	movs	r3, #0
 8002994:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002996:	2300      	movs	r3, #0
 8002998:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800299a:	2300      	movs	r3, #0
 800299c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800299e:	2300      	movs	r3, #0
 80029a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d103      	bne.n	80029b2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80029aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029ae:	663b      	str	r3, [r7, #96]	; 0x60
 80029b0:	e001      	b.n	80029b6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80029b2:	2300      	movs	r3, #0
 80029b4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80029b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029ba:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80029bc:	2300      	movs	r3, #0
 80029be:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80029c0:	2300      	movs	r3, #0
 80029c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80029c4:	2300      	movs	r3, #0
 80029c6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80029c8:	2300      	movs	r3, #0
 80029ca:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80029cc:	2300      	movs	r3, #0
 80029ce:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80029d0:	2340      	movs	r3, #64	; 0x40
 80029d2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80029d4:	2300      	movs	r3, #0
 80029d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80029da:	2300      	movs	r3, #0
 80029dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80029e0:	2300      	movs	r3, #0
 80029e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80029e6:	2300      	movs	r3, #0
 80029e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80029ec:	2300      	movs	r3, #0
 80029ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002a04:	2380      	movs	r3, #128	; 0x80
 8002a06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002a10:	2300      	movs	r3, #0
 8002a12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002a16:	2300      	movs	r3, #0
 8002a18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002a22:	2300      	movs	r3, #0
 8002a24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002a38:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a3c:	4bac      	ldr	r3, [pc, #688]	; (8002cf0 <ETH_MACDMAConfig+0x38c>)
 8002a3e:	4013      	ands	r3, r2
 8002a40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002a44:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002a48:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002a4c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002a50:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002a56:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002a58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002a5a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002a5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002a5e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002a64:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002a66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002a68:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002a6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002a6c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002a6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002a70:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002a74:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002a76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002a78:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002a7a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a8c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a98:	2001      	movs	r0, #1
 8002a9a:	f7ff f827 	bl	8001aec <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002aa6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002aa8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002aaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002aac:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002aae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002ab0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002ab2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002ab6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002ab8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002abc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002abe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002ac2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002ac4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002ac8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002acc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002ad4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002ad6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ae2:	2001      	movs	r0, #1
 8002ae4:	f7ff f802 	bl	8001aec <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002af0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002afa:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002b04:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002b10:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b14:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002b18:	4013      	ands	r3, r2
 8002b1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002b1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b22:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002b24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002b28:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002b2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002b2e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002b30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002b34:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002b36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002b3a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002b3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002b40:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002b42:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b54:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b60:	2001      	movs	r0, #1
 8002b62:	f7fe ffc3 	bl	8001aec <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b6e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002b70:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002b74:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	f7fe ffae 	bl	8001aec <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b98:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002b9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ba2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002ba8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002bac:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002bbe:	2304      	movs	r3, #4
 8002bc0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002bc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002bc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bcc:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002bce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bd2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002bd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bd8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002bda:	2380      	movs	r3, #128	; 0x80
 8002bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002be2:	2300      	movs	r3, #0
 8002be4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bee:	3318      	adds	r3, #24
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002bf6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bfa:	4b3e      	ldr	r3, [pc, #248]	; (8002cf4 <ETH_MACDMAConfig+0x390>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002c02:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002c04:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002c06:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002c08:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002c0a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002c0c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002c0e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002c10:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002c12:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002c14:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002c16:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002c18:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002c1a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002c1e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002c22:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002c24:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c36:	3318      	adds	r3, #24
 8002c38:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c3c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c46:	3318      	adds	r3, #24
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c4e:	2001      	movs	r0, #1
 8002c50:	f7fe ff4c 	bl	8001aec <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c5c:	3318      	adds	r3, #24
 8002c5e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c62:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002c68:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002c6c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002c70:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002c74:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c78:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002c7a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002c7e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c8c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c9c:	2001      	movs	r0, #1
 8002c9e:	f7fe ff25 	bl	8001aec <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002caa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cae:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d10f      	bne.n	8002cd8 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cc0:	331c      	adds	r3, #28
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002ccc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cd4:	331c      	adds	r3, #28
 8002cd6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2100      	movs	r1, #0
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f809 	bl	8002cf8 <ETH_MACAddressConfig>
}
 8002ce6:	bf00      	nop
 8002ce8:	37c0      	adds	r7, #192	; 0xc0
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	ff20810f 	.word	0xff20810f
 8002cf4:	f8de3f23 	.word	0xf8de3f23

08002cf8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3305      	adds	r3, #5
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	021b      	lsls	r3, r3, #8
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	3204      	adds	r2, #4
 8002d10:	7812      	ldrb	r2, [r2, #0]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <ETH_MACAddressConfig+0x68>)
 8002d1a:	4413      	add	r3, r2
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3303      	adds	r3, #3
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	061a      	lsls	r2, r3, #24
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	041b      	lsls	r3, r3, #16
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3301      	adds	r3, #1
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	021b      	lsls	r3, r3, #8
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	7812      	ldrb	r2, [r2, #0]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <ETH_MACAddressConfig+0x6c>)
 8002d4a:	4413      	add	r3, r2
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	6013      	str	r3, [r2, #0]
}
 8002d52:	bf00      	nop
 8002d54:	371c      	adds	r7, #28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40028040 	.word	0x40028040
 8002d64:	40028044 	.word	0x40028044

08002d68 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0208 	orr.w	r2, r2, #8
 8002d82:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	f000 f8e9 	bl	8002f64 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	601a      	str	r2, [r3, #0]
}
 8002d9a:	bf00      	nop
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b084      	sub	sp, #16
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0208 	bic.w	r2, r2, #8
 8002dbc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002dc6:	2001      	movs	r0, #1
 8002dc8:	f000 f8cc 	bl	8002f64 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	601a      	str	r2, [r3, #0]
}
 8002dd4:	bf00      	nop
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0204 	orr.w	r2, r2, #4
 8002df6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002e00:	2001      	movs	r0, #1
 8002e02:	f000 f8af 	bl	8002f64 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	601a      	str	r2, [r3, #0]
}
 8002e0e:	bf00      	nop
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b084      	sub	sp, #16
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0204 	bic.w	r2, r2, #4
 8002e30:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002e3a:	2001      	movs	r0, #1
 8002e3c:	f000 f892 	bl	8002f64 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	601a      	str	r2, [r3, #0]
}
 8002e48:	bf00      	nop
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e60:	3318      	adds	r3, #24
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e70:	3318      	adds	r3, #24
 8002e72:	601a      	str	r2, [r3, #0]
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e90:	3318      	adds	r3, #24
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ea0:	3318      	adds	r3, #24
 8002ea2:	601a      	str	r2, [r3, #0]
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ec0:	3318      	adds	r3, #24
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f042 0202 	orr.w	r2, r2, #2
 8002ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ed0:	3318      	adds	r3, #24
 8002ed2:	601a      	str	r2, [r3, #0]
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ef0:	3318      	adds	r3, #24
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0202 	bic.w	r2, r2, #2
 8002efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f00:	3318      	adds	r3, #24
 8002f02:	601a      	str	r2, [r3, #0]
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f24:	3318      	adds	r3, #24
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f34:	3318      	adds	r3, #24
 8002f36:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f40:	3318      	adds	r3, #24
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002f46:	2001      	movs	r0, #1
 8002f48:	f000 f80c 	bl	8002f64 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f56:	3318      	adds	r3, #24
 8002f58:	601a      	str	r2, [r3, #0]
}
 8002f5a:	bf00      	nop
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <ETH_Delay+0x38>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a0b      	ldr	r2, [pc, #44]	; (8002fa0 <ETH_Delay+0x3c>)
 8002f72:	fba2 2303 	umull	r2, r3, r2, r3
 8002f76:	0a5b      	lsrs	r3, r3, #9
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	fb02 f303 	mul.w	r3, r2, r3
 8002f7e:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002f80:	bf00      	nop
  } 
  while (Delay --);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	1e5a      	subs	r2, r3, #1
 8002f86:	60fa      	str	r2, [r7, #12]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1f9      	bne.n	8002f80 <ETH_Delay+0x1c>
}
 8002f8c:	bf00      	nop
 8002f8e:	bf00      	nop
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	20000000 	.word	0x20000000
 8002fa0:	10624dd3 	.word	0x10624dd3

08002fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b089      	sub	sp, #36	; 0x24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]
 8002fbe:	e177      	b.n	80032b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	f040 8166 	bne.w	80032aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d00b      	beq.n	8002ffe <HAL_GPIO_Init+0x5a>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d007      	beq.n	8002ffe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ff2:	2b11      	cmp	r3, #17
 8002ff4:	d003      	beq.n	8002ffe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b12      	cmp	r3, #18
 8002ffc:	d130      	bne.n	8003060 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	2203      	movs	r2, #3
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43db      	mvns	r3, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4013      	ands	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4313      	orrs	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003034:	2201      	movs	r2, #1
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4013      	ands	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	091b      	lsrs	r3, r3, #4
 800304a:	f003 0201 	and.w	r2, r3, #1
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4313      	orrs	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	2203      	movs	r2, #3
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4013      	ands	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b02      	cmp	r3, #2
 8003096:	d003      	beq.n	80030a0 <HAL_GPIO_Init+0xfc>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b12      	cmp	r3, #18
 800309e:	d123      	bne.n	80030e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	08da      	lsrs	r2, r3, #3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3208      	adds	r2, #8
 80030a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	220f      	movs	r2, #15
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	43db      	mvns	r3, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	691a      	ldr	r2, [r3, #16]
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	08da      	lsrs	r2, r3, #3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3208      	adds	r2, #8
 80030e2:	69b9      	ldr	r1, [r7, #24]
 80030e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	2203      	movs	r2, #3
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 0203 	and.w	r2, r3, #3
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4313      	orrs	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 80c0 	beq.w	80032aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	4b66      	ldr	r3, [pc, #408]	; (80032c8 <HAL_GPIO_Init+0x324>)
 8003130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003132:	4a65      	ldr	r2, [pc, #404]	; (80032c8 <HAL_GPIO_Init+0x324>)
 8003134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003138:	6453      	str	r3, [r2, #68]	; 0x44
 800313a:	4b63      	ldr	r3, [pc, #396]	; (80032c8 <HAL_GPIO_Init+0x324>)
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003146:	4a61      	ldr	r2, [pc, #388]	; (80032cc <HAL_GPIO_Init+0x328>)
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	089b      	lsrs	r3, r3, #2
 800314c:	3302      	adds	r3, #2
 800314e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	220f      	movs	r2, #15
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	43db      	mvns	r3, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4013      	ands	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a58      	ldr	r2, [pc, #352]	; (80032d0 <HAL_GPIO_Init+0x32c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d037      	beq.n	80031e2 <HAL_GPIO_Init+0x23e>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a57      	ldr	r2, [pc, #348]	; (80032d4 <HAL_GPIO_Init+0x330>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d031      	beq.n	80031de <HAL_GPIO_Init+0x23a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a56      	ldr	r2, [pc, #344]	; (80032d8 <HAL_GPIO_Init+0x334>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d02b      	beq.n	80031da <HAL_GPIO_Init+0x236>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a55      	ldr	r2, [pc, #340]	; (80032dc <HAL_GPIO_Init+0x338>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d025      	beq.n	80031d6 <HAL_GPIO_Init+0x232>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a54      	ldr	r2, [pc, #336]	; (80032e0 <HAL_GPIO_Init+0x33c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d01f      	beq.n	80031d2 <HAL_GPIO_Init+0x22e>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a53      	ldr	r2, [pc, #332]	; (80032e4 <HAL_GPIO_Init+0x340>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d019      	beq.n	80031ce <HAL_GPIO_Init+0x22a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a52      	ldr	r2, [pc, #328]	; (80032e8 <HAL_GPIO_Init+0x344>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d013      	beq.n	80031ca <HAL_GPIO_Init+0x226>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a51      	ldr	r2, [pc, #324]	; (80032ec <HAL_GPIO_Init+0x348>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d00d      	beq.n	80031c6 <HAL_GPIO_Init+0x222>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a50      	ldr	r2, [pc, #320]	; (80032f0 <HAL_GPIO_Init+0x34c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d007      	beq.n	80031c2 <HAL_GPIO_Init+0x21e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a4f      	ldr	r2, [pc, #316]	; (80032f4 <HAL_GPIO_Init+0x350>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d101      	bne.n	80031be <HAL_GPIO_Init+0x21a>
 80031ba:	2309      	movs	r3, #9
 80031bc:	e012      	b.n	80031e4 <HAL_GPIO_Init+0x240>
 80031be:	230a      	movs	r3, #10
 80031c0:	e010      	b.n	80031e4 <HAL_GPIO_Init+0x240>
 80031c2:	2308      	movs	r3, #8
 80031c4:	e00e      	b.n	80031e4 <HAL_GPIO_Init+0x240>
 80031c6:	2307      	movs	r3, #7
 80031c8:	e00c      	b.n	80031e4 <HAL_GPIO_Init+0x240>
 80031ca:	2306      	movs	r3, #6
 80031cc:	e00a      	b.n	80031e4 <HAL_GPIO_Init+0x240>
 80031ce:	2305      	movs	r3, #5
 80031d0:	e008      	b.n	80031e4 <HAL_GPIO_Init+0x240>
 80031d2:	2304      	movs	r3, #4
 80031d4:	e006      	b.n	80031e4 <HAL_GPIO_Init+0x240>
 80031d6:	2303      	movs	r3, #3
 80031d8:	e004      	b.n	80031e4 <HAL_GPIO_Init+0x240>
 80031da:	2302      	movs	r3, #2
 80031dc:	e002      	b.n	80031e4 <HAL_GPIO_Init+0x240>
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <HAL_GPIO_Init+0x240>
 80031e2:	2300      	movs	r3, #0
 80031e4:	69fa      	ldr	r2, [r7, #28]
 80031e6:	f002 0203 	and.w	r2, r2, #3
 80031ea:	0092      	lsls	r2, r2, #2
 80031ec:	4093      	lsls	r3, r2
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031f4:	4935      	ldr	r1, [pc, #212]	; (80032cc <HAL_GPIO_Init+0x328>)
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	089b      	lsrs	r3, r3, #2
 80031fa:	3302      	adds	r3, #2
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003202:	4b3d      	ldr	r3, [pc, #244]	; (80032f8 <HAL_GPIO_Init+0x354>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	43db      	mvns	r3, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4013      	ands	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003226:	4a34      	ldr	r2, [pc, #208]	; (80032f8 <HAL_GPIO_Init+0x354>)
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800322c:	4b32      	ldr	r3, [pc, #200]	; (80032f8 <HAL_GPIO_Init+0x354>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003250:	4a29      	ldr	r2, [pc, #164]	; (80032f8 <HAL_GPIO_Init+0x354>)
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003256:	4b28      	ldr	r3, [pc, #160]	; (80032f8 <HAL_GPIO_Init+0x354>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	43db      	mvns	r3, r3
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	4013      	ands	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	4313      	orrs	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800327a:	4a1f      	ldr	r2, [pc, #124]	; (80032f8 <HAL_GPIO_Init+0x354>)
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003280:	4b1d      	ldr	r3, [pc, #116]	; (80032f8 <HAL_GPIO_Init+0x354>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	43db      	mvns	r3, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4013      	ands	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032a4:	4a14      	ldr	r2, [pc, #80]	; (80032f8 <HAL_GPIO_Init+0x354>)
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	3301      	adds	r3, #1
 80032ae:	61fb      	str	r3, [r7, #28]
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	2b0f      	cmp	r3, #15
 80032b4:	f67f ae84 	bls.w	8002fc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032b8:	bf00      	nop
 80032ba:	bf00      	nop
 80032bc:	3724      	adds	r7, #36	; 0x24
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40023800 	.word	0x40023800
 80032cc:	40013800 	.word	0x40013800
 80032d0:	40020000 	.word	0x40020000
 80032d4:	40020400 	.word	0x40020400
 80032d8:	40020800 	.word	0x40020800
 80032dc:	40020c00 	.word	0x40020c00
 80032e0:	40021000 	.word	0x40021000
 80032e4:	40021400 	.word	0x40021400
 80032e8:	40021800 	.word	0x40021800
 80032ec:	40021c00 	.word	0x40021c00
 80032f0:	40022000 	.word	0x40022000
 80032f4:	40022400 	.word	0x40022400
 80032f8:	40013c00 	.word	0x40013c00

080032fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	460b      	mov	r3, r1
 8003306:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	887b      	ldrh	r3, [r7, #2]
 800330e:	4013      	ands	r3, r2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003314:	2301      	movs	r3, #1
 8003316:	73fb      	strb	r3, [r7, #15]
 8003318:	e001      	b.n	800331e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800331a:	2300      	movs	r3, #0
 800331c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800331e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	460b      	mov	r3, r1
 8003336:	807b      	strh	r3, [r7, #2]
 8003338:	4613      	mov	r3, r2
 800333a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800333c:	787b      	ldrb	r3, [r7, #1]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003342:	887a      	ldrh	r2, [r7, #2]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003348:	e003      	b.n	8003352 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800334a:	887b      	ldrh	r3, [r7, #2]
 800334c:	041a      	lsls	r2, r3, #16
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	619a      	str	r2, [r3, #24]
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
	...

08003360 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800336a:	4b08      	ldr	r3, [pc, #32]	; (800338c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800336c:	695a      	ldr	r2, [r3, #20]
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	4013      	ands	r3, r2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d006      	beq.n	8003384 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003376:	4a05      	ldr	r2, [pc, #20]	; (800338c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003378:	88fb      	ldrh	r3, [r7, #6]
 800337a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800337c:	88fb      	ldrh	r3, [r7, #6]
 800337e:	4618      	mov	r0, r3
 8003380:	f7fe fad4 	bl	800192c <HAL_GPIO_EXTI_Callback>
  }
}
 8003384:	bf00      	nop
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40013c00 	.word	0x40013c00

08003390 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e25b      	b.n	800385a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d075      	beq.n	800349a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ae:	4ba3      	ldr	r3, [pc, #652]	; (800363c <HAL_RCC_OscConfig+0x2ac>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 030c 	and.w	r3, r3, #12
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d00c      	beq.n	80033d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ba:	4ba0      	ldr	r3, [pc, #640]	; (800363c <HAL_RCC_OscConfig+0x2ac>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033c2:	2b08      	cmp	r3, #8
 80033c4:	d112      	bne.n	80033ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033c6:	4b9d      	ldr	r3, [pc, #628]	; (800363c <HAL_RCC_OscConfig+0x2ac>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033d2:	d10b      	bne.n	80033ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d4:	4b99      	ldr	r3, [pc, #612]	; (800363c <HAL_RCC_OscConfig+0x2ac>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d05b      	beq.n	8003498 <HAL_RCC_OscConfig+0x108>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d157      	bne.n	8003498 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e236      	b.n	800385a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f4:	d106      	bne.n	8003404 <HAL_RCC_OscConfig+0x74>
 80033f6:	4b91      	ldr	r3, [pc, #580]	; (800363c <HAL_RCC_OscConfig+0x2ac>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a90      	ldr	r2, [pc, #576]	; (800363c <HAL_RCC_OscConfig+0x2ac>)
 80033fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	e01d      	b.n	8003440 <HAL_RCC_OscConfig+0xb0>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800340c:	d10c      	bne.n	8003428 <HAL_RCC_OscConfig+0x98>
 800340e:	4b8b      	ldr	r3, [pc, #556]	; (800363c <HAL_RCC_OscConfig+0x2ac>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a8a      	ldr	r2, [pc, #552]	; (800363c <HAL_RCC_OscConfig+0x2ac>)
 8003414:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	4b88      	ldr	r3, [pc, #544]	; (800363c <HAL_RCC_OscConfig+0x2ac>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a87      	ldr	r2, [pc, #540]	; (800363c <HAL_RCC_OscConfig+0x2ac>)
 8003420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	e00b      	b.n	8003440 <HAL_RCC_OscConfig+0xb0>
 8003428:	4b84      	ldr	r3, [pc, #528]	; (800363c <HAL_RCC_OscConfig+0x2ac>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a83      	ldr	r2, [pc, #524]	; (800363c <HAL_RCC_OscConfig+0x2ac>)
 800342e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003432:	6013      	str	r3, [r2, #0]
 8003434:	4b81      	ldr	r3, [pc, #516]	; (800363c <HAL_RCC_OscConfig+0x2ac>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a80      	ldr	r2, [pc, #512]	; (800363c <HAL_RCC_OscConfig+0x2ac>)
 800343a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800343e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d013      	beq.n	8003470 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003448:	f7fe fb44 	bl	8001ad4 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003450:	f7fe fb40 	bl	8001ad4 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b64      	cmp	r3, #100	; 0x64
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e1fb      	b.n	800385a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003462:	4b76      	ldr	r3, [pc, #472]	; (800363c <HAL_RCC_OscConfig+0x2ac>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0f0      	beq.n	8003450 <HAL_RCC_OscConfig+0xc0>
 800346e:	e014      	b.n	800349a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003470:	f7fe fb30 	bl	8001ad4 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003478:	f7fe fb2c 	bl	8001ad4 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b64      	cmp	r3, #100	; 0x64
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e1e7      	b.n	800385a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800348a:	4b6c      	ldr	r3, [pc, #432]	; (800363c <HAL_RCC_OscConfig+0x2ac>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f0      	bne.n	8003478 <HAL_RCC_OscConfig+0xe8>
 8003496:	e000      	b.n	800349a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d063      	beq.n	800356e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034a6:	4b65      	ldr	r3, [pc, #404]	; (800363c <HAL_RCC_OscConfig+0x2ac>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 030c 	and.w	r3, r3, #12
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00b      	beq.n	80034ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034b2:	4b62      	ldr	r3, [pc, #392]	; (800363c <HAL_RCC_OscConfig+0x2ac>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d11c      	bne.n	80034f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034be:	4b5f      	ldr	r3, [pc, #380]	; (800363c <HAL_RCC_OscConfig+0x2ac>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d116      	bne.n	80034f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ca:	4b5c      	ldr	r3, [pc, #368]	; (800363c <HAL_RCC_OscConfig+0x2ac>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d005      	beq.n	80034e2 <HAL_RCC_OscConfig+0x152>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d001      	beq.n	80034e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e1bb      	b.n	800385a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e2:	4b56      	ldr	r3, [pc, #344]	; (800363c <HAL_RCC_OscConfig+0x2ac>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	4952      	ldr	r1, [pc, #328]	; (800363c <HAL_RCC_OscConfig+0x2ac>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034f6:	e03a      	b.n	800356e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d020      	beq.n	8003542 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003500:	4b4f      	ldr	r3, [pc, #316]	; (8003640 <HAL_RCC_OscConfig+0x2b0>)
 8003502:	2201      	movs	r2, #1
 8003504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003506:	f7fe fae5 	bl	8001ad4 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800350e:	f7fe fae1 	bl	8001ad4 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e19c      	b.n	800385a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003520:	4b46      	ldr	r3, [pc, #280]	; (800363c <HAL_RCC_OscConfig+0x2ac>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0f0      	beq.n	800350e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800352c:	4b43      	ldr	r3, [pc, #268]	; (800363c <HAL_RCC_OscConfig+0x2ac>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	4940      	ldr	r1, [pc, #256]	; (800363c <HAL_RCC_OscConfig+0x2ac>)
 800353c:	4313      	orrs	r3, r2
 800353e:	600b      	str	r3, [r1, #0]
 8003540:	e015      	b.n	800356e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003542:	4b3f      	ldr	r3, [pc, #252]	; (8003640 <HAL_RCC_OscConfig+0x2b0>)
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003548:	f7fe fac4 	bl	8001ad4 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003550:	f7fe fac0 	bl	8001ad4 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e17b      	b.n	800385a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003562:	4b36      	ldr	r3, [pc, #216]	; (800363c <HAL_RCC_OscConfig+0x2ac>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f0      	bne.n	8003550 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d030      	beq.n	80035dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d016      	beq.n	80035b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003582:	4b30      	ldr	r3, [pc, #192]	; (8003644 <HAL_RCC_OscConfig+0x2b4>)
 8003584:	2201      	movs	r2, #1
 8003586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003588:	f7fe faa4 	bl	8001ad4 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003590:	f7fe faa0 	bl	8001ad4 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e15b      	b.n	800385a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035a2:	4b26      	ldr	r3, [pc, #152]	; (800363c <HAL_RCC_OscConfig+0x2ac>)
 80035a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0f0      	beq.n	8003590 <HAL_RCC_OscConfig+0x200>
 80035ae:	e015      	b.n	80035dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035b0:	4b24      	ldr	r3, [pc, #144]	; (8003644 <HAL_RCC_OscConfig+0x2b4>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b6:	f7fe fa8d 	bl	8001ad4 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035be:	f7fe fa89 	bl	8001ad4 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e144      	b.n	800385a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d0:	4b1a      	ldr	r3, [pc, #104]	; (800363c <HAL_RCC_OscConfig+0x2ac>)
 80035d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1f0      	bne.n	80035be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 80a0 	beq.w	800372a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ea:	2300      	movs	r3, #0
 80035ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ee:	4b13      	ldr	r3, [pc, #76]	; (800363c <HAL_RCC_OscConfig+0x2ac>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10f      	bne.n	800361a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035fa:	2300      	movs	r3, #0
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	4b0f      	ldr	r3, [pc, #60]	; (800363c <HAL_RCC_OscConfig+0x2ac>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	4a0e      	ldr	r2, [pc, #56]	; (800363c <HAL_RCC_OscConfig+0x2ac>)
 8003604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003608:	6413      	str	r3, [r2, #64]	; 0x40
 800360a:	4b0c      	ldr	r3, [pc, #48]	; (800363c <HAL_RCC_OscConfig+0x2ac>)
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003612:	60bb      	str	r3, [r7, #8]
 8003614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003616:	2301      	movs	r3, #1
 8003618:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361a:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <HAL_RCC_OscConfig+0x2b8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003622:	2b00      	cmp	r3, #0
 8003624:	d121      	bne.n	800366a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003626:	4b08      	ldr	r3, [pc, #32]	; (8003648 <HAL_RCC_OscConfig+0x2b8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a07      	ldr	r2, [pc, #28]	; (8003648 <HAL_RCC_OscConfig+0x2b8>)
 800362c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003632:	f7fe fa4f 	bl	8001ad4 <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003638:	e011      	b.n	800365e <HAL_RCC_OscConfig+0x2ce>
 800363a:	bf00      	nop
 800363c:	40023800 	.word	0x40023800
 8003640:	42470000 	.word	0x42470000
 8003644:	42470e80 	.word	0x42470e80
 8003648:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800364c:	f7fe fa42 	bl	8001ad4 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e0fd      	b.n	800385a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365e:	4b81      	ldr	r3, [pc, #516]	; (8003864 <HAL_RCC_OscConfig+0x4d4>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0f0      	beq.n	800364c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d106      	bne.n	8003680 <HAL_RCC_OscConfig+0x2f0>
 8003672:	4b7d      	ldr	r3, [pc, #500]	; (8003868 <HAL_RCC_OscConfig+0x4d8>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	4a7c      	ldr	r2, [pc, #496]	; (8003868 <HAL_RCC_OscConfig+0x4d8>)
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	6713      	str	r3, [r2, #112]	; 0x70
 800367e:	e01c      	b.n	80036ba <HAL_RCC_OscConfig+0x32a>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	2b05      	cmp	r3, #5
 8003686:	d10c      	bne.n	80036a2 <HAL_RCC_OscConfig+0x312>
 8003688:	4b77      	ldr	r3, [pc, #476]	; (8003868 <HAL_RCC_OscConfig+0x4d8>)
 800368a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368c:	4a76      	ldr	r2, [pc, #472]	; (8003868 <HAL_RCC_OscConfig+0x4d8>)
 800368e:	f043 0304 	orr.w	r3, r3, #4
 8003692:	6713      	str	r3, [r2, #112]	; 0x70
 8003694:	4b74      	ldr	r3, [pc, #464]	; (8003868 <HAL_RCC_OscConfig+0x4d8>)
 8003696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003698:	4a73      	ldr	r2, [pc, #460]	; (8003868 <HAL_RCC_OscConfig+0x4d8>)
 800369a:	f043 0301 	orr.w	r3, r3, #1
 800369e:	6713      	str	r3, [r2, #112]	; 0x70
 80036a0:	e00b      	b.n	80036ba <HAL_RCC_OscConfig+0x32a>
 80036a2:	4b71      	ldr	r3, [pc, #452]	; (8003868 <HAL_RCC_OscConfig+0x4d8>)
 80036a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a6:	4a70      	ldr	r2, [pc, #448]	; (8003868 <HAL_RCC_OscConfig+0x4d8>)
 80036a8:	f023 0301 	bic.w	r3, r3, #1
 80036ac:	6713      	str	r3, [r2, #112]	; 0x70
 80036ae:	4b6e      	ldr	r3, [pc, #440]	; (8003868 <HAL_RCC_OscConfig+0x4d8>)
 80036b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b2:	4a6d      	ldr	r2, [pc, #436]	; (8003868 <HAL_RCC_OscConfig+0x4d8>)
 80036b4:	f023 0304 	bic.w	r3, r3, #4
 80036b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d015      	beq.n	80036ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c2:	f7fe fa07 	bl	8001ad4 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c8:	e00a      	b.n	80036e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ca:	f7fe fa03 	bl	8001ad4 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d8:	4293      	cmp	r3, r2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e0bc      	b.n	800385a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e0:	4b61      	ldr	r3, [pc, #388]	; (8003868 <HAL_RCC_OscConfig+0x4d8>)
 80036e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0ee      	beq.n	80036ca <HAL_RCC_OscConfig+0x33a>
 80036ec:	e014      	b.n	8003718 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ee:	f7fe f9f1 	bl	8001ad4 <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f4:	e00a      	b.n	800370c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036f6:	f7fe f9ed 	bl	8001ad4 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	f241 3288 	movw	r2, #5000	; 0x1388
 8003704:	4293      	cmp	r3, r2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e0a6      	b.n	800385a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800370c:	4b56      	ldr	r3, [pc, #344]	; (8003868 <HAL_RCC_OscConfig+0x4d8>)
 800370e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1ee      	bne.n	80036f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003718:	7dfb      	ldrb	r3, [r7, #23]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d105      	bne.n	800372a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800371e:	4b52      	ldr	r3, [pc, #328]	; (8003868 <HAL_RCC_OscConfig+0x4d8>)
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	4a51      	ldr	r2, [pc, #324]	; (8003868 <HAL_RCC_OscConfig+0x4d8>)
 8003724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003728:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 8092 	beq.w	8003858 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003734:	4b4c      	ldr	r3, [pc, #304]	; (8003868 <HAL_RCC_OscConfig+0x4d8>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 030c 	and.w	r3, r3, #12
 800373c:	2b08      	cmp	r3, #8
 800373e:	d05c      	beq.n	80037fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	2b02      	cmp	r3, #2
 8003746:	d141      	bne.n	80037cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003748:	4b48      	ldr	r3, [pc, #288]	; (800386c <HAL_RCC_OscConfig+0x4dc>)
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374e:	f7fe f9c1 	bl	8001ad4 <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003756:	f7fe f9bd 	bl	8001ad4 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e078      	b.n	800385a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003768:	4b3f      	ldr	r3, [pc, #252]	; (8003868 <HAL_RCC_OscConfig+0x4d8>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1f0      	bne.n	8003756 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	69da      	ldr	r2, [r3, #28]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	431a      	orrs	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	019b      	lsls	r3, r3, #6
 8003784:	431a      	orrs	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378a:	085b      	lsrs	r3, r3, #1
 800378c:	3b01      	subs	r3, #1
 800378e:	041b      	lsls	r3, r3, #16
 8003790:	431a      	orrs	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003796:	061b      	lsls	r3, r3, #24
 8003798:	4933      	ldr	r1, [pc, #204]	; (8003868 <HAL_RCC_OscConfig+0x4d8>)
 800379a:	4313      	orrs	r3, r2
 800379c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800379e:	4b33      	ldr	r3, [pc, #204]	; (800386c <HAL_RCC_OscConfig+0x4dc>)
 80037a0:	2201      	movs	r2, #1
 80037a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a4:	f7fe f996 	bl	8001ad4 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ac:	f7fe f992 	bl	8001ad4 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e04d      	b.n	800385a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037be:	4b2a      	ldr	r3, [pc, #168]	; (8003868 <HAL_RCC_OscConfig+0x4d8>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0f0      	beq.n	80037ac <HAL_RCC_OscConfig+0x41c>
 80037ca:	e045      	b.n	8003858 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037cc:	4b27      	ldr	r3, [pc, #156]	; (800386c <HAL_RCC_OscConfig+0x4dc>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d2:	f7fe f97f 	bl	8001ad4 <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037da:	f7fe f97b 	bl	8001ad4 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e036      	b.n	800385a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ec:	4b1e      	ldr	r3, [pc, #120]	; (8003868 <HAL_RCC_OscConfig+0x4d8>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1f0      	bne.n	80037da <HAL_RCC_OscConfig+0x44a>
 80037f8:	e02e      	b.n	8003858 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e029      	b.n	800385a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003806:	4b18      	ldr	r3, [pc, #96]	; (8003868 <HAL_RCC_OscConfig+0x4d8>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	429a      	cmp	r2, r3
 8003818:	d11c      	bne.n	8003854 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003824:	429a      	cmp	r2, r3
 8003826:	d115      	bne.n	8003854 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800382e:	4013      	ands	r3, r2
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003834:	4293      	cmp	r3, r2
 8003836:	d10d      	bne.n	8003854 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003842:	429a      	cmp	r2, r3
 8003844:	d106      	bne.n	8003854 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003850:	429a      	cmp	r2, r3
 8003852:	d001      	beq.n	8003858 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40007000 	.word	0x40007000
 8003868:	40023800 	.word	0x40023800
 800386c:	42470060 	.word	0x42470060

08003870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e0cc      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003884:	4b68      	ldr	r3, [pc, #416]	; (8003a28 <HAL_RCC_ClockConfig+0x1b8>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 030f 	and.w	r3, r3, #15
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d90c      	bls.n	80038ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003892:	4b65      	ldr	r3, [pc, #404]	; (8003a28 <HAL_RCC_ClockConfig+0x1b8>)
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800389a:	4b63      	ldr	r3, [pc, #396]	; (8003a28 <HAL_RCC_ClockConfig+0x1b8>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d001      	beq.n	80038ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e0b8      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d020      	beq.n	80038fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038c4:	4b59      	ldr	r3, [pc, #356]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	4a58      	ldr	r2, [pc, #352]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038dc:	4b53      	ldr	r3, [pc, #332]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	4a52      	ldr	r2, [pc, #328]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e8:	4b50      	ldr	r3, [pc, #320]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	494d      	ldr	r1, [pc, #308]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d044      	beq.n	8003990 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d107      	bne.n	800391e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390e:	4b47      	ldr	r3, [pc, #284]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d119      	bne.n	800394e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e07f      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2b02      	cmp	r3, #2
 8003924:	d003      	beq.n	800392e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800392a:	2b03      	cmp	r3, #3
 800392c:	d107      	bne.n	800393e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800392e:	4b3f      	ldr	r3, [pc, #252]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d109      	bne.n	800394e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e06f      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800393e:	4b3b      	ldr	r3, [pc, #236]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e067      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800394e:	4b37      	ldr	r3, [pc, #220]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f023 0203 	bic.w	r2, r3, #3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	4934      	ldr	r1, [pc, #208]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 800395c:	4313      	orrs	r3, r2
 800395e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003960:	f7fe f8b8 	bl	8001ad4 <HAL_GetTick>
 8003964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003966:	e00a      	b.n	800397e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003968:	f7fe f8b4 	bl	8001ad4 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	f241 3288 	movw	r2, #5000	; 0x1388
 8003976:	4293      	cmp	r3, r2
 8003978:	d901      	bls.n	800397e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e04f      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800397e:	4b2b      	ldr	r3, [pc, #172]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 020c 	and.w	r2, r3, #12
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	429a      	cmp	r2, r3
 800398e:	d1eb      	bne.n	8003968 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003990:	4b25      	ldr	r3, [pc, #148]	; (8003a28 <HAL_RCC_ClockConfig+0x1b8>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 030f 	and.w	r3, r3, #15
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d20c      	bcs.n	80039b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399e:	4b22      	ldr	r3, [pc, #136]	; (8003a28 <HAL_RCC_ClockConfig+0x1b8>)
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a6:	4b20      	ldr	r3, [pc, #128]	; (8003a28 <HAL_RCC_ClockConfig+0x1b8>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d001      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e032      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d008      	beq.n	80039d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039c4:	4b19      	ldr	r3, [pc, #100]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	4916      	ldr	r1, [pc, #88]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d009      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039e2:	4b12      	ldr	r3, [pc, #72]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	490e      	ldr	r1, [pc, #56]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039f6:	f000 f821 	bl	8003a3c <HAL_RCC_GetSysClockFreq>
 80039fa:	4602      	mov	r2, r0
 80039fc:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	091b      	lsrs	r3, r3, #4
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	490a      	ldr	r1, [pc, #40]	; (8003a30 <HAL_RCC_ClockConfig+0x1c0>)
 8003a08:	5ccb      	ldrb	r3, [r1, r3]
 8003a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a0e:	4a09      	ldr	r2, [pc, #36]	; (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 8003a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a12:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fe f818 	bl	8001a4c <HAL_InitTick>

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	40023c00 	.word	0x40023c00
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	0801355c 	.word	0x0801355c
 8003a34:	20000000 	.word	0x20000000
 8003a38:	20000004 	.word	0x20000004

08003a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a3c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003a40:	b084      	sub	sp, #16
 8003a42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	607b      	str	r3, [r7, #4]
 8003a48:	2300      	movs	r3, #0
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a54:	4b67      	ldr	r3, [pc, #412]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 030c 	and.w	r3, r3, #12
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d00d      	beq.n	8003a7c <HAL_RCC_GetSysClockFreq+0x40>
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	f200 80bd 	bhi.w	8003be0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <HAL_RCC_GetSysClockFreq+0x34>
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d003      	beq.n	8003a76 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a6e:	e0b7      	b.n	8003be0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a70:	4b61      	ldr	r3, [pc, #388]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003a72:	60bb      	str	r3, [r7, #8]
       break;
 8003a74:	e0b7      	b.n	8003be6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a76:	4b61      	ldr	r3, [pc, #388]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003a78:	60bb      	str	r3, [r7, #8]
      break;
 8003a7a:	e0b4      	b.n	8003be6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a7c:	4b5d      	ldr	r3, [pc, #372]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a84:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a86:	4b5b      	ldr	r3, [pc, #364]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d04d      	beq.n	8003b2e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a92:	4b58      	ldr	r3, [pc, #352]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	099b      	lsrs	r3, r3, #6
 8003a98:	461a      	mov	r2, r3
 8003a9a:	f04f 0300 	mov.w	r3, #0
 8003a9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003aa2:	f04f 0100 	mov.w	r1, #0
 8003aa6:	ea02 0800 	and.w	r8, r2, r0
 8003aaa:	ea03 0901 	and.w	r9, r3, r1
 8003aae:	4640      	mov	r0, r8
 8003ab0:	4649      	mov	r1, r9
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	f04f 0300 	mov.w	r3, #0
 8003aba:	014b      	lsls	r3, r1, #5
 8003abc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ac0:	0142      	lsls	r2, r0, #5
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	ebb0 0008 	subs.w	r0, r0, r8
 8003aca:	eb61 0109 	sbc.w	r1, r1, r9
 8003ace:	f04f 0200 	mov.w	r2, #0
 8003ad2:	f04f 0300 	mov.w	r3, #0
 8003ad6:	018b      	lsls	r3, r1, #6
 8003ad8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003adc:	0182      	lsls	r2, r0, #6
 8003ade:	1a12      	subs	r2, r2, r0
 8003ae0:	eb63 0301 	sbc.w	r3, r3, r1
 8003ae4:	f04f 0000 	mov.w	r0, #0
 8003ae8:	f04f 0100 	mov.w	r1, #0
 8003aec:	00d9      	lsls	r1, r3, #3
 8003aee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003af2:	00d0      	lsls	r0, r2, #3
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	eb12 0208 	adds.w	r2, r2, r8
 8003afc:	eb43 0309 	adc.w	r3, r3, r9
 8003b00:	f04f 0000 	mov.w	r0, #0
 8003b04:	f04f 0100 	mov.w	r1, #0
 8003b08:	0259      	lsls	r1, r3, #9
 8003b0a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003b0e:	0250      	lsls	r0, r2, #9
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	4610      	mov	r0, r2
 8003b16:	4619      	mov	r1, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	f7fc fbce 	bl	80002c0 <__aeabi_uldivmod>
 8003b24:	4602      	mov	r2, r0
 8003b26:	460b      	mov	r3, r1
 8003b28:	4613      	mov	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	e04a      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b2e:	4b31      	ldr	r3, [pc, #196]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	099b      	lsrs	r3, r3, #6
 8003b34:	461a      	mov	r2, r3
 8003b36:	f04f 0300 	mov.w	r3, #0
 8003b3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b3e:	f04f 0100 	mov.w	r1, #0
 8003b42:	ea02 0400 	and.w	r4, r2, r0
 8003b46:	ea03 0501 	and.w	r5, r3, r1
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	4629      	mov	r1, r5
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	014b      	lsls	r3, r1, #5
 8003b58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b5c:	0142      	lsls	r2, r0, #5
 8003b5e:	4610      	mov	r0, r2
 8003b60:	4619      	mov	r1, r3
 8003b62:	1b00      	subs	r0, r0, r4
 8003b64:	eb61 0105 	sbc.w	r1, r1, r5
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	018b      	lsls	r3, r1, #6
 8003b72:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b76:	0182      	lsls	r2, r0, #6
 8003b78:	1a12      	subs	r2, r2, r0
 8003b7a:	eb63 0301 	sbc.w	r3, r3, r1
 8003b7e:	f04f 0000 	mov.w	r0, #0
 8003b82:	f04f 0100 	mov.w	r1, #0
 8003b86:	00d9      	lsls	r1, r3, #3
 8003b88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b8c:	00d0      	lsls	r0, r2, #3
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	1912      	adds	r2, r2, r4
 8003b94:	eb45 0303 	adc.w	r3, r5, r3
 8003b98:	f04f 0000 	mov.w	r0, #0
 8003b9c:	f04f 0100 	mov.w	r1, #0
 8003ba0:	0299      	lsls	r1, r3, #10
 8003ba2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003ba6:	0290      	lsls	r0, r2, #10
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	4610      	mov	r0, r2
 8003bae:	4619      	mov	r1, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	f04f 0300 	mov.w	r3, #0
 8003bb8:	f7fc fb82 	bl	80002c0 <__aeabi_uldivmod>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	0c1b      	lsrs	r3, r3, #16
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	3301      	adds	r3, #1
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bdc:	60bb      	str	r3, [r7, #8]
      break;
 8003bde:	e002      	b.n	8003be6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003be0:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003be2:	60bb      	str	r3, [r7, #8]
      break;
 8003be4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003be6:	68bb      	ldr	r3, [r7, #8]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	00f42400 	.word	0x00f42400
 8003bfc:	007a1200 	.word	0x007a1200

08003c00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c04:	4b03      	ldr	r3, [pc, #12]	; (8003c14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c06:	681b      	ldr	r3, [r3, #0]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	20000000 	.word	0x20000000

08003c18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e01d      	b.n	8003c66 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7fd f89e 	bl	8000d80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3304      	adds	r3, #4
 8003c54:	4619      	mov	r1, r3
 8003c56:	4610      	mov	r0, r2
 8003c58:	f000 f90e 	bl	8003e78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
	...

08003c70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	6839      	ldr	r1, [r7, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 fb48 	bl	8004318 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a15      	ldr	r2, [pc, #84]	; (8003ce4 <HAL_TIM_PWM_Start+0x74>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d004      	beq.n	8003c9c <HAL_TIM_PWM_Start+0x2c>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a14      	ldr	r2, [pc, #80]	; (8003ce8 <HAL_TIM_PWM_Start+0x78>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d101      	bne.n	8003ca0 <HAL_TIM_PWM_Start+0x30>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e000      	b.n	8003ca2 <HAL_TIM_PWM_Start+0x32>
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d007      	beq.n	8003cb6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2b06      	cmp	r3, #6
 8003cc6:	d007      	beq.n	8003cd8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0201 	orr.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40010000 	.word	0x40010000
 8003ce8:	40010400 	.word	0x40010400

08003cec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d101      	bne.n	8003d06 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003d02:	2302      	movs	r3, #2
 8003d04:	e0b4      	b.n	8003e70 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2202      	movs	r2, #2
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b0c      	cmp	r3, #12
 8003d1a:	f200 809f 	bhi.w	8003e5c <HAL_TIM_PWM_ConfigChannel+0x170>
 8003d1e:	a201      	add	r2, pc, #4	; (adr r2, 8003d24 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d24:	08003d59 	.word	0x08003d59
 8003d28:	08003e5d 	.word	0x08003e5d
 8003d2c:	08003e5d 	.word	0x08003e5d
 8003d30:	08003e5d 	.word	0x08003e5d
 8003d34:	08003d99 	.word	0x08003d99
 8003d38:	08003e5d 	.word	0x08003e5d
 8003d3c:	08003e5d 	.word	0x08003e5d
 8003d40:	08003e5d 	.word	0x08003e5d
 8003d44:	08003ddb 	.word	0x08003ddb
 8003d48:	08003e5d 	.word	0x08003e5d
 8003d4c:	08003e5d 	.word	0x08003e5d
 8003d50:	08003e5d 	.word	0x08003e5d
 8003d54:	08003e1b 	.word	0x08003e1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68b9      	ldr	r1, [r7, #8]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 f92a 	bl	8003fb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699a      	ldr	r2, [r3, #24]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 0208 	orr.w	r2, r2, #8
 8003d72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699a      	ldr	r2, [r3, #24]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0204 	bic.w	r2, r2, #4
 8003d82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6999      	ldr	r1, [r3, #24]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	691a      	ldr	r2, [r3, #16]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	619a      	str	r2, [r3, #24]
      break;
 8003d96:	e062      	b.n	8003e5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68b9      	ldr	r1, [r7, #8]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 f97a 	bl	8004098 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	699a      	ldr	r2, [r3, #24]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003db2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	699a      	ldr	r2, [r3, #24]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6999      	ldr	r1, [r3, #24]
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	021a      	lsls	r2, r3, #8
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	619a      	str	r2, [r3, #24]
      break;
 8003dd8:	e041      	b.n	8003e5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68b9      	ldr	r1, [r7, #8]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 f9cf 	bl	8004184 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	69da      	ldr	r2, [r3, #28]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f042 0208 	orr.w	r2, r2, #8
 8003df4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69da      	ldr	r2, [r3, #28]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0204 	bic.w	r2, r2, #4
 8003e04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	69d9      	ldr	r1, [r3, #28]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	61da      	str	r2, [r3, #28]
      break;
 8003e18:	e021      	b.n	8003e5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68b9      	ldr	r1, [r7, #8]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f000 fa23 	bl	800426c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	69da      	ldr	r2, [r3, #28]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	69da      	ldr	r2, [r3, #28]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	69d9      	ldr	r1, [r3, #28]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	021a      	lsls	r2, r3, #8
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	61da      	str	r2, [r3, #28]
      break;
 8003e5a:	e000      	b.n	8003e5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003e5c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a40      	ldr	r2, [pc, #256]	; (8003f8c <TIM_Base_SetConfig+0x114>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d013      	beq.n	8003eb8 <TIM_Base_SetConfig+0x40>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e96:	d00f      	beq.n	8003eb8 <TIM_Base_SetConfig+0x40>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a3d      	ldr	r2, [pc, #244]	; (8003f90 <TIM_Base_SetConfig+0x118>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d00b      	beq.n	8003eb8 <TIM_Base_SetConfig+0x40>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a3c      	ldr	r2, [pc, #240]	; (8003f94 <TIM_Base_SetConfig+0x11c>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d007      	beq.n	8003eb8 <TIM_Base_SetConfig+0x40>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a3b      	ldr	r2, [pc, #236]	; (8003f98 <TIM_Base_SetConfig+0x120>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d003      	beq.n	8003eb8 <TIM_Base_SetConfig+0x40>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a3a      	ldr	r2, [pc, #232]	; (8003f9c <TIM_Base_SetConfig+0x124>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d108      	bne.n	8003eca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ebe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a2f      	ldr	r2, [pc, #188]	; (8003f8c <TIM_Base_SetConfig+0x114>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d02b      	beq.n	8003f2a <TIM_Base_SetConfig+0xb2>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed8:	d027      	beq.n	8003f2a <TIM_Base_SetConfig+0xb2>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a2c      	ldr	r2, [pc, #176]	; (8003f90 <TIM_Base_SetConfig+0x118>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d023      	beq.n	8003f2a <TIM_Base_SetConfig+0xb2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a2b      	ldr	r2, [pc, #172]	; (8003f94 <TIM_Base_SetConfig+0x11c>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d01f      	beq.n	8003f2a <TIM_Base_SetConfig+0xb2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a2a      	ldr	r2, [pc, #168]	; (8003f98 <TIM_Base_SetConfig+0x120>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d01b      	beq.n	8003f2a <TIM_Base_SetConfig+0xb2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a29      	ldr	r2, [pc, #164]	; (8003f9c <TIM_Base_SetConfig+0x124>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d017      	beq.n	8003f2a <TIM_Base_SetConfig+0xb2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a28      	ldr	r2, [pc, #160]	; (8003fa0 <TIM_Base_SetConfig+0x128>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d013      	beq.n	8003f2a <TIM_Base_SetConfig+0xb2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a27      	ldr	r2, [pc, #156]	; (8003fa4 <TIM_Base_SetConfig+0x12c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d00f      	beq.n	8003f2a <TIM_Base_SetConfig+0xb2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a26      	ldr	r2, [pc, #152]	; (8003fa8 <TIM_Base_SetConfig+0x130>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d00b      	beq.n	8003f2a <TIM_Base_SetConfig+0xb2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a25      	ldr	r2, [pc, #148]	; (8003fac <TIM_Base_SetConfig+0x134>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d007      	beq.n	8003f2a <TIM_Base_SetConfig+0xb2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a24      	ldr	r2, [pc, #144]	; (8003fb0 <TIM_Base_SetConfig+0x138>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d003      	beq.n	8003f2a <TIM_Base_SetConfig+0xb2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a23      	ldr	r2, [pc, #140]	; (8003fb4 <TIM_Base_SetConfig+0x13c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d108      	bne.n	8003f3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a0a      	ldr	r2, [pc, #40]	; (8003f8c <TIM_Base_SetConfig+0x114>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d003      	beq.n	8003f70 <TIM_Base_SetConfig+0xf8>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a0c      	ldr	r2, [pc, #48]	; (8003f9c <TIM_Base_SetConfig+0x124>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d103      	bne.n	8003f78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	691a      	ldr	r2, [r3, #16]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	615a      	str	r2, [r3, #20]
}
 8003f7e:	bf00      	nop
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	40010000 	.word	0x40010000
 8003f90:	40000400 	.word	0x40000400
 8003f94:	40000800 	.word	0x40000800
 8003f98:	40000c00 	.word	0x40000c00
 8003f9c:	40010400 	.word	0x40010400
 8003fa0:	40014000 	.word	0x40014000
 8003fa4:	40014400 	.word	0x40014400
 8003fa8:	40014800 	.word	0x40014800
 8003fac:	40001800 	.word	0x40001800
 8003fb0:	40001c00 	.word	0x40001c00
 8003fb4:	40002000 	.word	0x40002000

08003fb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	f023 0201 	bic.w	r2, r3, #1
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f023 0303 	bic.w	r3, r3, #3
 8003fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f023 0302 	bic.w	r3, r3, #2
 8004000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	4313      	orrs	r3, r2
 800400a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a20      	ldr	r2, [pc, #128]	; (8004090 <TIM_OC1_SetConfig+0xd8>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d003      	beq.n	800401c <TIM_OC1_SetConfig+0x64>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a1f      	ldr	r2, [pc, #124]	; (8004094 <TIM_OC1_SetConfig+0xdc>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d10c      	bne.n	8004036 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f023 0308 	bic.w	r3, r3, #8
 8004022:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	4313      	orrs	r3, r2
 800402c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f023 0304 	bic.w	r3, r3, #4
 8004034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a15      	ldr	r2, [pc, #84]	; (8004090 <TIM_OC1_SetConfig+0xd8>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d003      	beq.n	8004046 <TIM_OC1_SetConfig+0x8e>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a14      	ldr	r2, [pc, #80]	; (8004094 <TIM_OC1_SetConfig+0xdc>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d111      	bne.n	800406a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800404c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	4313      	orrs	r3, r2
 800405e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	4313      	orrs	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	621a      	str	r2, [r3, #32]
}
 8004084:	bf00      	nop
 8004086:	371c      	adds	r7, #28
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	40010000 	.word	0x40010000
 8004094:	40010400 	.word	0x40010400

08004098 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004098:	b480      	push	{r7}
 800409a:	b087      	sub	sp, #28
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	f023 0210 	bic.w	r2, r3, #16
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	021b      	lsls	r3, r3, #8
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	4313      	orrs	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f023 0320 	bic.w	r3, r3, #32
 80040e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a22      	ldr	r2, [pc, #136]	; (800417c <TIM_OC2_SetConfig+0xe4>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d003      	beq.n	8004100 <TIM_OC2_SetConfig+0x68>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a21      	ldr	r2, [pc, #132]	; (8004180 <TIM_OC2_SetConfig+0xe8>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d10d      	bne.n	800411c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004106:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	4313      	orrs	r3, r2
 8004112:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800411a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a17      	ldr	r2, [pc, #92]	; (800417c <TIM_OC2_SetConfig+0xe4>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d003      	beq.n	800412c <TIM_OC2_SetConfig+0x94>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a16      	ldr	r2, [pc, #88]	; (8004180 <TIM_OC2_SetConfig+0xe8>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d113      	bne.n	8004154 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004132:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800413a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4313      	orrs	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	621a      	str	r2, [r3, #32]
}
 800416e:	bf00      	nop
 8004170:	371c      	adds	r7, #28
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	40010000 	.word	0x40010000
 8004180:	40010400 	.word	0x40010400

08004184 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f023 0303 	bic.w	r3, r3, #3
 80041ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	021b      	lsls	r3, r3, #8
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a21      	ldr	r2, [pc, #132]	; (8004264 <TIM_OC3_SetConfig+0xe0>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d003      	beq.n	80041ea <TIM_OC3_SetConfig+0x66>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a20      	ldr	r2, [pc, #128]	; (8004268 <TIM_OC3_SetConfig+0xe4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d10d      	bne.n	8004206 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	021b      	lsls	r3, r3, #8
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004204:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a16      	ldr	r2, [pc, #88]	; (8004264 <TIM_OC3_SetConfig+0xe0>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d003      	beq.n	8004216 <TIM_OC3_SetConfig+0x92>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a15      	ldr	r2, [pc, #84]	; (8004268 <TIM_OC3_SetConfig+0xe4>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d113      	bne.n	800423e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800421c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	011b      	lsls	r3, r3, #4
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	4313      	orrs	r3, r2
 8004230:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4313      	orrs	r3, r2
 800423c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	621a      	str	r2, [r3, #32]
}
 8004258:	bf00      	nop
 800425a:	371c      	adds	r7, #28
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	40010000 	.word	0x40010000
 8004268:	40010400 	.word	0x40010400

0800426c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800426c:	b480      	push	{r7}
 800426e:	b087      	sub	sp, #28
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800429a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	021b      	lsls	r3, r3, #8
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	031b      	lsls	r3, r3, #12
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a12      	ldr	r2, [pc, #72]	; (8004310 <TIM_OC4_SetConfig+0xa4>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d003      	beq.n	80042d4 <TIM_OC4_SetConfig+0x68>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a11      	ldr	r2, [pc, #68]	; (8004314 <TIM_OC4_SetConfig+0xa8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d109      	bne.n	80042e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	019b      	lsls	r3, r3, #6
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	621a      	str	r2, [r3, #32]
}
 8004302:	bf00      	nop
 8004304:	371c      	adds	r7, #28
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	40010000 	.word	0x40010000
 8004314:	40010400 	.word	0x40010400

08004318 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f003 031f 	and.w	r3, r3, #31
 800432a:	2201      	movs	r2, #1
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a1a      	ldr	r2, [r3, #32]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	43db      	mvns	r3, r3
 800433a:	401a      	ands	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a1a      	ldr	r2, [r3, #32]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f003 031f 	and.w	r3, r3, #31
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	fa01 f303 	lsl.w	r3, r1, r3
 8004350:	431a      	orrs	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	621a      	str	r2, [r3, #32]
}
 8004356:	bf00      	nop
 8004358:	371c      	adds	r7, #28
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
	...

08004364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004378:	2302      	movs	r3, #2
 800437a:	e05a      	b.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a21      	ldr	r2, [pc, #132]	; (8004440 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d022      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c8:	d01d      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a1d      	ldr	r2, [pc, #116]	; (8004444 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d018      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a1b      	ldr	r2, [pc, #108]	; (8004448 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d013      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a1a      	ldr	r2, [pc, #104]	; (800444c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d00e      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a18      	ldr	r2, [pc, #96]	; (8004450 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d009      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a17      	ldr	r2, [pc, #92]	; (8004454 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d004      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a15      	ldr	r2, [pc, #84]	; (8004458 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d10c      	bne.n	8004420 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800440c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	4313      	orrs	r3, r2
 8004416:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	40010000 	.word	0x40010000
 8004444:	40000400 	.word	0x40000400
 8004448:	40000800 	.word	0x40000800
 800444c:	40000c00 	.word	0x40000c00
 8004450:	40010400 	.word	0x40010400
 8004454:	40014000 	.word	0x40014000
 8004458:	40001800 	.word	0x40001800

0800445c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004462:	4b8d      	ldr	r3, [pc, #564]	; (8004698 <MX_LWIP_Init+0x23c>)
 8004464:	22c0      	movs	r2, #192	; 0xc0
 8004466:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004468:	4b8b      	ldr	r3, [pc, #556]	; (8004698 <MX_LWIP_Init+0x23c>)
 800446a:	22a8      	movs	r2, #168	; 0xa8
 800446c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800446e:	4b8a      	ldr	r3, [pc, #552]	; (8004698 <MX_LWIP_Init+0x23c>)
 8004470:	2200      	movs	r2, #0
 8004472:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 12;
 8004474:	4b88      	ldr	r3, [pc, #544]	; (8004698 <MX_LWIP_Init+0x23c>)
 8004476:	220c      	movs	r2, #12
 8004478:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800447a:	4b88      	ldr	r3, [pc, #544]	; (800469c <MX_LWIP_Init+0x240>)
 800447c:	22ff      	movs	r2, #255	; 0xff
 800447e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004480:	4b86      	ldr	r3, [pc, #536]	; (800469c <MX_LWIP_Init+0x240>)
 8004482:	22ff      	movs	r2, #255	; 0xff
 8004484:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004486:	4b85      	ldr	r3, [pc, #532]	; (800469c <MX_LWIP_Init+0x240>)
 8004488:	22ff      	movs	r2, #255	; 0xff
 800448a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800448c:	4b83      	ldr	r3, [pc, #524]	; (800469c <MX_LWIP_Init+0x240>)
 800448e:	2200      	movs	r2, #0
 8004490:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004492:	4b83      	ldr	r3, [pc, #524]	; (80046a0 <MX_LWIP_Init+0x244>)
 8004494:	22c0      	movs	r2, #192	; 0xc0
 8004496:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004498:	4b81      	ldr	r3, [pc, #516]	; (80046a0 <MX_LWIP_Init+0x244>)
 800449a:	22a8      	movs	r2, #168	; 0xa8
 800449c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800449e:	4b80      	ldr	r3, [pc, #512]	; (80046a0 <MX_LWIP_Init+0x244>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80044a4:	4b7e      	ldr	r3, [pc, #504]	; (80046a0 <MX_LWIP_Init+0x244>)
 80044a6:	2201      	movs	r2, #1
 80044a8:	70da      	strb	r2, [r3, #3]

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80044aa:	f000 fcdd 	bl	8004e68 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80044ae:	4b7a      	ldr	r3, [pc, #488]	; (8004698 <MX_LWIP_Init+0x23c>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	061a      	lsls	r2, r3, #24
 80044b4:	4b78      	ldr	r3, [pc, #480]	; (8004698 <MX_LWIP_Init+0x23c>)
 80044b6:	785b      	ldrb	r3, [r3, #1]
 80044b8:	041b      	lsls	r3, r3, #16
 80044ba:	431a      	orrs	r2, r3
 80044bc:	4b76      	ldr	r3, [pc, #472]	; (8004698 <MX_LWIP_Init+0x23c>)
 80044be:	789b      	ldrb	r3, [r3, #2]
 80044c0:	021b      	lsls	r3, r3, #8
 80044c2:	4313      	orrs	r3, r2
 80044c4:	4a74      	ldr	r2, [pc, #464]	; (8004698 <MX_LWIP_Init+0x23c>)
 80044c6:	78d2      	ldrb	r2, [r2, #3]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	061a      	lsls	r2, r3, #24
 80044cc:	4b72      	ldr	r3, [pc, #456]	; (8004698 <MX_LWIP_Init+0x23c>)
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	0619      	lsls	r1, r3, #24
 80044d2:	4b71      	ldr	r3, [pc, #452]	; (8004698 <MX_LWIP_Init+0x23c>)
 80044d4:	785b      	ldrb	r3, [r3, #1]
 80044d6:	041b      	lsls	r3, r3, #16
 80044d8:	4319      	orrs	r1, r3
 80044da:	4b6f      	ldr	r3, [pc, #444]	; (8004698 <MX_LWIP_Init+0x23c>)
 80044dc:	789b      	ldrb	r3, [r3, #2]
 80044de:	021b      	lsls	r3, r3, #8
 80044e0:	430b      	orrs	r3, r1
 80044e2:	496d      	ldr	r1, [pc, #436]	; (8004698 <MX_LWIP_Init+0x23c>)
 80044e4:	78c9      	ldrb	r1, [r1, #3]
 80044e6:	430b      	orrs	r3, r1
 80044e8:	021b      	lsls	r3, r3, #8
 80044ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80044ee:	431a      	orrs	r2, r3
 80044f0:	4b69      	ldr	r3, [pc, #420]	; (8004698 <MX_LWIP_Init+0x23c>)
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	0619      	lsls	r1, r3, #24
 80044f6:	4b68      	ldr	r3, [pc, #416]	; (8004698 <MX_LWIP_Init+0x23c>)
 80044f8:	785b      	ldrb	r3, [r3, #1]
 80044fa:	041b      	lsls	r3, r3, #16
 80044fc:	4319      	orrs	r1, r3
 80044fe:	4b66      	ldr	r3, [pc, #408]	; (8004698 <MX_LWIP_Init+0x23c>)
 8004500:	789b      	ldrb	r3, [r3, #2]
 8004502:	021b      	lsls	r3, r3, #8
 8004504:	430b      	orrs	r3, r1
 8004506:	4964      	ldr	r1, [pc, #400]	; (8004698 <MX_LWIP_Init+0x23c>)
 8004508:	78c9      	ldrb	r1, [r1, #3]
 800450a:	430b      	orrs	r3, r1
 800450c:	0a1b      	lsrs	r3, r3, #8
 800450e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004512:	431a      	orrs	r2, r3
 8004514:	4b60      	ldr	r3, [pc, #384]	; (8004698 <MX_LWIP_Init+0x23c>)
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	0619      	lsls	r1, r3, #24
 800451a:	4b5f      	ldr	r3, [pc, #380]	; (8004698 <MX_LWIP_Init+0x23c>)
 800451c:	785b      	ldrb	r3, [r3, #1]
 800451e:	041b      	lsls	r3, r3, #16
 8004520:	4319      	orrs	r1, r3
 8004522:	4b5d      	ldr	r3, [pc, #372]	; (8004698 <MX_LWIP_Init+0x23c>)
 8004524:	789b      	ldrb	r3, [r3, #2]
 8004526:	021b      	lsls	r3, r3, #8
 8004528:	430b      	orrs	r3, r1
 800452a:	495b      	ldr	r1, [pc, #364]	; (8004698 <MX_LWIP_Init+0x23c>)
 800452c:	78c9      	ldrb	r1, [r1, #3]
 800452e:	430b      	orrs	r3, r1
 8004530:	0e1b      	lsrs	r3, r3, #24
 8004532:	4313      	orrs	r3, r2
 8004534:	4a5b      	ldr	r2, [pc, #364]	; (80046a4 <MX_LWIP_Init+0x248>)
 8004536:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004538:	4b58      	ldr	r3, [pc, #352]	; (800469c <MX_LWIP_Init+0x240>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	061a      	lsls	r2, r3, #24
 800453e:	4b57      	ldr	r3, [pc, #348]	; (800469c <MX_LWIP_Init+0x240>)
 8004540:	785b      	ldrb	r3, [r3, #1]
 8004542:	041b      	lsls	r3, r3, #16
 8004544:	431a      	orrs	r2, r3
 8004546:	4b55      	ldr	r3, [pc, #340]	; (800469c <MX_LWIP_Init+0x240>)
 8004548:	789b      	ldrb	r3, [r3, #2]
 800454a:	021b      	lsls	r3, r3, #8
 800454c:	4313      	orrs	r3, r2
 800454e:	4a53      	ldr	r2, [pc, #332]	; (800469c <MX_LWIP_Init+0x240>)
 8004550:	78d2      	ldrb	r2, [r2, #3]
 8004552:	4313      	orrs	r3, r2
 8004554:	061a      	lsls	r2, r3, #24
 8004556:	4b51      	ldr	r3, [pc, #324]	; (800469c <MX_LWIP_Init+0x240>)
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	0619      	lsls	r1, r3, #24
 800455c:	4b4f      	ldr	r3, [pc, #316]	; (800469c <MX_LWIP_Init+0x240>)
 800455e:	785b      	ldrb	r3, [r3, #1]
 8004560:	041b      	lsls	r3, r3, #16
 8004562:	4319      	orrs	r1, r3
 8004564:	4b4d      	ldr	r3, [pc, #308]	; (800469c <MX_LWIP_Init+0x240>)
 8004566:	789b      	ldrb	r3, [r3, #2]
 8004568:	021b      	lsls	r3, r3, #8
 800456a:	430b      	orrs	r3, r1
 800456c:	494b      	ldr	r1, [pc, #300]	; (800469c <MX_LWIP_Init+0x240>)
 800456e:	78c9      	ldrb	r1, [r1, #3]
 8004570:	430b      	orrs	r3, r1
 8004572:	021b      	lsls	r3, r3, #8
 8004574:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004578:	431a      	orrs	r2, r3
 800457a:	4b48      	ldr	r3, [pc, #288]	; (800469c <MX_LWIP_Init+0x240>)
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	0619      	lsls	r1, r3, #24
 8004580:	4b46      	ldr	r3, [pc, #280]	; (800469c <MX_LWIP_Init+0x240>)
 8004582:	785b      	ldrb	r3, [r3, #1]
 8004584:	041b      	lsls	r3, r3, #16
 8004586:	4319      	orrs	r1, r3
 8004588:	4b44      	ldr	r3, [pc, #272]	; (800469c <MX_LWIP_Init+0x240>)
 800458a:	789b      	ldrb	r3, [r3, #2]
 800458c:	021b      	lsls	r3, r3, #8
 800458e:	430b      	orrs	r3, r1
 8004590:	4942      	ldr	r1, [pc, #264]	; (800469c <MX_LWIP_Init+0x240>)
 8004592:	78c9      	ldrb	r1, [r1, #3]
 8004594:	430b      	orrs	r3, r1
 8004596:	0a1b      	lsrs	r3, r3, #8
 8004598:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800459c:	431a      	orrs	r2, r3
 800459e:	4b3f      	ldr	r3, [pc, #252]	; (800469c <MX_LWIP_Init+0x240>)
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	0619      	lsls	r1, r3, #24
 80045a4:	4b3d      	ldr	r3, [pc, #244]	; (800469c <MX_LWIP_Init+0x240>)
 80045a6:	785b      	ldrb	r3, [r3, #1]
 80045a8:	041b      	lsls	r3, r3, #16
 80045aa:	4319      	orrs	r1, r3
 80045ac:	4b3b      	ldr	r3, [pc, #236]	; (800469c <MX_LWIP_Init+0x240>)
 80045ae:	789b      	ldrb	r3, [r3, #2]
 80045b0:	021b      	lsls	r3, r3, #8
 80045b2:	430b      	orrs	r3, r1
 80045b4:	4939      	ldr	r1, [pc, #228]	; (800469c <MX_LWIP_Init+0x240>)
 80045b6:	78c9      	ldrb	r1, [r1, #3]
 80045b8:	430b      	orrs	r3, r1
 80045ba:	0e1b      	lsrs	r3, r3, #24
 80045bc:	4313      	orrs	r3, r2
 80045be:	4a3a      	ldr	r2, [pc, #232]	; (80046a8 <MX_LWIP_Init+0x24c>)
 80045c0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80045c2:	4b37      	ldr	r3, [pc, #220]	; (80046a0 <MX_LWIP_Init+0x244>)
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	061a      	lsls	r2, r3, #24
 80045c8:	4b35      	ldr	r3, [pc, #212]	; (80046a0 <MX_LWIP_Init+0x244>)
 80045ca:	785b      	ldrb	r3, [r3, #1]
 80045cc:	041b      	lsls	r3, r3, #16
 80045ce:	431a      	orrs	r2, r3
 80045d0:	4b33      	ldr	r3, [pc, #204]	; (80046a0 <MX_LWIP_Init+0x244>)
 80045d2:	789b      	ldrb	r3, [r3, #2]
 80045d4:	021b      	lsls	r3, r3, #8
 80045d6:	4313      	orrs	r3, r2
 80045d8:	4a31      	ldr	r2, [pc, #196]	; (80046a0 <MX_LWIP_Init+0x244>)
 80045da:	78d2      	ldrb	r2, [r2, #3]
 80045dc:	4313      	orrs	r3, r2
 80045de:	061a      	lsls	r2, r3, #24
 80045e0:	4b2f      	ldr	r3, [pc, #188]	; (80046a0 <MX_LWIP_Init+0x244>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	0619      	lsls	r1, r3, #24
 80045e6:	4b2e      	ldr	r3, [pc, #184]	; (80046a0 <MX_LWIP_Init+0x244>)
 80045e8:	785b      	ldrb	r3, [r3, #1]
 80045ea:	041b      	lsls	r3, r3, #16
 80045ec:	4319      	orrs	r1, r3
 80045ee:	4b2c      	ldr	r3, [pc, #176]	; (80046a0 <MX_LWIP_Init+0x244>)
 80045f0:	789b      	ldrb	r3, [r3, #2]
 80045f2:	021b      	lsls	r3, r3, #8
 80045f4:	430b      	orrs	r3, r1
 80045f6:	492a      	ldr	r1, [pc, #168]	; (80046a0 <MX_LWIP_Init+0x244>)
 80045f8:	78c9      	ldrb	r1, [r1, #3]
 80045fa:	430b      	orrs	r3, r1
 80045fc:	021b      	lsls	r3, r3, #8
 80045fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004602:	431a      	orrs	r2, r3
 8004604:	4b26      	ldr	r3, [pc, #152]	; (80046a0 <MX_LWIP_Init+0x244>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	0619      	lsls	r1, r3, #24
 800460a:	4b25      	ldr	r3, [pc, #148]	; (80046a0 <MX_LWIP_Init+0x244>)
 800460c:	785b      	ldrb	r3, [r3, #1]
 800460e:	041b      	lsls	r3, r3, #16
 8004610:	4319      	orrs	r1, r3
 8004612:	4b23      	ldr	r3, [pc, #140]	; (80046a0 <MX_LWIP_Init+0x244>)
 8004614:	789b      	ldrb	r3, [r3, #2]
 8004616:	021b      	lsls	r3, r3, #8
 8004618:	430b      	orrs	r3, r1
 800461a:	4921      	ldr	r1, [pc, #132]	; (80046a0 <MX_LWIP_Init+0x244>)
 800461c:	78c9      	ldrb	r1, [r1, #3]
 800461e:	430b      	orrs	r3, r1
 8004620:	0a1b      	lsrs	r3, r3, #8
 8004622:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004626:	431a      	orrs	r2, r3
 8004628:	4b1d      	ldr	r3, [pc, #116]	; (80046a0 <MX_LWIP_Init+0x244>)
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	0619      	lsls	r1, r3, #24
 800462e:	4b1c      	ldr	r3, [pc, #112]	; (80046a0 <MX_LWIP_Init+0x244>)
 8004630:	785b      	ldrb	r3, [r3, #1]
 8004632:	041b      	lsls	r3, r3, #16
 8004634:	4319      	orrs	r1, r3
 8004636:	4b1a      	ldr	r3, [pc, #104]	; (80046a0 <MX_LWIP_Init+0x244>)
 8004638:	789b      	ldrb	r3, [r3, #2]
 800463a:	021b      	lsls	r3, r3, #8
 800463c:	430b      	orrs	r3, r1
 800463e:	4918      	ldr	r1, [pc, #96]	; (80046a0 <MX_LWIP_Init+0x244>)
 8004640:	78c9      	ldrb	r1, [r1, #3]
 8004642:	430b      	orrs	r3, r1
 8004644:	0e1b      	lsrs	r3, r3, #24
 8004646:	4313      	orrs	r3, r2
 8004648:	4a18      	ldr	r2, [pc, #96]	; (80046ac <MX_LWIP_Init+0x250>)
 800464a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800464c:	4b18      	ldr	r3, [pc, #96]	; (80046b0 <MX_LWIP_Init+0x254>)
 800464e:	9302      	str	r3, [sp, #8]
 8004650:	4b18      	ldr	r3, [pc, #96]	; (80046b4 <MX_LWIP_Init+0x258>)
 8004652:	9301      	str	r3, [sp, #4]
 8004654:	2300      	movs	r3, #0
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	4b14      	ldr	r3, [pc, #80]	; (80046ac <MX_LWIP_Init+0x250>)
 800465a:	4a13      	ldr	r2, [pc, #76]	; (80046a8 <MX_LWIP_Init+0x24c>)
 800465c:	4911      	ldr	r1, [pc, #68]	; (80046a4 <MX_LWIP_Init+0x248>)
 800465e:	4816      	ldr	r0, [pc, #88]	; (80046b8 <MX_LWIP_Init+0x25c>)
 8004660:	f001 f8a8 	bl	80057b4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004664:	4814      	ldr	r0, [pc, #80]	; (80046b8 <MX_LWIP_Init+0x25c>)
 8004666:	f001 fa57 	bl	8005b18 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800466a:	4b13      	ldr	r3, [pc, #76]	; (80046b8 <MX_LWIP_Init+0x25c>)
 800466c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004670:	089b      	lsrs	r3, r3, #2
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800467c:	480e      	ldr	r0, [pc, #56]	; (80046b8 <MX_LWIP_Init+0x25c>)
 800467e:	f001 fa5b 	bl	8005b38 <netif_set_up>
 8004682:	e002      	b.n	800468a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004684:	480c      	ldr	r0, [pc, #48]	; (80046b8 <MX_LWIP_Init+0x25c>)
 8004686:	f001 fac3 	bl	8005c10 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800468a:	490c      	ldr	r1, [pc, #48]	; (80046bc <MX_LWIP_Init+0x260>)
 800468c:	480a      	ldr	r0, [pc, #40]	; (80046b8 <MX_LWIP_Init+0x25c>)
 800468e:	f001 faf1 	bl	8005c74 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004692:	bf00      	nop
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	20000300 	.word	0x20000300
 800469c:	200002fc 	.word	0x200002fc
 80046a0:	200002f4 	.word	0x200002f4
 80046a4:	200002f8 	.word	0x200002f8
 80046a8:	20000304 	.word	0x20000304
 80046ac:	20000308 	.word	0x20000308
 80046b0:	0800f451 	.word	0x0800f451
 80046b4:	08004c95 	.word	0x08004c95
 80046b8:	20000258 	.word	0x20000258
 80046bc:	08004d01 	.word	0x08004d01

080046c0 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80046c4:	4803      	ldr	r0, [pc, #12]	; (80046d4 <MX_LWIP_Process+0x14>)
 80046c6:	f000 fac5 	bl	8004c54 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80046ca:	f008 fadb 	bl	800cc84 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80046ce:	bf00      	nop
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	20000258 	.word	0x20000258

080046d8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b08e      	sub	sp, #56	; 0x38
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	605a      	str	r2, [r3, #4]
 80046ea:	609a      	str	r2, [r3, #8]
 80046ec:	60da      	str	r2, [r3, #12]
 80046ee:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a55      	ldr	r2, [pc, #340]	; (800484c <HAL_ETH_MspInit+0x174>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	f040 80a4 	bne.w	8004844 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80046fc:	2300      	movs	r3, #0
 80046fe:	623b      	str	r3, [r7, #32]
 8004700:	4b53      	ldr	r3, [pc, #332]	; (8004850 <HAL_ETH_MspInit+0x178>)
 8004702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004704:	4a52      	ldr	r2, [pc, #328]	; (8004850 <HAL_ETH_MspInit+0x178>)
 8004706:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800470a:	6313      	str	r3, [r2, #48]	; 0x30
 800470c:	4b50      	ldr	r3, [pc, #320]	; (8004850 <HAL_ETH_MspInit+0x178>)
 800470e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004714:	623b      	str	r3, [r7, #32]
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	2300      	movs	r3, #0
 800471a:	61fb      	str	r3, [r7, #28]
 800471c:	4b4c      	ldr	r3, [pc, #304]	; (8004850 <HAL_ETH_MspInit+0x178>)
 800471e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004720:	4a4b      	ldr	r2, [pc, #300]	; (8004850 <HAL_ETH_MspInit+0x178>)
 8004722:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004726:	6313      	str	r3, [r2, #48]	; 0x30
 8004728:	4b49      	ldr	r3, [pc, #292]	; (8004850 <HAL_ETH_MspInit+0x178>)
 800472a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004730:	61fb      	str	r3, [r7, #28]
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	2300      	movs	r3, #0
 8004736:	61bb      	str	r3, [r7, #24]
 8004738:	4b45      	ldr	r3, [pc, #276]	; (8004850 <HAL_ETH_MspInit+0x178>)
 800473a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473c:	4a44      	ldr	r2, [pc, #272]	; (8004850 <HAL_ETH_MspInit+0x178>)
 800473e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004742:	6313      	str	r3, [r2, #48]	; 0x30
 8004744:	4b42      	ldr	r3, [pc, #264]	; (8004850 <HAL_ETH_MspInit+0x178>)
 8004746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800474c:	61bb      	str	r3, [r7, #24]
 800474e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004750:	2300      	movs	r3, #0
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	4b3e      	ldr	r3, [pc, #248]	; (8004850 <HAL_ETH_MspInit+0x178>)
 8004756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004758:	4a3d      	ldr	r2, [pc, #244]	; (8004850 <HAL_ETH_MspInit+0x178>)
 800475a:	f043 0304 	orr.w	r3, r3, #4
 800475e:	6313      	str	r3, [r2, #48]	; 0x30
 8004760:	4b3b      	ldr	r3, [pc, #236]	; (8004850 <HAL_ETH_MspInit+0x178>)
 8004762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004764:	f003 0304 	and.w	r3, r3, #4
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800476c:	2300      	movs	r3, #0
 800476e:	613b      	str	r3, [r7, #16]
 8004770:	4b37      	ldr	r3, [pc, #220]	; (8004850 <HAL_ETH_MspInit+0x178>)
 8004772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004774:	4a36      	ldr	r2, [pc, #216]	; (8004850 <HAL_ETH_MspInit+0x178>)
 8004776:	f043 0301 	orr.w	r3, r3, #1
 800477a:	6313      	str	r3, [r2, #48]	; 0x30
 800477c:	4b34      	ldr	r3, [pc, #208]	; (8004850 <HAL_ETH_MspInit+0x178>)
 800477e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	613b      	str	r3, [r7, #16]
 8004786:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004788:	2300      	movs	r3, #0
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	4b30      	ldr	r3, [pc, #192]	; (8004850 <HAL_ETH_MspInit+0x178>)
 800478e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004790:	4a2f      	ldr	r2, [pc, #188]	; (8004850 <HAL_ETH_MspInit+0x178>)
 8004792:	f043 0302 	orr.w	r3, r3, #2
 8004796:	6313      	str	r3, [r2, #48]	; 0x30
 8004798:	4b2d      	ldr	r3, [pc, #180]	; (8004850 <HAL_ETH_MspInit+0x178>)
 800479a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80047a4:	2300      	movs	r3, #0
 80047a6:	60bb      	str	r3, [r7, #8]
 80047a8:	4b29      	ldr	r3, [pc, #164]	; (8004850 <HAL_ETH_MspInit+0x178>)
 80047aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ac:	4a28      	ldr	r2, [pc, #160]	; (8004850 <HAL_ETH_MspInit+0x178>)
 80047ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047b2:	6313      	str	r3, [r2, #48]	; 0x30
 80047b4:	4b26      	ldr	r3, [pc, #152]	; (8004850 <HAL_ETH_MspInit+0x178>)
 80047b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047bc:	60bb      	str	r3, [r7, #8]
 80047be:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80047c0:	2332      	movs	r3, #50	; 0x32
 80047c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047c4:	2302      	movs	r3, #2
 80047c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c8:	2300      	movs	r3, #0
 80047ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047cc:	2303      	movs	r3, #3
 80047ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80047d0:	230b      	movs	r3, #11
 80047d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047d8:	4619      	mov	r1, r3
 80047da:	481e      	ldr	r0, [pc, #120]	; (8004854 <HAL_ETH_MspInit+0x17c>)
 80047dc:	f7fe fbe2 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80047e0:	2386      	movs	r3, #134	; 0x86
 80047e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047e4:	2302      	movs	r3, #2
 80047e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e8:	2300      	movs	r3, #0
 80047ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047ec:	2303      	movs	r3, #3
 80047ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80047f0:	230b      	movs	r3, #11
 80047f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047f8:	4619      	mov	r1, r3
 80047fa:	4817      	ldr	r0, [pc, #92]	; (8004858 <HAL_ETH_MspInit+0x180>)
 80047fc:	f7fe fbd2 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004800:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004804:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004806:	2302      	movs	r3, #2
 8004808:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800480a:	2300      	movs	r3, #0
 800480c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800480e:	2303      	movs	r3, #3
 8004810:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004812:	230b      	movs	r3, #11
 8004814:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800481a:	4619      	mov	r1, r3
 800481c:	480f      	ldr	r0, [pc, #60]	; (800485c <HAL_ETH_MspInit+0x184>)
 800481e:	f7fe fbc1 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8004822:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004826:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004828:	2302      	movs	r3, #2
 800482a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800482c:	2300      	movs	r3, #0
 800482e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004830:	2303      	movs	r3, #3
 8004832:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004834:	230b      	movs	r3, #11
 8004836:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800483c:	4619      	mov	r1, r3
 800483e:	4808      	ldr	r0, [pc, #32]	; (8004860 <HAL_ETH_MspInit+0x188>)
 8004840:	f7fe fbb0 	bl	8002fa4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004844:	bf00      	nop
 8004846:	3738      	adds	r7, #56	; 0x38
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40028000 	.word	0x40028000
 8004850:	40023800 	.word	0x40023800
 8004854:	40020800 	.word	0x40020800
 8004858:	40020000 	.word	0x40020000
 800485c:	40020400 	.word	0x40020400
 8004860:	40021800 	.word	0x40021800

08004864 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800486c:	2300      	movs	r3, #0
 800486e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004870:	4b49      	ldr	r3, [pc, #292]	; (8004998 <low_level_init+0x134>)
 8004872:	4a4a      	ldr	r2, [pc, #296]	; (800499c <low_level_init+0x138>)
 8004874:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004876:	4b48      	ldr	r3, [pc, #288]	; (8004998 <low_level_init+0x134>)
 8004878:	2201      	movs	r2, #1
 800487a:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800487c:	4b46      	ldr	r3, [pc, #280]	; (8004998 <low_level_init+0x134>)
 800487e:	2200      	movs	r2, #0
 8004880:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004882:	2300      	movs	r3, #0
 8004884:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004886:	2380      	movs	r3, #128	; 0x80
 8004888:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800488a:	23e1      	movs	r3, #225	; 0xe1
 800488c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800488e:	2300      	movs	r3, #0
 8004890:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004892:	2300      	movs	r3, #0
 8004894:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004896:	2300      	movs	r3, #0
 8004898:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800489a:	4a3f      	ldr	r2, [pc, #252]	; (8004998 <low_level_init+0x134>)
 800489c:	f107 0308 	add.w	r3, r7, #8
 80048a0:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80048a2:	4b3d      	ldr	r3, [pc, #244]	; (8004998 <low_level_init+0x134>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80048a8:	4b3b      	ldr	r3, [pc, #236]	; (8004998 <low_level_init+0x134>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80048ae:	4b3a      	ldr	r3, [pc, #232]	; (8004998 <low_level_init+0x134>)
 80048b0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80048b4:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80048b6:	4838      	ldr	r0, [pc, #224]	; (8004998 <low_level_init+0x134>)
 80048b8:	f7fd fa4e 	bl	8001d58 <HAL_ETH_Init>
 80048bc:	4603      	mov	r3, r0
 80048be:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 80048c0:	7dfb      	ldrb	r3, [r7, #23]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d108      	bne.n	80048d8 <low_level_init+0x74>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80048cc:	f043 0304 	orr.w	r3, r3, #4
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80048d8:	2304      	movs	r3, #4
 80048da:	4a31      	ldr	r2, [pc, #196]	; (80049a0 <low_level_init+0x13c>)
 80048dc:	4931      	ldr	r1, [pc, #196]	; (80049a4 <low_level_init+0x140>)
 80048de:	482e      	ldr	r0, [pc, #184]	; (8004998 <low_level_init+0x134>)
 80048e0:	f7fd fbd6 	bl	8002090 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80048e4:	2304      	movs	r3, #4
 80048e6:	4a30      	ldr	r2, [pc, #192]	; (80049a8 <low_level_init+0x144>)
 80048e8:	4930      	ldr	r1, [pc, #192]	; (80049ac <low_level_init+0x148>)
 80048ea:	482b      	ldr	r0, [pc, #172]	; (8004998 <low_level_init+0x134>)
 80048ec:	f7fd fc39 	bl	8002162 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2206      	movs	r2, #6
 80048f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80048f8:	4b27      	ldr	r3, [pc, #156]	; (8004998 <low_level_init+0x134>)
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	781a      	ldrb	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004904:	4b24      	ldr	r3, [pc, #144]	; (8004998 <low_level_init+0x134>)
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	785a      	ldrb	r2, [r3, #1]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004910:	4b21      	ldr	r3, [pc, #132]	; (8004998 <low_level_init+0x134>)
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	789a      	ldrb	r2, [r3, #2]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800491c:	4b1e      	ldr	r3, [pc, #120]	; (8004998 <low_level_init+0x134>)
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	78da      	ldrb	r2, [r3, #3]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004928:	4b1b      	ldr	r3, [pc, #108]	; (8004998 <low_level_init+0x134>)
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	791a      	ldrb	r2, [r3, #4]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004934:	4b18      	ldr	r3, [pc, #96]	; (8004998 <low_level_init+0x134>)
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	795a      	ldrb	r2, [r3, #5]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004946:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800494e:	f043 030a 	orr.w	r3, r3, #10
 8004952:	b2da      	uxtb	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800495a:	480f      	ldr	r0, [pc, #60]	; (8004998 <low_level_init+0x134>)
 800495c:	f7fd feaa 	bl	80026b4 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004960:	f107 0310 	add.w	r3, r7, #16
 8004964:	461a      	mov	r2, r3
 8004966:	211d      	movs	r1, #29
 8004968:	480b      	ldr	r0, [pc, #44]	; (8004998 <low_level_init+0x134>)
 800496a:	f7fd fdd5 	bl	8002518 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	f043 030b 	orr.w	r3, r3, #11
 8004974:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	461a      	mov	r2, r3
 800497a:	211d      	movs	r1, #29
 800497c:	4806      	ldr	r0, [pc, #24]	; (8004998 <low_level_init+0x134>)
 800497e:	f7fd fe33 	bl	80025e8 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004982:	f107 0310 	add.w	r3, r7, #16
 8004986:	461a      	mov	r2, r3
 8004988:	211d      	movs	r1, #29
 800498a:	4803      	ldr	r0, [pc, #12]	; (8004998 <low_level_init+0x134>)
 800498c:	f7fd fdc4 	bl	8002518 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004990:	bf00      	nop
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	20001bdc 	.word	0x20001bdc
 800499c:	40028000 	.word	0x40028000
 80049a0:	20001c24 	.word	0x20001c24
 80049a4:	2000030c 	.word	0x2000030c
 80049a8:	2000038c 	.word	0x2000038c
 80049ac:	20001b5c 	.word	0x20001b5c

080049b0 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08a      	sub	sp, #40	; 0x28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80049ba:	4b4b      	ldr	r3, [pc, #300]	; (8004ae8 <low_level_output+0x138>)
 80049bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80049c2:	2300      	movs	r3, #0
 80049c4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80049c6:	2300      	movs	r3, #0
 80049c8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80049ce:	2300      	movs	r3, #0
 80049d0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80049d2:	4b45      	ldr	r3, [pc, #276]	; (8004ae8 <low_level_output+0x138>)
 80049d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80049d8:	2300      	movs	r3, #0
 80049da:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	623b      	str	r3, [r7, #32]
 80049e0:	e05a      	b.n	8004a98 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	da03      	bge.n	80049f2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80049ea:	23f8      	movs	r3, #248	; 0xf8
 80049ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80049f0:	e05c      	b.n	8004aac <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80049f2:	6a3b      	ldr	r3, [r7, #32]
 80049f4:	895b      	ldrh	r3, [r3, #10]
 80049f6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80049f8:	2300      	movs	r3, #0
 80049fa:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80049fc:	e02f      	b.n	8004a5e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80049fe:	69fa      	ldr	r2, [r7, #28]
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	18d0      	adds	r0, r2, r3
 8004a04:	6a3b      	ldr	r3, [r7, #32]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	18d1      	adds	r1, r2, r3
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004a12:	3304      	adds	r3, #4
 8004a14:	461a      	mov	r2, r3
 8004a16:	f00a fe23 	bl	800f660 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	da03      	bge.n	8004a30 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004a28:	23f8      	movs	r3, #248	; 0xf8
 8004a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004a2e:	e03d      	b.n	8004aac <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004a40:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004a4c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004a58:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	4413      	add	r3, r2
 8004a64:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d8c8      	bhi.n	80049fe <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004a6c:	69fa      	ldr	r2, [r7, #28]
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	18d0      	adds	r0, r2, r3
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	4413      	add	r3, r2
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	f00a fdef 	bl	800f660 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4413      	add	r3, r2
 8004a88:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4413      	add	r3, r2
 8004a90:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	623b      	str	r3, [r7, #32]
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1a1      	bne.n	80049e2 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004a9e:	6979      	ldr	r1, [r7, #20]
 8004aa0:	4811      	ldr	r0, [pc, #68]	; (8004ae8 <low_level_output+0x138>)
 8004aa2:	f7fd fbcb 	bl	800223c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004aac:	4b0e      	ldr	r3, [pc, #56]	; (8004ae8 <low_level_output+0x138>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ab4:	3314      	adds	r3, #20
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0320 	and.w	r3, r3, #32
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00d      	beq.n	8004adc <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004ac0:	4b09      	ldr	r3, [pc, #36]	; (8004ae8 <low_level_output+0x138>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ac8:	3314      	adds	r3, #20
 8004aca:	2220      	movs	r2, #32
 8004acc:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004ace:	4b06      	ldr	r3, [pc, #24]	; (8004ae8 <low_level_output+0x138>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ad6:	3304      	adds	r3, #4
 8004ad8:	2200      	movs	r2, #0
 8004ada:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004adc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3728      	adds	r7, #40	; 0x28
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	20001bdc 	.word	0x20001bdc

08004aec <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b08c      	sub	sp, #48	; 0x30
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004af4:	2300      	movs	r3, #0
 8004af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004af8:	2300      	movs	r3, #0
 8004afa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004afc:	2300      	movs	r3, #0
 8004afe:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004b00:	2300      	movs	r3, #0
 8004b02:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004b04:	2300      	movs	r3, #0
 8004b06:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8004b10:	484f      	ldr	r0, [pc, #316]	; (8004c50 <low_level_input+0x164>)
 8004b12:	f7fd fc7d 	bl	8002410 <HAL_ETH_GetReceivedFrame>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <low_level_input+0x34>

    return NULL;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	e092      	b.n	8004c46 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004b20:	4b4b      	ldr	r3, [pc, #300]	; (8004c50 <low_level_input+0x164>)
 8004b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b24:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004b26:	4b4a      	ldr	r3, [pc, #296]	; (8004c50 <low_level_input+0x164>)
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8004b2c:	89fb      	ldrh	r3, [r7, #14]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d007      	beq.n	8004b42 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8004b32:	89fb      	ldrh	r3, [r7, #14]
 8004b34:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8004b38:	4619      	mov	r1, r3
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	f001 f936 	bl	8005dac <pbuf_alloc>
 8004b40:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8004b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d04b      	beq.n	8004be0 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004b48:	4b41      	ldr	r3, [pc, #260]	; (8004c50 <low_level_input+0x164>)
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b54:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b56:	e040      	b.n	8004bda <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8004b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5a:	895b      	ldrh	r3, [r3, #10]
 8004b5c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004b62:	e021      	b.n	8004ba8 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	18d0      	adds	r0, r2, r3
 8004b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	18d1      	adds	r1, r2, r3
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004b78:	3304      	adds	r3, #4
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	f00a fd70 	bl	800f660 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004b80:	6a3b      	ldr	r3, [r7, #32]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004b86:	6a3b      	ldr	r3, [r7, #32]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004b8c:	69fa      	ldr	r2, [r7, #28]
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	4413      	add	r3, r2
 8004b92:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004b96:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004ba2:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	4413      	add	r3, r2
 8004bae:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d8d6      	bhi.n	8004b64 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	18d0      	adds	r0, r2, r3
 8004bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	f00a fd4a 	bl	800f660 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004bcc:	69fa      	ldr	r2, [r7, #28]
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1bb      	bne.n	8004b58 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004be0:	4b1b      	ldr	r3, [pc, #108]	; (8004c50 <low_level_input+0x164>)
 8004be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be4:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004be6:	2300      	movs	r3, #0
 8004be8:	613b      	str	r3, [r7, #16]
 8004bea:	e00b      	b.n	8004c04 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	3301      	adds	r3, #1
 8004c02:	613b      	str	r3, [r7, #16]
 8004c04:	4b12      	ldr	r3, [pc, #72]	; (8004c50 <low_level_input+0x164>)
 8004c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d3ee      	bcc.n	8004bec <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8004c0e:	4b10      	ldr	r3, [pc, #64]	; (8004c50 <low_level_input+0x164>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8004c14:	4b0e      	ldr	r3, [pc, #56]	; (8004c50 <low_level_input+0x164>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c1c:	3314      	adds	r3, #20
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00d      	beq.n	8004c44 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004c28:	4b09      	ldr	r3, [pc, #36]	; (8004c50 <low_level_input+0x164>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c30:	3314      	adds	r3, #20
 8004c32:	2280      	movs	r2, #128	; 0x80
 8004c34:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004c36:	4b06      	ldr	r3, [pc, #24]	; (8004c50 <low_level_input+0x164>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c3e:	3308      	adds	r3, #8
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]
  }
  return p;
 8004c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3730      	adds	r7, #48	; 0x30
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20001bdc 	.word	0x20001bdc

08004c54 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7ff ff45 	bl	8004aec <low_level_input>
 8004c62:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d010      	beq.n	8004c8c <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	6879      	ldr	r1, [r7, #4]
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	4798      	blx	r3
 8004c74:	4603      	mov	r3, r0
 8004c76:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8004c78:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d006      	beq.n	8004c8e <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f001 fb77 	bl	8006374 <pbuf_free>
    p = NULL;
 8004c86:	2300      	movs	r3, #0
 8004c88:	60fb      	str	r3, [r7, #12]
 8004c8a:	e000      	b.n	8004c8e <ethernetif_input+0x3a>
  if (p == NULL) return;
 8004c8c:	bf00      	nop
  }
}
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d106      	bne.n	8004cb0 <ethernetif_init+0x1c>
 8004ca2:	4b0e      	ldr	r3, [pc, #56]	; (8004cdc <ethernetif_init+0x48>)
 8004ca4:	f240 220f 	movw	r2, #527	; 0x20f
 8004ca8:	490d      	ldr	r1, [pc, #52]	; (8004ce0 <ethernetif_init+0x4c>)
 8004caa:	480e      	ldr	r0, [pc, #56]	; (8004ce4 <ethernetif_init+0x50>)
 8004cac:	f00a fd08 	bl	800f6c0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2273      	movs	r2, #115	; 0x73
 8004cb4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2274      	movs	r2, #116	; 0x74
 8004cbc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a09      	ldr	r2, [pc, #36]	; (8004ce8 <ethernetif_init+0x54>)
 8004cc4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a08      	ldr	r2, [pc, #32]	; (8004cec <ethernetif_init+0x58>)
 8004cca:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7ff fdc9 	bl	8004864 <low_level_init>

  return ERR_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	08010b7c 	.word	0x08010b7c
 8004ce0:	08010b98 	.word	0x08010b98
 8004ce4:	08010ba8 	.word	0x08010ba8
 8004ce8:	0800d915 	.word	0x0800d915
 8004cec:	080049b1 	.word	0x080049b1

08004cf0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004cf4:	f7fc feee 	bl	8001ad4 <HAL_GetTick>
 8004cf8:	4603      	mov	r3, r0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	bd80      	pop	{r7, pc}
	...

08004d00 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004d16:	089b      	lsrs	r3, r3, #2
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d05d      	beq.n	8004dde <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004d22:	4b34      	ldr	r3, [pc, #208]	; (8004df4 <ethernetif_update_config+0xf4>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d03f      	beq.n	8004daa <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8004d2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d2e:	2100      	movs	r1, #0
 8004d30:	4830      	ldr	r0, [pc, #192]	; (8004df4 <ethernetif_update_config+0xf4>)
 8004d32:	f7fd fc59 	bl	80025e8 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8004d36:	f7fc fecd 	bl	8001ad4 <HAL_GetTick>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004d3e:	f107 0308 	add.w	r3, r7, #8
 8004d42:	461a      	mov	r2, r3
 8004d44:	2101      	movs	r1, #1
 8004d46:	482b      	ldr	r0, [pc, #172]	; (8004df4 <ethernetif_update_config+0xf4>)
 8004d48:	f7fd fbe6 	bl	8002518 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8004d4c:	f7fc fec2 	bl	8001ad4 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d5a:	d828      	bhi.n	8004dae <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	f003 0320 	and.w	r3, r3, #32
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0eb      	beq.n	8004d3e <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8004d66:	f107 0308 	add.w	r3, r7, #8
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	211f      	movs	r1, #31
 8004d6e:	4821      	ldr	r0, [pc, #132]	; (8004df4 <ethernetif_update_config+0xf4>)
 8004d70:	f7fd fbd2 	bl	8002518 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	f003 0310 	and.w	r3, r3, #16
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d004      	beq.n	8004d88 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004d7e:	4b1d      	ldr	r3, [pc, #116]	; (8004df4 <ethernetif_update_config+0xf4>)
 8004d80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d84:	60da      	str	r2, [r3, #12]
 8004d86:	e002      	b.n	8004d8e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8004d88:	4b1a      	ldr	r3, [pc, #104]	; (8004df4 <ethernetif_update_config+0xf4>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d003      	beq.n	8004da0 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8004d98:	4b16      	ldr	r3, [pc, #88]	; (8004df4 <ethernetif_update_config+0xf4>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	609a      	str	r2, [r3, #8]
 8004d9e:	e016      	b.n	8004dce <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8004da0:	4b14      	ldr	r3, [pc, #80]	; (8004df4 <ethernetif_update_config+0xf4>)
 8004da2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004da6:	609a      	str	r2, [r3, #8]
 8004da8:	e011      	b.n	8004dce <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8004daa:	bf00      	nop
 8004dac:	e000      	b.n	8004db0 <ethernetif_update_config+0xb0>
          goto error;
 8004dae:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004db0:	4b10      	ldr	r3, [pc, #64]	; (8004df4 <ethernetif_update_config+0xf4>)
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	08db      	lsrs	r3, r3, #3
 8004db6:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8004db8:	4b0e      	ldr	r3, [pc, #56]	; (8004df4 <ethernetif_update_config+0xf4>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	085b      	lsrs	r3, r3, #1
 8004dbe:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	480a      	ldr	r0, [pc, #40]	; (8004df4 <ethernetif_update_config+0xf4>)
 8004dca:	f7fd fc0d 	bl	80025e8 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8004dce:	2100      	movs	r1, #0
 8004dd0:	4808      	ldr	r0, [pc, #32]	; (8004df4 <ethernetif_update_config+0xf4>)
 8004dd2:	f7fd fccd 	bl	8002770 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8004dd6:	4807      	ldr	r0, [pc, #28]	; (8004df4 <ethernetif_update_config+0xf4>)
 8004dd8:	f7fd fc6c 	bl	80026b4 <HAL_ETH_Start>
 8004ddc:	e002      	b.n	8004de4 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8004dde:	4805      	ldr	r0, [pc, #20]	; (8004df4 <ethernetif_update_config+0xf4>)
 8004de0:	f7fd fc97 	bl	8002712 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f807 	bl	8004df8 <ethernetif_notify_conn_changed>
}
 8004dea:	bf00      	nop
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	20001bdc 	.word	0x20001bdc

08004df8 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	4603      	mov	r3, r0
 8004e14:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004e16:	88fb      	ldrh	r3, [r7, #6]
 8004e18:	021b      	lsls	r3, r3, #8
 8004e1a:	b21a      	sxth	r2, r3
 8004e1c:	88fb      	ldrh	r3, [r7, #6]
 8004e1e:	0a1b      	lsrs	r3, r3, #8
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	b21b      	sxth	r3, r3
 8004e24:	4313      	orrs	r3, r2
 8004e26:	b21b      	sxth	r3, r3
 8004e28:	b29b      	uxth	r3, r3
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b083      	sub	sp, #12
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	061a      	lsls	r2, r3, #24
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	021b      	lsls	r3, r3, #8
 8004e46:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	0a1b      	lsrs	r3, r3, #8
 8004e50:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004e54:	431a      	orrs	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	0e1b      	lsrs	r3, r3, #24
 8004e5a:	4313      	orrs	r3, r2
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004e72:	f000 f8d5 	bl	8005020 <mem_init>
  memp_init();
 8004e76:	f000 fbdb 	bl	8005630 <memp_init>
  pbuf_init();
  netif_init();
 8004e7a:	f000 fc93 	bl	80057a4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004e7e:	f007 ff43 	bl	800cd08 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004e82:	f001 fda7 	bl	80069d4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004e86:	f007 feb5 	bl	800cbf4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004e8a:	bf00      	nop
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
	...

08004e94 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8004e9e:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <ptr_to_mem+0x20>)
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	88fb      	ldrh	r3, [r7, #6]
 8004ea4:	4413      	add	r3, r2
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	200000a0 	.word	0x200000a0

08004eb8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004ec0:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <mem_to_ptr+0x20>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	b29b      	uxth	r3, r3
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	200000a0 	.word	0x200000a0

08004edc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004edc:	b590      	push	{r4, r7, lr}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004ee4:	4b45      	ldr	r3, [pc, #276]	; (8004ffc <plug_holes+0x120>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d206      	bcs.n	8004efc <plug_holes+0x20>
 8004eee:	4b44      	ldr	r3, [pc, #272]	; (8005000 <plug_holes+0x124>)
 8004ef0:	f240 12df 	movw	r2, #479	; 0x1df
 8004ef4:	4943      	ldr	r1, [pc, #268]	; (8005004 <plug_holes+0x128>)
 8004ef6:	4844      	ldr	r0, [pc, #272]	; (8005008 <plug_holes+0x12c>)
 8004ef8:	f00a fbe2 	bl	800f6c0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004efc:	4b43      	ldr	r3, [pc, #268]	; (800500c <plug_holes+0x130>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d306      	bcc.n	8004f14 <plug_holes+0x38>
 8004f06:	4b3e      	ldr	r3, [pc, #248]	; (8005000 <plug_holes+0x124>)
 8004f08:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004f0c:	4940      	ldr	r1, [pc, #256]	; (8005010 <plug_holes+0x134>)
 8004f0e:	483e      	ldr	r0, [pc, #248]	; (8005008 <plug_holes+0x12c>)
 8004f10:	f00a fbd6 	bl	800f6c0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	791b      	ldrb	r3, [r3, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d006      	beq.n	8004f2a <plug_holes+0x4e>
 8004f1c:	4b38      	ldr	r3, [pc, #224]	; (8005000 <plug_holes+0x124>)
 8004f1e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004f22:	493c      	ldr	r1, [pc, #240]	; (8005014 <plug_holes+0x138>)
 8004f24:	4838      	ldr	r0, [pc, #224]	; (8005008 <plug_holes+0x12c>)
 8004f26:	f00a fbcb 	bl	800f6c0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f32:	d906      	bls.n	8004f42 <plug_holes+0x66>
 8004f34:	4b32      	ldr	r3, [pc, #200]	; (8005000 <plug_holes+0x124>)
 8004f36:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004f3a:	4937      	ldr	r1, [pc, #220]	; (8005018 <plug_holes+0x13c>)
 8004f3c:	4832      	ldr	r0, [pc, #200]	; (8005008 <plug_holes+0x12c>)
 8004f3e:	f00a fbbf 	bl	800f6c0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7ff ffa4 	bl	8004e94 <ptr_to_mem>
 8004f4c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d024      	beq.n	8004fa0 <plug_holes+0xc4>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	791b      	ldrb	r3, [r3, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d120      	bne.n	8004fa0 <plug_holes+0xc4>
 8004f5e:	4b2b      	ldr	r3, [pc, #172]	; (800500c <plug_holes+0x130>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d01b      	beq.n	8004fa0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004f68:	4b2c      	ldr	r3, [pc, #176]	; (800501c <plug_holes+0x140>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d102      	bne.n	8004f78 <plug_holes+0x9c>
      lfree = mem;
 8004f72:	4a2a      	ldr	r2, [pc, #168]	; (800501c <plug_holes+0x140>)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	881a      	ldrh	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	881b      	ldrh	r3, [r3, #0]
 8004f84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f88:	d00a      	beq.n	8004fa0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	881b      	ldrh	r3, [r3, #0]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7ff ff80 	bl	8004e94 <ptr_to_mem>
 8004f94:	4604      	mov	r4, r0
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7ff ff8e 	bl	8004eb8 <mem_to_ptr>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	885b      	ldrh	r3, [r3, #2]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff ff75 	bl	8004e94 <ptr_to_mem>
 8004faa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d01f      	beq.n	8004ff4 <plug_holes+0x118>
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	791b      	ldrb	r3, [r3, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d11b      	bne.n	8004ff4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004fbc:	4b17      	ldr	r3, [pc, #92]	; (800501c <plug_holes+0x140>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d102      	bne.n	8004fcc <plug_holes+0xf0>
      lfree = pmem;
 8004fc6:	4a15      	ldr	r2, [pc, #84]	; (800501c <plug_holes+0x140>)
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	881a      	ldrh	r2, [r3, #0]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004fdc:	d00a      	beq.n	8004ff4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff ff56 	bl	8004e94 <ptr_to_mem>
 8004fe8:	4604      	mov	r4, r0
 8004fea:	68b8      	ldr	r0, [r7, #8]
 8004fec:	f7ff ff64 	bl	8004eb8 <mem_to_ptr>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004ff4:	bf00      	nop
 8004ff6:	3714      	adds	r7, #20
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd90      	pop	{r4, r7, pc}
 8004ffc:	200000a0 	.word	0x200000a0
 8005000:	08010bd0 	.word	0x08010bd0
 8005004:	08010c00 	.word	0x08010c00
 8005008:	08010c18 	.word	0x08010c18
 800500c:	200000a4 	.word	0x200000a4
 8005010:	08010c40 	.word	0x08010c40
 8005014:	08010c5c 	.word	0x08010c5c
 8005018:	08010c78 	.word	0x08010c78
 800501c:	200000a8 	.word	0x200000a8

08005020 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005026:	4b18      	ldr	r3, [pc, #96]	; (8005088 <mem_init+0x68>)
 8005028:	3303      	adds	r3, #3
 800502a:	f023 0303 	bic.w	r3, r3, #3
 800502e:	461a      	mov	r2, r3
 8005030:	4b16      	ldr	r3, [pc, #88]	; (800508c <mem_init+0x6c>)
 8005032:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005034:	4b15      	ldr	r3, [pc, #84]	; (800508c <mem_init+0x6c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005040:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800504e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8005052:	f7ff ff1f 	bl	8004e94 <ptr_to_mem>
 8005056:	4603      	mov	r3, r0
 8005058:	4a0d      	ldr	r2, [pc, #52]	; (8005090 <mem_init+0x70>)
 800505a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800505c:	4b0c      	ldr	r3, [pc, #48]	; (8005090 <mem_init+0x70>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2201      	movs	r2, #1
 8005062:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005064:	4b0a      	ldr	r3, [pc, #40]	; (8005090 <mem_init+0x70>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800506c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800506e:	4b08      	ldr	r3, [pc, #32]	; (8005090 <mem_init+0x70>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005076:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005078:	4b04      	ldr	r3, [pc, #16]	; (800508c <mem_init+0x6c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a05      	ldr	r2, [pc, #20]	; (8005094 <mem_init+0x74>)
 800507e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005080:	bf00      	nop
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	2000340c 	.word	0x2000340c
 800508c:	200000a0 	.word	0x200000a0
 8005090:	200000a4 	.word	0x200000a4
 8005094:	200000a8 	.word	0x200000a8

08005098 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7ff ff09 	bl	8004eb8 <mem_to_ptr>
 80050a6:	4603      	mov	r3, r0
 80050a8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	881b      	ldrh	r3, [r3, #0]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff fef0 	bl	8004e94 <ptr_to_mem>
 80050b4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	885b      	ldrh	r3, [r3, #2]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7ff feea 	bl	8004e94 <ptr_to_mem>
 80050c0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	881b      	ldrh	r3, [r3, #0]
 80050c6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80050ca:	d818      	bhi.n	80050fe <mem_link_valid+0x66>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	885b      	ldrh	r3, [r3, #2]
 80050d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80050d4:	d813      	bhi.n	80050fe <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80050da:	8afa      	ldrh	r2, [r7, #22]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d004      	beq.n	80050ea <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	881b      	ldrh	r3, [r3, #0]
 80050e4:	8afa      	ldrh	r2, [r7, #22]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d109      	bne.n	80050fe <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80050ea:	4b08      	ldr	r3, [pc, #32]	; (800510c <mem_link_valid+0x74>)
 80050ec:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d006      	beq.n	8005102 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	885b      	ldrh	r3, [r3, #2]
 80050f8:	8afa      	ldrh	r2, [r7, #22]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d001      	beq.n	8005102 <mem_link_valid+0x6a>
    return 0;
 80050fe:	2300      	movs	r3, #0
 8005100:	e000      	b.n	8005104 <mem_link_valid+0x6c>
  }
  return 1;
 8005102:	2301      	movs	r3, #1
}
 8005104:	4618      	mov	r0, r3
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	200000a4 	.word	0x200000a4

08005110 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d04c      	beq.n	80051b8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f003 0303 	and.w	r3, r3, #3
 8005124:	2b00      	cmp	r3, #0
 8005126:	d007      	beq.n	8005138 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005128:	4b25      	ldr	r3, [pc, #148]	; (80051c0 <mem_free+0xb0>)
 800512a:	f240 2273 	movw	r2, #627	; 0x273
 800512e:	4925      	ldr	r1, [pc, #148]	; (80051c4 <mem_free+0xb4>)
 8005130:	4825      	ldr	r0, [pc, #148]	; (80051c8 <mem_free+0xb8>)
 8005132:	f00a fac5 	bl	800f6c0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005136:	e040      	b.n	80051ba <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3b08      	subs	r3, #8
 800513c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800513e:	4b23      	ldr	r3, [pc, #140]	; (80051cc <mem_free+0xbc>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	429a      	cmp	r2, r3
 8005146:	d306      	bcc.n	8005156 <mem_free+0x46>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f103 020c 	add.w	r2, r3, #12
 800514e:	4b20      	ldr	r3, [pc, #128]	; (80051d0 <mem_free+0xc0>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	429a      	cmp	r2, r3
 8005154:	d907      	bls.n	8005166 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005156:	4b1a      	ldr	r3, [pc, #104]	; (80051c0 <mem_free+0xb0>)
 8005158:	f240 227f 	movw	r2, #639	; 0x27f
 800515c:	491d      	ldr	r1, [pc, #116]	; (80051d4 <mem_free+0xc4>)
 800515e:	481a      	ldr	r0, [pc, #104]	; (80051c8 <mem_free+0xb8>)
 8005160:	f00a faae 	bl	800f6c0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005164:	e029      	b.n	80051ba <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	791b      	ldrb	r3, [r3, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d107      	bne.n	800517e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800516e:	4b14      	ldr	r3, [pc, #80]	; (80051c0 <mem_free+0xb0>)
 8005170:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8005174:	4918      	ldr	r1, [pc, #96]	; (80051d8 <mem_free+0xc8>)
 8005176:	4814      	ldr	r0, [pc, #80]	; (80051c8 <mem_free+0xb8>)
 8005178:	f00a faa2 	bl	800f6c0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800517c:	e01d      	b.n	80051ba <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f7ff ff8a 	bl	8005098 <mem_link_valid>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d107      	bne.n	800519a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800518a:	4b0d      	ldr	r3, [pc, #52]	; (80051c0 <mem_free+0xb0>)
 800518c:	f240 2295 	movw	r2, #661	; 0x295
 8005190:	4912      	ldr	r1, [pc, #72]	; (80051dc <mem_free+0xcc>)
 8005192:	480d      	ldr	r0, [pc, #52]	; (80051c8 <mem_free+0xb8>)
 8005194:	f00a fa94 	bl	800f6c0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005198:	e00f      	b.n	80051ba <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80051a0:	4b0f      	ldr	r3, [pc, #60]	; (80051e0 <mem_free+0xd0>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d202      	bcs.n	80051b0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80051aa:	4a0d      	ldr	r2, [pc, #52]	; (80051e0 <mem_free+0xd0>)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f7ff fe93 	bl	8004edc <plug_holes>
 80051b6:	e000      	b.n	80051ba <mem_free+0xaa>
    return;
 80051b8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	08010bd0 	.word	0x08010bd0
 80051c4:	08010ca4 	.word	0x08010ca4
 80051c8:	08010c18 	.word	0x08010c18
 80051cc:	200000a0 	.word	0x200000a0
 80051d0:	200000a4 	.word	0x200000a4
 80051d4:	08010cc8 	.word	0x08010cc8
 80051d8:	08010ce4 	.word	0x08010ce4
 80051dc:	08010d0c 	.word	0x08010d0c
 80051e0:	200000a8 	.word	0x200000a8

080051e4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b088      	sub	sp, #32
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	460b      	mov	r3, r1
 80051ee:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80051f0:	887b      	ldrh	r3, [r7, #2]
 80051f2:	3303      	adds	r3, #3
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	f023 0303 	bic.w	r3, r3, #3
 80051fa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80051fc:	8bfb      	ldrh	r3, [r7, #30]
 80051fe:	2b0b      	cmp	r3, #11
 8005200:	d801      	bhi.n	8005206 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005202:	230c      	movs	r3, #12
 8005204:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005206:	8bfb      	ldrh	r3, [r7, #30]
 8005208:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800520c:	d803      	bhi.n	8005216 <mem_trim+0x32>
 800520e:	8bfa      	ldrh	r2, [r7, #30]
 8005210:	887b      	ldrh	r3, [r7, #2]
 8005212:	429a      	cmp	r2, r3
 8005214:	d201      	bcs.n	800521a <mem_trim+0x36>
    return NULL;
 8005216:	2300      	movs	r3, #0
 8005218:	e0cc      	b.n	80053b4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800521a:	4b68      	ldr	r3, [pc, #416]	; (80053bc <mem_trim+0x1d8>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	429a      	cmp	r2, r3
 8005222:	d304      	bcc.n	800522e <mem_trim+0x4a>
 8005224:	4b66      	ldr	r3, [pc, #408]	; (80053c0 <mem_trim+0x1dc>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	429a      	cmp	r2, r3
 800522c:	d306      	bcc.n	800523c <mem_trim+0x58>
 800522e:	4b65      	ldr	r3, [pc, #404]	; (80053c4 <mem_trim+0x1e0>)
 8005230:	f240 22d1 	movw	r2, #721	; 0x2d1
 8005234:	4964      	ldr	r1, [pc, #400]	; (80053c8 <mem_trim+0x1e4>)
 8005236:	4865      	ldr	r0, [pc, #404]	; (80053cc <mem_trim+0x1e8>)
 8005238:	f00a fa42 	bl	800f6c0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800523c:	4b5f      	ldr	r3, [pc, #380]	; (80053bc <mem_trim+0x1d8>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	429a      	cmp	r2, r3
 8005244:	d304      	bcc.n	8005250 <mem_trim+0x6c>
 8005246:	4b5e      	ldr	r3, [pc, #376]	; (80053c0 <mem_trim+0x1dc>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	429a      	cmp	r2, r3
 800524e:	d301      	bcc.n	8005254 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	e0af      	b.n	80053b4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	3b08      	subs	r3, #8
 8005258:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800525a:	69b8      	ldr	r0, [r7, #24]
 800525c:	f7ff fe2c 	bl	8004eb8 <mem_to_ptr>
 8005260:	4603      	mov	r3, r0
 8005262:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	881a      	ldrh	r2, [r3, #0]
 8005268:	8afb      	ldrh	r3, [r7, #22]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	b29b      	uxth	r3, r3
 800526e:	3b08      	subs	r3, #8
 8005270:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005272:	8bfa      	ldrh	r2, [r7, #30]
 8005274:	8abb      	ldrh	r3, [r7, #20]
 8005276:	429a      	cmp	r2, r3
 8005278:	d906      	bls.n	8005288 <mem_trim+0xa4>
 800527a:	4b52      	ldr	r3, [pc, #328]	; (80053c4 <mem_trim+0x1e0>)
 800527c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005280:	4953      	ldr	r1, [pc, #332]	; (80053d0 <mem_trim+0x1ec>)
 8005282:	4852      	ldr	r0, [pc, #328]	; (80053cc <mem_trim+0x1e8>)
 8005284:	f00a fa1c 	bl	800f6c0 <iprintf>
  if (newsize > size) {
 8005288:	8bfa      	ldrh	r2, [r7, #30]
 800528a:	8abb      	ldrh	r3, [r7, #20]
 800528c:	429a      	cmp	r2, r3
 800528e:	d901      	bls.n	8005294 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005290:	2300      	movs	r3, #0
 8005292:	e08f      	b.n	80053b4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005294:	8bfa      	ldrh	r2, [r7, #30]
 8005296:	8abb      	ldrh	r3, [r7, #20]
 8005298:	429a      	cmp	r2, r3
 800529a:	d101      	bne.n	80052a0 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	e089      	b.n	80053b4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7ff fdf5 	bl	8004e94 <ptr_to_mem>
 80052aa:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	791b      	ldrb	r3, [r3, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d13f      	bne.n	8005334 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	881b      	ldrh	r3, [r3, #0]
 80052b8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80052bc:	d106      	bne.n	80052cc <mem_trim+0xe8>
 80052be:	4b41      	ldr	r3, [pc, #260]	; (80053c4 <mem_trim+0x1e0>)
 80052c0:	f240 22f5 	movw	r2, #757	; 0x2f5
 80052c4:	4943      	ldr	r1, [pc, #268]	; (80053d4 <mem_trim+0x1f0>)
 80052c6:	4841      	ldr	r0, [pc, #260]	; (80053cc <mem_trim+0x1e8>)
 80052c8:	f00a f9fa 	bl	800f6c0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	881b      	ldrh	r3, [r3, #0]
 80052d0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80052d2:	8afa      	ldrh	r2, [r7, #22]
 80052d4:	8bfb      	ldrh	r3, [r7, #30]
 80052d6:	4413      	add	r3, r2
 80052d8:	b29b      	uxth	r3, r3
 80052da:	3308      	adds	r3, #8
 80052dc:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80052de:	4b3e      	ldr	r3, [pc, #248]	; (80053d8 <mem_trim+0x1f4>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d106      	bne.n	80052f6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80052e8:	89fb      	ldrh	r3, [r7, #14]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7ff fdd2 	bl	8004e94 <ptr_to_mem>
 80052f0:	4603      	mov	r3, r0
 80052f2:	4a39      	ldr	r2, [pc, #228]	; (80053d8 <mem_trim+0x1f4>)
 80052f4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80052f6:	89fb      	ldrh	r3, [r7, #14]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7ff fdcb 	bl	8004e94 <ptr_to_mem>
 80052fe:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	2200      	movs	r2, #0
 8005304:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	89ba      	ldrh	r2, [r7, #12]
 800530a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	8afa      	ldrh	r2, [r7, #22]
 8005310:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	89fa      	ldrh	r2, [r7, #14]
 8005316:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	881b      	ldrh	r3, [r3, #0]
 800531c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005320:	d047      	beq.n	80053b2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	4618      	mov	r0, r3
 8005328:	f7ff fdb4 	bl	8004e94 <ptr_to_mem>
 800532c:	4602      	mov	r2, r0
 800532e:	89fb      	ldrh	r3, [r7, #14]
 8005330:	8053      	strh	r3, [r2, #2]
 8005332:	e03e      	b.n	80053b2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005334:	8bfb      	ldrh	r3, [r7, #30]
 8005336:	f103 0214 	add.w	r2, r3, #20
 800533a:	8abb      	ldrh	r3, [r7, #20]
 800533c:	429a      	cmp	r2, r3
 800533e:	d838      	bhi.n	80053b2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005340:	8afa      	ldrh	r2, [r7, #22]
 8005342:	8bfb      	ldrh	r3, [r7, #30]
 8005344:	4413      	add	r3, r2
 8005346:	b29b      	uxth	r3, r3
 8005348:	3308      	adds	r3, #8
 800534a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	881b      	ldrh	r3, [r3, #0]
 8005350:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005354:	d106      	bne.n	8005364 <mem_trim+0x180>
 8005356:	4b1b      	ldr	r3, [pc, #108]	; (80053c4 <mem_trim+0x1e0>)
 8005358:	f240 3216 	movw	r2, #790	; 0x316
 800535c:	491d      	ldr	r1, [pc, #116]	; (80053d4 <mem_trim+0x1f0>)
 800535e:	481b      	ldr	r0, [pc, #108]	; (80053cc <mem_trim+0x1e8>)
 8005360:	f00a f9ae 	bl	800f6c0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005364:	89fb      	ldrh	r3, [r7, #14]
 8005366:	4618      	mov	r0, r3
 8005368:	f7ff fd94 	bl	8004e94 <ptr_to_mem>
 800536c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800536e:	4b1a      	ldr	r3, [pc, #104]	; (80053d8 <mem_trim+0x1f4>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	429a      	cmp	r2, r3
 8005376:	d202      	bcs.n	800537e <mem_trim+0x19a>
      lfree = mem2;
 8005378:	4a17      	ldr	r2, [pc, #92]	; (80053d8 <mem_trim+0x1f4>)
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	2200      	movs	r2, #0
 8005382:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	881a      	ldrh	r2, [r3, #0]
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	8afa      	ldrh	r2, [r7, #22]
 8005390:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	89fa      	ldrh	r2, [r7, #14]
 8005396:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	881b      	ldrh	r3, [r3, #0]
 800539c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80053a0:	d007      	beq.n	80053b2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	881b      	ldrh	r3, [r3, #0]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7ff fd74 	bl	8004e94 <ptr_to_mem>
 80053ac:	4602      	mov	r2, r0
 80053ae:	89fb      	ldrh	r3, [r7, #14]
 80053b0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80053b2:	687b      	ldr	r3, [r7, #4]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3720      	adds	r7, #32
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	200000a0 	.word	0x200000a0
 80053c0:	200000a4 	.word	0x200000a4
 80053c4:	08010bd0 	.word	0x08010bd0
 80053c8:	08010d40 	.word	0x08010d40
 80053cc:	08010c18 	.word	0x08010c18
 80053d0:	08010d58 	.word	0x08010d58
 80053d4:	08010d78 	.word	0x08010d78
 80053d8:	200000a8 	.word	0x200000a8

080053dc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b088      	sub	sp, #32
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	4603      	mov	r3, r0
 80053e4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80053e6:	88fb      	ldrh	r3, [r7, #6]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <mem_malloc+0x14>
    return NULL;
 80053ec:	2300      	movs	r3, #0
 80053ee:	e0d9      	b.n	80055a4 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80053f0:	88fb      	ldrh	r3, [r7, #6]
 80053f2:	3303      	adds	r3, #3
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	f023 0303 	bic.w	r3, r3, #3
 80053fa:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80053fc:	8bbb      	ldrh	r3, [r7, #28]
 80053fe:	2b0b      	cmp	r3, #11
 8005400:	d801      	bhi.n	8005406 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005402:	230c      	movs	r3, #12
 8005404:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005406:	8bbb      	ldrh	r3, [r7, #28]
 8005408:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800540c:	d803      	bhi.n	8005416 <mem_malloc+0x3a>
 800540e:	8bba      	ldrh	r2, [r7, #28]
 8005410:	88fb      	ldrh	r3, [r7, #6]
 8005412:	429a      	cmp	r2, r3
 8005414:	d201      	bcs.n	800541a <mem_malloc+0x3e>
    return NULL;
 8005416:	2300      	movs	r3, #0
 8005418:	e0c4      	b.n	80055a4 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800541a:	4b64      	ldr	r3, [pc, #400]	; (80055ac <mem_malloc+0x1d0>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4618      	mov	r0, r3
 8005420:	f7ff fd4a 	bl	8004eb8 <mem_to_ptr>
 8005424:	4603      	mov	r3, r0
 8005426:	83fb      	strh	r3, [r7, #30]
 8005428:	e0b4      	b.n	8005594 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800542a:	8bfb      	ldrh	r3, [r7, #30]
 800542c:	4618      	mov	r0, r3
 800542e:	f7ff fd31 	bl	8004e94 <ptr_to_mem>
 8005432:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	791b      	ldrb	r3, [r3, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	f040 80a4 	bne.w	8005586 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	8bfb      	ldrh	r3, [r7, #30]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	f1a3 0208 	sub.w	r2, r3, #8
 800544c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800544e:	429a      	cmp	r2, r3
 8005450:	f0c0 8099 	bcc.w	8005586 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	881b      	ldrh	r3, [r3, #0]
 8005458:	461a      	mov	r2, r3
 800545a:	8bfb      	ldrh	r3, [r7, #30]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	f1a3 0208 	sub.w	r2, r3, #8
 8005462:	8bbb      	ldrh	r3, [r7, #28]
 8005464:	3314      	adds	r3, #20
 8005466:	429a      	cmp	r2, r3
 8005468:	d333      	bcc.n	80054d2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800546a:	8bfa      	ldrh	r2, [r7, #30]
 800546c:	8bbb      	ldrh	r3, [r7, #28]
 800546e:	4413      	add	r3, r2
 8005470:	b29b      	uxth	r3, r3
 8005472:	3308      	adds	r3, #8
 8005474:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005476:	8a7b      	ldrh	r3, [r7, #18]
 8005478:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800547c:	d106      	bne.n	800548c <mem_malloc+0xb0>
 800547e:	4b4c      	ldr	r3, [pc, #304]	; (80055b0 <mem_malloc+0x1d4>)
 8005480:	f240 3287 	movw	r2, #903	; 0x387
 8005484:	494b      	ldr	r1, [pc, #300]	; (80055b4 <mem_malloc+0x1d8>)
 8005486:	484c      	ldr	r0, [pc, #304]	; (80055b8 <mem_malloc+0x1dc>)
 8005488:	f00a f91a 	bl	800f6c0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800548c:	8a7b      	ldrh	r3, [r7, #18]
 800548e:	4618      	mov	r0, r3
 8005490:	f7ff fd00 	bl	8004e94 <ptr_to_mem>
 8005494:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	881a      	ldrh	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	8bfa      	ldrh	r2, [r7, #30]
 80054a8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	8a7a      	ldrh	r2, [r7, #18]
 80054ae:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	2201      	movs	r2, #1
 80054b4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80054be:	d00b      	beq.n	80054d8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7ff fce5 	bl	8004e94 <ptr_to_mem>
 80054ca:	4602      	mov	r2, r0
 80054cc:	8a7b      	ldrh	r3, [r7, #18]
 80054ce:	8053      	strh	r3, [r2, #2]
 80054d0:	e002      	b.n	80054d8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	2201      	movs	r2, #1
 80054d6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80054d8:	4b34      	ldr	r3, [pc, #208]	; (80055ac <mem_malloc+0x1d0>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d127      	bne.n	8005532 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80054e2:	4b32      	ldr	r3, [pc, #200]	; (80055ac <mem_malloc+0x1d0>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80054e8:	e005      	b.n	80054f6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7ff fcd0 	bl	8004e94 <ptr_to_mem>
 80054f4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	791b      	ldrb	r3, [r3, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d004      	beq.n	8005508 <mem_malloc+0x12c>
 80054fe:	4b2f      	ldr	r3, [pc, #188]	; (80055bc <mem_malloc+0x1e0>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	429a      	cmp	r2, r3
 8005506:	d1f0      	bne.n	80054ea <mem_malloc+0x10e>
          }
          lfree = cur;
 8005508:	4a28      	ldr	r2, [pc, #160]	; (80055ac <mem_malloc+0x1d0>)
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800550e:	4b27      	ldr	r3, [pc, #156]	; (80055ac <mem_malloc+0x1d0>)
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	4b2a      	ldr	r3, [pc, #168]	; (80055bc <mem_malloc+0x1e0>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	429a      	cmp	r2, r3
 8005518:	d00b      	beq.n	8005532 <mem_malloc+0x156>
 800551a:	4b24      	ldr	r3, [pc, #144]	; (80055ac <mem_malloc+0x1d0>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	791b      	ldrb	r3, [r3, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d006      	beq.n	8005532 <mem_malloc+0x156>
 8005524:	4b22      	ldr	r3, [pc, #136]	; (80055b0 <mem_malloc+0x1d4>)
 8005526:	f240 32b5 	movw	r2, #949	; 0x3b5
 800552a:	4925      	ldr	r1, [pc, #148]	; (80055c0 <mem_malloc+0x1e4>)
 800552c:	4822      	ldr	r0, [pc, #136]	; (80055b8 <mem_malloc+0x1dc>)
 800552e:	f00a f8c7 	bl	800f6c0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005532:	8bba      	ldrh	r2, [r7, #28]
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	4413      	add	r3, r2
 8005538:	3308      	adds	r3, #8
 800553a:	4a20      	ldr	r2, [pc, #128]	; (80055bc <mem_malloc+0x1e0>)
 800553c:	6812      	ldr	r2, [r2, #0]
 800553e:	4293      	cmp	r3, r2
 8005540:	d906      	bls.n	8005550 <mem_malloc+0x174>
 8005542:	4b1b      	ldr	r3, [pc, #108]	; (80055b0 <mem_malloc+0x1d4>)
 8005544:	f240 32b9 	movw	r2, #953	; 0x3b9
 8005548:	491e      	ldr	r1, [pc, #120]	; (80055c4 <mem_malloc+0x1e8>)
 800554a:	481b      	ldr	r0, [pc, #108]	; (80055b8 <mem_malloc+0x1dc>)
 800554c:	f00a f8b8 	bl	800f6c0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d006      	beq.n	8005568 <mem_malloc+0x18c>
 800555a:	4b15      	ldr	r3, [pc, #84]	; (80055b0 <mem_malloc+0x1d4>)
 800555c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8005560:	4919      	ldr	r1, [pc, #100]	; (80055c8 <mem_malloc+0x1ec>)
 8005562:	4815      	ldr	r0, [pc, #84]	; (80055b8 <mem_malloc+0x1dc>)
 8005564:	f00a f8ac 	bl	800f6c0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f003 0303 	and.w	r3, r3, #3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d006      	beq.n	8005580 <mem_malloc+0x1a4>
 8005572:	4b0f      	ldr	r3, [pc, #60]	; (80055b0 <mem_malloc+0x1d4>)
 8005574:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005578:	4914      	ldr	r1, [pc, #80]	; (80055cc <mem_malloc+0x1f0>)
 800557a:	480f      	ldr	r0, [pc, #60]	; (80055b8 <mem_malloc+0x1dc>)
 800557c:	f00a f8a0 	bl	800f6c0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	3308      	adds	r3, #8
 8005584:	e00e      	b.n	80055a4 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005586:	8bfb      	ldrh	r3, [r7, #30]
 8005588:	4618      	mov	r0, r3
 800558a:	f7ff fc83 	bl	8004e94 <ptr_to_mem>
 800558e:	4603      	mov	r3, r0
 8005590:	881b      	ldrh	r3, [r3, #0]
 8005592:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005594:	8bfa      	ldrh	r2, [r7, #30]
 8005596:	8bbb      	ldrh	r3, [r7, #28]
 8005598:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800559c:	429a      	cmp	r2, r3
 800559e:	f4ff af44 	bcc.w	800542a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3720      	adds	r7, #32
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	200000a8 	.word	0x200000a8
 80055b0:	08010bd0 	.word	0x08010bd0
 80055b4:	08010d78 	.word	0x08010d78
 80055b8:	08010c18 	.word	0x08010c18
 80055bc:	200000a4 	.word	0x200000a4
 80055c0:	08010d8c 	.word	0x08010d8c
 80055c4:	08010da8 	.word	0x08010da8
 80055c8:	08010dd8 	.word	0x08010dd8
 80055cc:	08010e08 	.word	0x08010e08

080055d0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	2200      	movs	r2, #0
 80055de:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	3303      	adds	r3, #3
 80055e6:	f023 0303 	bic.w	r3, r3, #3
 80055ea:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80055ec:	2300      	movs	r3, #0
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	e011      	b.n	8005616 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	881b      	ldrh	r3, [r3, #0]
 8005608:	461a      	mov	r2, r3
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	4413      	add	r3, r2
 800560e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	3301      	adds	r3, #1
 8005614:	60fb      	str	r3, [r7, #12]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	885b      	ldrh	r3, [r3, #2]
 800561a:	461a      	mov	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4293      	cmp	r3, r2
 8005620:	dbe7      	blt.n	80055f2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005622:	bf00      	nop
 8005624:	bf00      	nop
 8005626:	3714      	adds	r7, #20
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005636:	2300      	movs	r3, #0
 8005638:	80fb      	strh	r3, [r7, #6]
 800563a:	e009      	b.n	8005650 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800563c:	88fb      	ldrh	r3, [r7, #6]
 800563e:	4a08      	ldr	r2, [pc, #32]	; (8005660 <memp_init+0x30>)
 8005640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005644:	4618      	mov	r0, r3
 8005646:	f7ff ffc3 	bl	80055d0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800564a:	88fb      	ldrh	r3, [r7, #6]
 800564c:	3301      	adds	r3, #1
 800564e:	80fb      	strh	r3, [r7, #6]
 8005650:	88fb      	ldrh	r3, [r7, #6]
 8005652:	2b08      	cmp	r3, #8
 8005654:	d9f2      	bls.n	800563c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005656:	bf00      	nop
 8005658:	bf00      	nop
 800565a:	3708      	adds	r7, #8
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	080135d8 	.word	0x080135d8

08005664 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d012      	beq.n	80056a0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	6812      	ldr	r2, [r2, #0]
 8005682:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d006      	beq.n	800569c <do_memp_malloc_pool+0x38>
 800568e:	4b07      	ldr	r3, [pc, #28]	; (80056ac <do_memp_malloc_pool+0x48>)
 8005690:	f44f 728c 	mov.w	r2, #280	; 0x118
 8005694:	4906      	ldr	r1, [pc, #24]	; (80056b0 <do_memp_malloc_pool+0x4c>)
 8005696:	4807      	ldr	r0, [pc, #28]	; (80056b4 <do_memp_malloc_pool+0x50>)
 8005698:	f00a f812 	bl	800f6c0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	e000      	b.n	80056a2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	08010e2c 	.word	0x08010e2c
 80056b0:	08010e5c 	.word	0x08010e5c
 80056b4:	08010e80 	.word	0x08010e80

080056b8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	4603      	mov	r3, r0
 80056c0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80056c2:	79fb      	ldrb	r3, [r7, #7]
 80056c4:	2b08      	cmp	r3, #8
 80056c6:	d908      	bls.n	80056da <memp_malloc+0x22>
 80056c8:	4b0a      	ldr	r3, [pc, #40]	; (80056f4 <memp_malloc+0x3c>)
 80056ca:	f240 1257 	movw	r2, #343	; 0x157
 80056ce:	490a      	ldr	r1, [pc, #40]	; (80056f8 <memp_malloc+0x40>)
 80056d0:	480a      	ldr	r0, [pc, #40]	; (80056fc <memp_malloc+0x44>)
 80056d2:	f009 fff5 	bl	800f6c0 <iprintf>
 80056d6:	2300      	movs	r3, #0
 80056d8:	e008      	b.n	80056ec <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80056da:	79fb      	ldrb	r3, [r7, #7]
 80056dc:	4a08      	ldr	r2, [pc, #32]	; (8005700 <memp_malloc+0x48>)
 80056de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff ffbe 	bl	8005664 <do_memp_malloc_pool>
 80056e8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80056ea:	68fb      	ldr	r3, [r7, #12]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	08010e2c 	.word	0x08010e2c
 80056f8:	08010ebc 	.word	0x08010ebc
 80056fc:	08010e80 	.word	0x08010e80
 8005700:	080135d8 	.word	0x080135d8

08005704 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	f003 0303 	and.w	r3, r3, #3
 8005714:	2b00      	cmp	r3, #0
 8005716:	d006      	beq.n	8005726 <do_memp_free_pool+0x22>
 8005718:	4b0a      	ldr	r3, [pc, #40]	; (8005744 <do_memp_free_pool+0x40>)
 800571a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800571e:	490a      	ldr	r1, [pc, #40]	; (8005748 <do_memp_free_pool+0x44>)
 8005720:	480a      	ldr	r0, [pc, #40]	; (800574c <do_memp_free_pool+0x48>)
 8005722:	f009 ffcd 	bl	800f6c0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800573c:	bf00      	nop
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	08010e2c 	.word	0x08010e2c
 8005748:	08010edc 	.word	0x08010edc
 800574c:	08010e80 	.word	0x08010e80

08005750 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	4603      	mov	r3, r0
 8005758:	6039      	str	r1, [r7, #0]
 800575a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800575c:	79fb      	ldrb	r3, [r7, #7]
 800575e:	2b08      	cmp	r3, #8
 8005760:	d907      	bls.n	8005772 <memp_free+0x22>
 8005762:	4b0c      	ldr	r3, [pc, #48]	; (8005794 <memp_free+0x44>)
 8005764:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005768:	490b      	ldr	r1, [pc, #44]	; (8005798 <memp_free+0x48>)
 800576a:	480c      	ldr	r0, [pc, #48]	; (800579c <memp_free+0x4c>)
 800576c:	f009 ffa8 	bl	800f6c0 <iprintf>
 8005770:	e00c      	b.n	800578c <memp_free+0x3c>

  if (mem == NULL) {
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d008      	beq.n	800578a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005778:	79fb      	ldrb	r3, [r7, #7]
 800577a:	4a09      	ldr	r2, [pc, #36]	; (80057a0 <memp_free+0x50>)
 800577c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005780:	6839      	ldr	r1, [r7, #0]
 8005782:	4618      	mov	r0, r3
 8005784:	f7ff ffbe 	bl	8005704 <do_memp_free_pool>
 8005788:	e000      	b.n	800578c <memp_free+0x3c>
    return;
 800578a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	08010e2c 	.word	0x08010e2c
 8005798:	08010efc 	.word	0x08010efc
 800579c:	08010e80 	.word	0x08010e80
 80057a0:	080135d8 	.word	0x080135d8

080057a4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80057a4:	b480      	push	{r7}
 80057a6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80057a8:	bf00      	nop
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
	...

080057b4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
 80057c0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d108      	bne.n	80057da <netif_add+0x26>
 80057c8:	4b57      	ldr	r3, [pc, #348]	; (8005928 <netif_add+0x174>)
 80057ca:	f240 1227 	movw	r2, #295	; 0x127
 80057ce:	4957      	ldr	r1, [pc, #348]	; (800592c <netif_add+0x178>)
 80057d0:	4857      	ldr	r0, [pc, #348]	; (8005930 <netif_add+0x17c>)
 80057d2:	f009 ff75 	bl	800f6c0 <iprintf>
 80057d6:	2300      	movs	r3, #0
 80057d8:	e0a2      	b.n	8005920 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80057da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d108      	bne.n	80057f2 <netif_add+0x3e>
 80057e0:	4b51      	ldr	r3, [pc, #324]	; (8005928 <netif_add+0x174>)
 80057e2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80057e6:	4953      	ldr	r1, [pc, #332]	; (8005934 <netif_add+0x180>)
 80057e8:	4851      	ldr	r0, [pc, #324]	; (8005930 <netif_add+0x17c>)
 80057ea:	f009 ff69 	bl	800f6c0 <iprintf>
 80057ee:	2300      	movs	r3, #0
 80057f0:	e096      	b.n	8005920 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d101      	bne.n	80057fc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80057f8:	4b4f      	ldr	r3, [pc, #316]	; (8005938 <netif_add+0x184>)
 80057fa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005802:	4b4d      	ldr	r3, [pc, #308]	; (8005938 <netif_add+0x184>)
 8005804:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d101      	bne.n	8005810 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800580c:	4b4a      	ldr	r3, [pc, #296]	; (8005938 <netif_add+0x184>)
 800580e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	4a45      	ldr	r2, [pc, #276]	; (800593c <netif_add+0x188>)
 8005826:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6a3a      	ldr	r2, [r7, #32]
 8005840:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005842:	4b3f      	ldr	r3, [pc, #252]	; (8005940 <netif_add+0x18c>)
 8005844:	781a      	ldrb	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005850:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	68b9      	ldr	r1, [r7, #8]
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 f913 	bl	8005a84 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	4798      	blx	r3
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <netif_add+0xba>
    return NULL;
 800586a:	2300      	movs	r3, #0
 800586c:	e058      	b.n	8005920 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005874:	2bff      	cmp	r3, #255	; 0xff
 8005876:	d103      	bne.n	8005880 <netif_add+0xcc>
        netif->num = 0;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8005880:	2300      	movs	r3, #0
 8005882:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005884:	4b2f      	ldr	r3, [pc, #188]	; (8005944 <netif_add+0x190>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	617b      	str	r3, [r7, #20]
 800588a:	e02b      	b.n	80058e4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	429a      	cmp	r2, r3
 8005892:	d106      	bne.n	80058a2 <netif_add+0xee>
 8005894:	4b24      	ldr	r3, [pc, #144]	; (8005928 <netif_add+0x174>)
 8005896:	f240 128b 	movw	r2, #395	; 0x18b
 800589a:	492b      	ldr	r1, [pc, #172]	; (8005948 <netif_add+0x194>)
 800589c:	4824      	ldr	r0, [pc, #144]	; (8005930 <netif_add+0x17c>)
 800589e:	f009 ff0f 	bl	800f6c0 <iprintf>
        num_netifs++;
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	3301      	adds	r3, #1
 80058a6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	2bff      	cmp	r3, #255	; 0xff
 80058ac:	dd06      	ble.n	80058bc <netif_add+0x108>
 80058ae:	4b1e      	ldr	r3, [pc, #120]	; (8005928 <netif_add+0x174>)
 80058b0:	f240 128d 	movw	r2, #397	; 0x18d
 80058b4:	4925      	ldr	r1, [pc, #148]	; (800594c <netif_add+0x198>)
 80058b6:	481e      	ldr	r0, [pc, #120]	; (8005930 <netif_add+0x17c>)
 80058b8:	f009 ff02 	bl	800f6c0 <iprintf>
        if (netif2->num == netif->num) {
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d108      	bne.n	80058de <netif_add+0x12a>
          netif->num++;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058d2:	3301      	adds	r3, #1
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80058dc:	e005      	b.n	80058ea <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	617b      	str	r3, [r7, #20]
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1d0      	bne.n	800588c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1be      	bne.n	800586e <netif_add+0xba>
  }
  if (netif->num == 254) {
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058f6:	2bfe      	cmp	r3, #254	; 0xfe
 80058f8:	d103      	bne.n	8005902 <netif_add+0x14e>
    netif_num = 0;
 80058fa:	4b11      	ldr	r3, [pc, #68]	; (8005940 <netif_add+0x18c>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	701a      	strb	r2, [r3, #0]
 8005900:	e006      	b.n	8005910 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005908:	3301      	adds	r3, #1
 800590a:	b2da      	uxtb	r2, r3
 800590c:	4b0c      	ldr	r3, [pc, #48]	; (8005940 <netif_add+0x18c>)
 800590e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005910:	4b0c      	ldr	r3, [pc, #48]	; (8005944 <netif_add+0x190>)
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005918:	4a0a      	ldr	r2, [pc, #40]	; (8005944 <netif_add+0x190>)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800591e:	68fb      	ldr	r3, [r7, #12]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3718      	adds	r7, #24
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	08010f18 	.word	0x08010f18
 800592c:	08010fac 	.word	0x08010fac
 8005930:	08010f68 	.word	0x08010f68
 8005934:	08010fc8 	.word	0x08010fc8
 8005938:	0801363c 	.word	0x0801363c
 800593c:	08005c97 	.word	0x08005c97
 8005940:	200000d0 	.word	0x200000d0
 8005944:	20006928 	.word	0x20006928
 8005948:	08010fec 	.word	0x08010fec
 800594c:	08011000 	.word	0x08011000

08005950 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800595a:	6839      	ldr	r1, [r7, #0]
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f002 fe21 	bl	80085a4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005962:	6839      	ldr	r1, [r7, #0]
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f007 fb59 	bl	800d01c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800596a:	bf00      	nop
 800596c:	3708      	adds	r7, #8
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
	...

08005974 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d106      	bne.n	8005994 <netif_do_set_ipaddr+0x20>
 8005986:	4b1d      	ldr	r3, [pc, #116]	; (80059fc <netif_do_set_ipaddr+0x88>)
 8005988:	f240 12cb 	movw	r2, #459	; 0x1cb
 800598c:	491c      	ldr	r1, [pc, #112]	; (8005a00 <netif_do_set_ipaddr+0x8c>)
 800598e:	481d      	ldr	r0, [pc, #116]	; (8005a04 <netif_do_set_ipaddr+0x90>)
 8005990:	f009 fe96 	bl	800f6c0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d106      	bne.n	80059a8 <netif_do_set_ipaddr+0x34>
 800599a:	4b18      	ldr	r3, [pc, #96]	; (80059fc <netif_do_set_ipaddr+0x88>)
 800599c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80059a0:	4917      	ldr	r1, [pc, #92]	; (8005a00 <netif_do_set_ipaddr+0x8c>)
 80059a2:	4818      	ldr	r0, [pc, #96]	; (8005a04 <netif_do_set_ipaddr+0x90>)
 80059a4:	f009 fe8c 	bl	800f6c0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	3304      	adds	r3, #4
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d01c      	beq.n	80059f0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	3304      	adds	r3, #4
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80059c6:	f107 0314 	add.w	r3, r7, #20
 80059ca:	4619      	mov	r1, r3
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7ff ffbf 	bl	8005950 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <netif_do_set_ipaddr+0x6a>
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	e000      	b.n	80059e0 <netif_do_set_ipaddr+0x6c>
 80059de:	2300      	movs	r3, #0
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80059e4:	2101      	movs	r1, #1
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f000 f8d2 	bl	8005b90 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80059ec:	2301      	movs	r3, #1
 80059ee:	e000      	b.n	80059f2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3718      	adds	r7, #24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	08010f18 	.word	0x08010f18
 8005a00:	08011030 	.word	0x08011030
 8005a04:	08010f68 	.word	0x08010f68

08005a08 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	3308      	adds	r3, #8
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d00a      	beq.n	8005a38 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <netif_do_set_netmask+0x26>
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	e000      	b.n	8005a30 <netif_do_set_netmask+0x28>
 8005a2e:	2300      	movs	r3, #0
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005a34:	2301      	movs	r3, #1
 8005a36:	e000      	b.n	8005a3a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b085      	sub	sp, #20
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	60f8      	str	r0, [r7, #12]
 8005a4e:	60b9      	str	r1, [r7, #8]
 8005a50:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	330c      	adds	r3, #12
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d00a      	beq.n	8005a76 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <netif_do_set_gw+0x26>
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	e000      	b.n	8005a6e <netif_do_set_gw+0x28>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8005a72:	2301      	movs	r3, #1
 8005a74:	e000      	b.n	8005a78 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b088      	sub	sp, #32
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
 8005a90:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8005a92:	2300      	movs	r3, #0
 8005a94:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8005a96:	2300      	movs	r3, #0
 8005a98:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d101      	bne.n	8005aa4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005aa0:	4b1c      	ldr	r3, [pc, #112]	; (8005b14 <netif_set_addr+0x90>)
 8005aa2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005aaa:	4b1a      	ldr	r3, [pc, #104]	; (8005b14 <netif_set_addr+0x90>)
 8005aac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005ab4:	4b17      	ldr	r3, [pc, #92]	; (8005b14 <netif_set_addr+0x90>)
 8005ab6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d003      	beq.n	8005ac6 <netif_set_addr+0x42>
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <netif_set_addr+0x46>
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e000      	b.n	8005acc <netif_set_addr+0x48>
 8005aca:	2300      	movs	r3, #0
 8005acc:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d006      	beq.n	8005ae2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005ad4:	f107 0310 	add.w	r3, r7, #16
 8005ad8:	461a      	mov	r2, r3
 8005ada:	68b9      	ldr	r1, [r7, #8]
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f7ff ff49 	bl	8005974 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8005ae2:	69fa      	ldr	r2, [r7, #28]
 8005ae4:	6879      	ldr	r1, [r7, #4]
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f7ff ff8e 	bl	8005a08 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	6839      	ldr	r1, [r7, #0]
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f7ff ffa8 	bl	8005a46 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d106      	bne.n	8005b0a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005afc:	f107 0310 	add.w	r3, r7, #16
 8005b00:	461a      	mov	r2, r3
 8005b02:	68b9      	ldr	r1, [r7, #8]
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f7ff ff35 	bl	8005974 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005b0a:	bf00      	nop
 8005b0c:	3720      	adds	r7, #32
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	0801363c 	.word	0x0801363c

08005b18 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005b20:	4a04      	ldr	r2, [pc, #16]	; (8005b34 <netif_set_default+0x1c>)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005b26:	bf00      	nop
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	2000692c 	.word	0x2000692c

08005b38 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d107      	bne.n	8005b56 <netif_set_up+0x1e>
 8005b46:	4b0f      	ldr	r3, [pc, #60]	; (8005b84 <netif_set_up+0x4c>)
 8005b48:	f44f 7254 	mov.w	r2, #848	; 0x350
 8005b4c:	490e      	ldr	r1, [pc, #56]	; (8005b88 <netif_set_up+0x50>)
 8005b4e:	480f      	ldr	r0, [pc, #60]	; (8005b8c <netif_set_up+0x54>)
 8005b50:	f009 fdb6 	bl	800f6c0 <iprintf>
 8005b54:	e013      	b.n	8005b7e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10c      	bne.n	8005b7e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b6a:	f043 0301 	orr.w	r3, r3, #1
 8005b6e:	b2da      	uxtb	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005b76:	2103      	movs	r1, #3
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 f809 	bl	8005b90 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8005b7e:	3708      	adds	r7, #8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	08010f18 	.word	0x08010f18
 8005b88:	080110a0 	.word	0x080110a0
 8005b8c:	08010f68 	.word	0x08010f68

08005b90 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	460b      	mov	r3, r1
 8005b9a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d106      	bne.n	8005bb0 <netif_issue_reports+0x20>
 8005ba2:	4b18      	ldr	r3, [pc, #96]	; (8005c04 <netif_issue_reports+0x74>)
 8005ba4:	f240 326d 	movw	r2, #877	; 0x36d
 8005ba8:	4917      	ldr	r1, [pc, #92]	; (8005c08 <netif_issue_reports+0x78>)
 8005baa:	4818      	ldr	r0, [pc, #96]	; (8005c0c <netif_issue_reports+0x7c>)
 8005bac:	f009 fd88 	bl	800f6c0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005bb6:	f003 0304 	and.w	r3, r3, #4
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d01e      	beq.n	8005bfc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005bc4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d017      	beq.n	8005bfc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005bcc:	78fb      	ldrb	r3, [r7, #3]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d013      	beq.n	8005bfe <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	3304      	adds	r3, #4
 8005bda:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00e      	beq.n	8005bfe <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005be6:	f003 0308 	and.w	r3, r3, #8
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d007      	beq.n	8005bfe <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	3304      	adds	r3, #4
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f008 f97b 	bl	800def0 <etharp_request>
 8005bfa:	e000      	b.n	8005bfe <netif_issue_reports+0x6e>
    return;
 8005bfc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8005bfe:	3708      	adds	r7, #8
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	08010f18 	.word	0x08010f18
 8005c08:	080110bc 	.word	0x080110bc
 8005c0c:	08010f68 	.word	0x08010f68

08005c10 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d107      	bne.n	8005c2e <netif_set_down+0x1e>
 8005c1e:	4b12      	ldr	r3, [pc, #72]	; (8005c68 <netif_set_down+0x58>)
 8005c20:	f240 329b 	movw	r2, #923	; 0x39b
 8005c24:	4911      	ldr	r1, [pc, #68]	; (8005c6c <netif_set_down+0x5c>)
 8005c26:	4812      	ldr	r0, [pc, #72]	; (8005c70 <netif_set_down+0x60>)
 8005c28:	f009 fd4a 	bl	800f6c0 <iprintf>
 8005c2c:	e019      	b.n	8005c62 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d012      	beq.n	8005c62 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005c42:	f023 0301 	bic.w	r3, r3, #1
 8005c46:	b2da      	uxtb	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005c54:	f003 0308 	and.w	r3, r3, #8
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d002      	beq.n	8005c62 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f007 fd05 	bl	800d66c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005c62:	3708      	adds	r7, #8
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	08010f18 	.word	0x08010f18
 8005c6c:	080110e0 	.word	0x080110e0
 8005c70:	08010f68 	.word	0x08010f68

08005c74 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d002      	beq.n	8005c8a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	61da      	str	r2, [r3, #28]
  }
}
 8005c8a:	bf00      	nop
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b085      	sub	sp, #20
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	60f8      	str	r0, [r7, #12]
 8005c9e:	60b9      	str	r1, [r7, #8]
 8005ca0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8005ca2:	f06f 030b 	mvn.w	r3, #11
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
	...

08005cb4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	4603      	mov	r3, r0
 8005cbc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005cbe:	79fb      	ldrb	r3, [r7, #7]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d013      	beq.n	8005cec <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005cc4:	4b0d      	ldr	r3, [pc, #52]	; (8005cfc <netif_get_by_index+0x48>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	60fb      	str	r3, [r7, #12]
 8005cca:	e00c      	b.n	8005ce6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	79fa      	ldrb	r2, [r7, #7]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d101      	bne.n	8005ce0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	e006      	b.n	8005cee <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	60fb      	str	r3, [r7, #12]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1ef      	bne.n	8005ccc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	20006928 	.word	0x20006928

08005d00 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005d06:	4b0c      	ldr	r3, [pc, #48]	; (8005d38 <pbuf_free_ooseq+0x38>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005d0c:	4b0b      	ldr	r3, [pc, #44]	; (8005d3c <pbuf_free_ooseq+0x3c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	607b      	str	r3, [r7, #4]
 8005d12:	e00a      	b.n	8005d2a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d003      	beq.n	8005d24 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f002 fc7f 	bl	8008620 <tcp_free_ooseq>
      return;
 8005d22:	e005      	b.n	8005d30 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	607b      	str	r3, [r7, #4]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1f1      	bne.n	8005d14 <pbuf_free_ooseq+0x14>
    }
  }
}
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	20006930 	.word	0x20006930
 8005d3c:	20006938 	.word	0x20006938

08005d40 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005d40:	b480      	push	{r7}
 8005d42:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005d44:	4b03      	ldr	r3, [pc, #12]	; (8005d54 <pbuf_pool_is_empty+0x14>)
 8005d46:	2201      	movs	r2, #1
 8005d48:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005d4a:	bf00      	nop
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	20006930 	.word	0x20006930

08005d58 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	4611      	mov	r1, r2
 8005d64:	461a      	mov	r2, r3
 8005d66:	460b      	mov	r3, r1
 8005d68:	80fb      	strh	r3, [r7, #6]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	88fa      	ldrh	r2, [r7, #6]
 8005d7e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	88ba      	ldrh	r2, [r7, #4]
 8005d84:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005d86:	8b3b      	ldrh	r3, [r7, #24]
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	7f3a      	ldrb	r2, [r7, #28]
 8005d92:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2201      	movs	r2, #1
 8005d98:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	73da      	strb	r2, [r3, #15]
}
 8005da0:	bf00      	nop
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b08c      	sub	sp, #48	; 0x30
 8005db0:	af02      	add	r7, sp, #8
 8005db2:	4603      	mov	r3, r0
 8005db4:	71fb      	strb	r3, [r7, #7]
 8005db6:	460b      	mov	r3, r1
 8005db8:	80bb      	strh	r3, [r7, #4]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005dbe:	79fb      	ldrb	r3, [r7, #7]
 8005dc0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005dc2:	887b      	ldrh	r3, [r7, #2]
 8005dc4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005dc8:	d07f      	beq.n	8005eca <pbuf_alloc+0x11e>
 8005dca:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005dce:	f300 80c8 	bgt.w	8005f62 <pbuf_alloc+0x1b6>
 8005dd2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005dd6:	d010      	beq.n	8005dfa <pbuf_alloc+0x4e>
 8005dd8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005ddc:	f300 80c1 	bgt.w	8005f62 <pbuf_alloc+0x1b6>
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d002      	beq.n	8005dea <pbuf_alloc+0x3e>
 8005de4:	2b41      	cmp	r3, #65	; 0x41
 8005de6:	f040 80bc 	bne.w	8005f62 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005dea:	887a      	ldrh	r2, [r7, #2]
 8005dec:	88bb      	ldrh	r3, [r7, #4]
 8005dee:	4619      	mov	r1, r3
 8005df0:	2000      	movs	r0, #0
 8005df2:	f000 f8d1 	bl	8005f98 <pbuf_alloc_reference>
 8005df6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005df8:	e0bd      	b.n	8005f76 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005e02:	88bb      	ldrh	r3, [r7, #4]
 8005e04:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005e06:	2008      	movs	r0, #8
 8005e08:	f7ff fc56 	bl	80056b8 <memp_malloc>
 8005e0c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d109      	bne.n	8005e28 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005e14:	f7ff ff94 	bl	8005d40 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d002      	beq.n	8005e24 <pbuf_alloc+0x78>
            pbuf_free(p);
 8005e1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e20:	f000 faa8 	bl	8006374 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005e24:	2300      	movs	r3, #0
 8005e26:	e0a7      	b.n	8005f78 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005e28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e2a:	3303      	adds	r3, #3
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	f023 0303 	bic.w	r3, r3, #3
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	8b7a      	ldrh	r2, [r7, #26]
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	bf28      	it	cs
 8005e40:	4613      	movcs	r3, r2
 8005e42:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005e44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e46:	3310      	adds	r3, #16
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	3303      	adds	r3, #3
 8005e4e:	f023 0303 	bic.w	r3, r3, #3
 8005e52:	4618      	mov	r0, r3
 8005e54:	89f9      	ldrh	r1, [r7, #14]
 8005e56:	8b7a      	ldrh	r2, [r7, #26]
 8005e58:	2300      	movs	r3, #0
 8005e5a:	9301      	str	r3, [sp, #4]
 8005e5c:	887b      	ldrh	r3, [r7, #2]
 8005e5e:	9300      	str	r3, [sp, #0]
 8005e60:	460b      	mov	r3, r1
 8005e62:	4601      	mov	r1, r0
 8005e64:	6938      	ldr	r0, [r7, #16]
 8005e66:	f7ff ff77 	bl	8005d58 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f003 0303 	and.w	r3, r3, #3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d006      	beq.n	8005e84 <pbuf_alloc+0xd8>
 8005e76:	4b42      	ldr	r3, [pc, #264]	; (8005f80 <pbuf_alloc+0x1d4>)
 8005e78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e7c:	4941      	ldr	r1, [pc, #260]	; (8005f84 <pbuf_alloc+0x1d8>)
 8005e7e:	4842      	ldr	r0, [pc, #264]	; (8005f88 <pbuf_alloc+0x1dc>)
 8005e80:	f009 fc1e 	bl	800f6c0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005e84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e86:	3303      	adds	r3, #3
 8005e88:	f023 0303 	bic.w	r3, r3, #3
 8005e8c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005e90:	d106      	bne.n	8005ea0 <pbuf_alloc+0xf4>
 8005e92:	4b3b      	ldr	r3, [pc, #236]	; (8005f80 <pbuf_alloc+0x1d4>)
 8005e94:	f44f 7281 	mov.w	r2, #258	; 0x102
 8005e98:	493c      	ldr	r1, [pc, #240]	; (8005f8c <pbuf_alloc+0x1e0>)
 8005e9a:	483b      	ldr	r0, [pc, #236]	; (8005f88 <pbuf_alloc+0x1dc>)
 8005e9c:	f009 fc10 	bl	800f6c0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d102      	bne.n	8005eac <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8005eaa:	e002      	b.n	8005eb2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005eb6:	8b7a      	ldrh	r2, [r7, #26]
 8005eb8:	89fb      	ldrh	r3, [r7, #14]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005ec2:	8b7b      	ldrh	r3, [r7, #26]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d19e      	bne.n	8005e06 <pbuf_alloc+0x5a>
      break;
 8005ec8:	e055      	b.n	8005f76 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005eca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ecc:	3303      	adds	r3, #3
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	f023 0303 	bic.w	r3, r3, #3
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	88bb      	ldrh	r3, [r7, #4]
 8005ed8:	3303      	adds	r3, #3
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	f023 0303 	bic.w	r3, r3, #3
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	4413      	add	r3, r2
 8005ee4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005ee6:	8b3b      	ldrh	r3, [r7, #24]
 8005ee8:	3310      	adds	r3, #16
 8005eea:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005eec:	8b3a      	ldrh	r2, [r7, #24]
 8005eee:	88bb      	ldrh	r3, [r7, #4]
 8005ef0:	3303      	adds	r3, #3
 8005ef2:	f023 0303 	bic.w	r3, r3, #3
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d306      	bcc.n	8005f08 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005efa:	8afa      	ldrh	r2, [r7, #22]
 8005efc:	88bb      	ldrh	r3, [r7, #4]
 8005efe:	3303      	adds	r3, #3
 8005f00:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d201      	bcs.n	8005f0c <pbuf_alloc+0x160>
        return NULL;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	e035      	b.n	8005f78 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005f0c:	8afb      	ldrh	r3, [r7, #22]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7ff fa64 	bl	80053dc <mem_malloc>
 8005f14:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d101      	bne.n	8005f20 <pbuf_alloc+0x174>
        return NULL;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	e02b      	b.n	8005f78 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005f20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005f22:	3310      	adds	r3, #16
 8005f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f26:	4413      	add	r3, r2
 8005f28:	3303      	adds	r3, #3
 8005f2a:	f023 0303 	bic.w	r3, r3, #3
 8005f2e:	4618      	mov	r0, r3
 8005f30:	88b9      	ldrh	r1, [r7, #4]
 8005f32:	88ba      	ldrh	r2, [r7, #4]
 8005f34:	2300      	movs	r3, #0
 8005f36:	9301      	str	r3, [sp, #4]
 8005f38:	887b      	ldrh	r3, [r7, #2]
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	4601      	mov	r1, r0
 8005f40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f42:	f7ff ff09 	bl	8005d58 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f003 0303 	and.w	r3, r3, #3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d010      	beq.n	8005f74 <pbuf_alloc+0x1c8>
 8005f52:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <pbuf_alloc+0x1d4>)
 8005f54:	f44f 7291 	mov.w	r2, #290	; 0x122
 8005f58:	490d      	ldr	r1, [pc, #52]	; (8005f90 <pbuf_alloc+0x1e4>)
 8005f5a:	480b      	ldr	r0, [pc, #44]	; (8005f88 <pbuf_alloc+0x1dc>)
 8005f5c:	f009 fbb0 	bl	800f6c0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005f60:	e008      	b.n	8005f74 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005f62:	4b07      	ldr	r3, [pc, #28]	; (8005f80 <pbuf_alloc+0x1d4>)
 8005f64:	f240 1227 	movw	r2, #295	; 0x127
 8005f68:	490a      	ldr	r1, [pc, #40]	; (8005f94 <pbuf_alloc+0x1e8>)
 8005f6a:	4807      	ldr	r0, [pc, #28]	; (8005f88 <pbuf_alloc+0x1dc>)
 8005f6c:	f009 fba8 	bl	800f6c0 <iprintf>
      return NULL;
 8005f70:	2300      	movs	r3, #0
 8005f72:	e001      	b.n	8005f78 <pbuf_alloc+0x1cc>
      break;
 8005f74:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3728      	adds	r7, #40	; 0x28
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	08011148 	.word	0x08011148
 8005f84:	08011178 	.word	0x08011178
 8005f88:	080111a8 	.word	0x080111a8
 8005f8c:	080111d0 	.word	0x080111d0
 8005f90:	08011204 	.word	0x08011204
 8005f94:	08011230 	.word	0x08011230

08005f98 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af02      	add	r7, sp, #8
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	807b      	strh	r3, [r7, #2]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005fa8:	883b      	ldrh	r3, [r7, #0]
 8005faa:	2b41      	cmp	r3, #65	; 0x41
 8005fac:	d009      	beq.n	8005fc2 <pbuf_alloc_reference+0x2a>
 8005fae:	883b      	ldrh	r3, [r7, #0]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d006      	beq.n	8005fc2 <pbuf_alloc_reference+0x2a>
 8005fb4:	4b0f      	ldr	r3, [pc, #60]	; (8005ff4 <pbuf_alloc_reference+0x5c>)
 8005fb6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005fba:	490f      	ldr	r1, [pc, #60]	; (8005ff8 <pbuf_alloc_reference+0x60>)
 8005fbc:	480f      	ldr	r0, [pc, #60]	; (8005ffc <pbuf_alloc_reference+0x64>)
 8005fbe:	f009 fb7f 	bl	800f6c0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005fc2:	2007      	movs	r0, #7
 8005fc4:	f7ff fb78 	bl	80056b8 <memp_malloc>
 8005fc8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d101      	bne.n	8005fd4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	e00b      	b.n	8005fec <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005fd4:	8879      	ldrh	r1, [r7, #2]
 8005fd6:	887a      	ldrh	r2, [r7, #2]
 8005fd8:	2300      	movs	r3, #0
 8005fda:	9301      	str	r3, [sp, #4]
 8005fdc:	883b      	ldrh	r3, [r7, #0]
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	6879      	ldr	r1, [r7, #4]
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f7ff feb7 	bl	8005d58 <pbuf_init_alloced_pbuf>
  return p;
 8005fea:	68fb      	ldr	r3, [r7, #12]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	08011148 	.word	0x08011148
 8005ff8:	0801124c 	.word	0x0801124c
 8005ffc:	080111a8 	.word	0x080111a8

08006000 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b088      	sub	sp, #32
 8006004:	af02      	add	r7, sp, #8
 8006006:	607b      	str	r3, [r7, #4]
 8006008:	4603      	mov	r3, r0
 800600a:	73fb      	strb	r3, [r7, #15]
 800600c:	460b      	mov	r3, r1
 800600e:	81bb      	strh	r3, [r7, #12]
 8006010:	4613      	mov	r3, r2
 8006012:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006014:	7bfb      	ldrb	r3, [r7, #15]
 8006016:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006018:	8a7b      	ldrh	r3, [r7, #18]
 800601a:	3303      	adds	r3, #3
 800601c:	f023 0203 	bic.w	r2, r3, #3
 8006020:	89bb      	ldrh	r3, [r7, #12]
 8006022:	441a      	add	r2, r3
 8006024:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006026:	429a      	cmp	r2, r3
 8006028:	d901      	bls.n	800602e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800602a:	2300      	movs	r3, #0
 800602c:	e018      	b.n	8006060 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d007      	beq.n	8006044 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006034:	8a7b      	ldrh	r3, [r7, #18]
 8006036:	3303      	adds	r3, #3
 8006038:	f023 0303 	bic.w	r3, r3, #3
 800603c:	6a3a      	ldr	r2, [r7, #32]
 800603e:	4413      	add	r3, r2
 8006040:	617b      	str	r3, [r7, #20]
 8006042:	e001      	b.n	8006048 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006044:	2300      	movs	r3, #0
 8006046:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	89b9      	ldrh	r1, [r7, #12]
 800604c:	89ba      	ldrh	r2, [r7, #12]
 800604e:	2302      	movs	r3, #2
 8006050:	9301      	str	r3, [sp, #4]
 8006052:	897b      	ldrh	r3, [r7, #10]
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	460b      	mov	r3, r1
 8006058:	6979      	ldr	r1, [r7, #20]
 800605a:	f7ff fe7d 	bl	8005d58 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800605e:	687b      	ldr	r3, [r7, #4]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3718      	adds	r7, #24
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	460b      	mov	r3, r1
 8006072:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d106      	bne.n	8006088 <pbuf_realloc+0x20>
 800607a:	4b3a      	ldr	r3, [pc, #232]	; (8006164 <pbuf_realloc+0xfc>)
 800607c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006080:	4939      	ldr	r1, [pc, #228]	; (8006168 <pbuf_realloc+0x100>)
 8006082:	483a      	ldr	r0, [pc, #232]	; (800616c <pbuf_realloc+0x104>)
 8006084:	f009 fb1c 	bl	800f6c0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	891b      	ldrh	r3, [r3, #8]
 800608c:	887a      	ldrh	r2, [r7, #2]
 800608e:	429a      	cmp	r2, r3
 8006090:	d263      	bcs.n	800615a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	891a      	ldrh	r2, [r3, #8]
 8006096:	887b      	ldrh	r3, [r7, #2]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800609c:	887b      	ldrh	r3, [r7, #2]
 800609e:	817b      	strh	r3, [r7, #10]
  q = p;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80060a4:	e018      	b.n	80060d8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	895b      	ldrh	r3, [r3, #10]
 80060aa:	897a      	ldrh	r2, [r7, #10]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	891a      	ldrh	r2, [r3, #8]
 80060b4:	893b      	ldrh	r3, [r7, #8]
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d106      	bne.n	80060d8 <pbuf_realloc+0x70>
 80060ca:	4b26      	ldr	r3, [pc, #152]	; (8006164 <pbuf_realloc+0xfc>)
 80060cc:	f240 12af 	movw	r2, #431	; 0x1af
 80060d0:	4927      	ldr	r1, [pc, #156]	; (8006170 <pbuf_realloc+0x108>)
 80060d2:	4826      	ldr	r0, [pc, #152]	; (800616c <pbuf_realloc+0x104>)
 80060d4:	f009 faf4 	bl	800f6c0 <iprintf>
  while (rem_len > q->len) {
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	895b      	ldrh	r3, [r3, #10]
 80060dc:	897a      	ldrh	r2, [r7, #10]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d8e1      	bhi.n	80060a6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	7b1b      	ldrb	r3, [r3, #12]
 80060e6:	f003 030f 	and.w	r3, r3, #15
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d121      	bne.n	8006132 <pbuf_realloc+0xca>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	895b      	ldrh	r3, [r3, #10]
 80060f2:	897a      	ldrh	r2, [r7, #10]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d01c      	beq.n	8006132 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	7b5b      	ldrb	r3, [r3, #13]
 80060fc:	f003 0302 	and.w	r3, r3, #2
 8006100:	2b00      	cmp	r3, #0
 8006102:	d116      	bne.n	8006132 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	685a      	ldr	r2, [r3, #4]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	b29a      	uxth	r2, r3
 800610e:	897b      	ldrh	r3, [r7, #10]
 8006110:	4413      	add	r3, r2
 8006112:	b29b      	uxth	r3, r3
 8006114:	4619      	mov	r1, r3
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f7ff f864 	bl	80051e4 <mem_trim>
 800611c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d106      	bne.n	8006132 <pbuf_realloc+0xca>
 8006124:	4b0f      	ldr	r3, [pc, #60]	; (8006164 <pbuf_realloc+0xfc>)
 8006126:	f240 12bd 	movw	r2, #445	; 0x1bd
 800612a:	4912      	ldr	r1, [pc, #72]	; (8006174 <pbuf_realloc+0x10c>)
 800612c:	480f      	ldr	r0, [pc, #60]	; (800616c <pbuf_realloc+0x104>)
 800612e:	f009 fac7 	bl	800f6c0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	897a      	ldrh	r2, [r7, #10]
 8006136:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	895a      	ldrh	r2, [r3, #10]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d004      	beq.n	8006152 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4618      	mov	r0, r3
 800614e:	f000 f911 	bl	8006374 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	601a      	str	r2, [r3, #0]
 8006158:	e000      	b.n	800615c <pbuf_realloc+0xf4>
    return;
 800615a:	bf00      	nop

}
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	08011148 	.word	0x08011148
 8006168:	08011260 	.word	0x08011260
 800616c:	080111a8 	.word	0x080111a8
 8006170:	08011278 	.word	0x08011278
 8006174:	08011290 	.word	0x08011290

08006178 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b086      	sub	sp, #24
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	4613      	mov	r3, r2
 8006184:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d106      	bne.n	800619a <pbuf_add_header_impl+0x22>
 800618c:	4b2b      	ldr	r3, [pc, #172]	; (800623c <pbuf_add_header_impl+0xc4>)
 800618e:	f240 12df 	movw	r2, #479	; 0x1df
 8006192:	492b      	ldr	r1, [pc, #172]	; (8006240 <pbuf_add_header_impl+0xc8>)
 8006194:	482b      	ldr	r0, [pc, #172]	; (8006244 <pbuf_add_header_impl+0xcc>)
 8006196:	f009 fa93 	bl	800f6c0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d003      	beq.n	80061a8 <pbuf_add_header_impl+0x30>
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061a6:	d301      	bcc.n	80061ac <pbuf_add_header_impl+0x34>
    return 1;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e043      	b.n	8006234 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <pbuf_add_header_impl+0x3e>
    return 0;
 80061b2:	2300      	movs	r3, #0
 80061b4:	e03e      	b.n	8006234 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	891a      	ldrh	r2, [r3, #8]
 80061be:	8a7b      	ldrh	r3, [r7, #18]
 80061c0:	4413      	add	r3, r2
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	8a7a      	ldrh	r2, [r7, #18]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d901      	bls.n	80061ce <pbuf_add_header_impl+0x56>
    return 1;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e032      	b.n	8006234 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	7b1b      	ldrb	r3, [r3, #12]
 80061d2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80061d4:	8a3b      	ldrh	r3, [r7, #16]
 80061d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00c      	beq.n	80061f8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	425b      	negs	r3, r3
 80061e6:	4413      	add	r3, r2
 80061e8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	3310      	adds	r3, #16
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d20d      	bcs.n	8006210 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e01d      	b.n	8006234 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80061f8:	79fb      	ldrb	r3, [r7, #7]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d006      	beq.n	800620c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	425b      	negs	r3, r3
 8006206:	4413      	add	r3, r2
 8006208:	617b      	str	r3, [r7, #20]
 800620a:	e001      	b.n	8006210 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800620c:	2301      	movs	r3, #1
 800620e:	e011      	b.n	8006234 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	895a      	ldrh	r2, [r3, #10]
 800621a:	8a7b      	ldrh	r3, [r7, #18]
 800621c:	4413      	add	r3, r2
 800621e:	b29a      	uxth	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	891a      	ldrh	r2, [r3, #8]
 8006228:	8a7b      	ldrh	r3, [r7, #18]
 800622a:	4413      	add	r3, r2
 800622c:	b29a      	uxth	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	811a      	strh	r2, [r3, #8]


  return 0;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3718      	adds	r7, #24
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	08011148 	.word	0x08011148
 8006240:	080112ac 	.word	0x080112ac
 8006244:	080111a8 	.word	0x080111a8

08006248 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006252:	2200      	movs	r2, #0
 8006254:	6839      	ldr	r1, [r7, #0]
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f7ff ff8e 	bl	8006178 <pbuf_add_header_impl>
 800625c:	4603      	mov	r3, r0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
	...

08006268 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d106      	bne.n	8006286 <pbuf_remove_header+0x1e>
 8006278:	4b20      	ldr	r3, [pc, #128]	; (80062fc <pbuf_remove_header+0x94>)
 800627a:	f240 224b 	movw	r2, #587	; 0x24b
 800627e:	4920      	ldr	r1, [pc, #128]	; (8006300 <pbuf_remove_header+0x98>)
 8006280:	4820      	ldr	r0, [pc, #128]	; (8006304 <pbuf_remove_header+0x9c>)
 8006282:	f009 fa1d 	bl	800f6c0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <pbuf_remove_header+0x2c>
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006292:	d301      	bcc.n	8006298 <pbuf_remove_header+0x30>
    return 1;
 8006294:	2301      	movs	r3, #1
 8006296:	e02c      	b.n	80062f2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <pbuf_remove_header+0x3a>
    return 0;
 800629e:	2300      	movs	r3, #0
 80062a0:	e027      	b.n	80062f2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	895b      	ldrh	r3, [r3, #10]
 80062aa:	89fa      	ldrh	r2, [r7, #14]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d908      	bls.n	80062c2 <pbuf_remove_header+0x5a>
 80062b0:	4b12      	ldr	r3, [pc, #72]	; (80062fc <pbuf_remove_header+0x94>)
 80062b2:	f240 2255 	movw	r2, #597	; 0x255
 80062b6:	4914      	ldr	r1, [pc, #80]	; (8006308 <pbuf_remove_header+0xa0>)
 80062b8:	4812      	ldr	r0, [pc, #72]	; (8006304 <pbuf_remove_header+0x9c>)
 80062ba:	f009 fa01 	bl	800f6c0 <iprintf>
 80062be:	2301      	movs	r3, #1
 80062c0:	e017      	b.n	80062f2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	441a      	add	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	895a      	ldrh	r2, [r3, #10]
 80062d8:	89fb      	ldrh	r3, [r7, #14]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	b29a      	uxth	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	891a      	ldrh	r2, [r3, #8]
 80062e6:	89fb      	ldrh	r3, [r7, #14]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	08011148 	.word	0x08011148
 8006300:	080112ac 	.word	0x080112ac
 8006304:	080111a8 	.word	0x080111a8
 8006308:	080112b8 	.word	0x080112b8

0800630c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	460b      	mov	r3, r1
 8006316:	807b      	strh	r3, [r7, #2]
 8006318:	4613      	mov	r3, r2
 800631a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800631c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006320:	2b00      	cmp	r3, #0
 8006322:	da08      	bge.n	8006336 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006324:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006328:	425b      	negs	r3, r3
 800632a:	4619      	mov	r1, r3
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f7ff ff9b 	bl	8006268 <pbuf_remove_header>
 8006332:	4603      	mov	r3, r0
 8006334:	e007      	b.n	8006346 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006336:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800633a:	787a      	ldrb	r2, [r7, #1]
 800633c:	4619      	mov	r1, r3
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f7ff ff1a 	bl	8006178 <pbuf_add_header_impl>
 8006344:	4603      	mov	r3, r0
  }
}
 8006346:	4618      	mov	r0, r3
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b082      	sub	sp, #8
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	460b      	mov	r3, r1
 8006358:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800635a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800635e:	2201      	movs	r2, #1
 8006360:	4619      	mov	r1, r3
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7ff ffd2 	bl	800630c <pbuf_header_impl>
 8006368:	4603      	mov	r3, r0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
	...

08006374 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b086      	sub	sp, #24
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10b      	bne.n	800639a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d106      	bne.n	8006396 <pbuf_free+0x22>
 8006388:	4b38      	ldr	r3, [pc, #224]	; (800646c <pbuf_free+0xf8>)
 800638a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800638e:	4938      	ldr	r1, [pc, #224]	; (8006470 <pbuf_free+0xfc>)
 8006390:	4838      	ldr	r0, [pc, #224]	; (8006474 <pbuf_free+0x100>)
 8006392:	f009 f995 	bl	800f6c0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006396:	2300      	movs	r3, #0
 8006398:	e063      	b.n	8006462 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800639a:	2300      	movs	r3, #0
 800639c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800639e:	e05c      	b.n	800645a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	7b9b      	ldrb	r3, [r3, #14]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d106      	bne.n	80063b6 <pbuf_free+0x42>
 80063a8:	4b30      	ldr	r3, [pc, #192]	; (800646c <pbuf_free+0xf8>)
 80063aa:	f240 22f1 	movw	r2, #753	; 0x2f1
 80063ae:	4932      	ldr	r1, [pc, #200]	; (8006478 <pbuf_free+0x104>)
 80063b0:	4830      	ldr	r0, [pc, #192]	; (8006474 <pbuf_free+0x100>)
 80063b2:	f009 f985 	bl	800f6c0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	7b9b      	ldrb	r3, [r3, #14]
 80063ba:	3b01      	subs	r3, #1
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	739a      	strb	r2, [r3, #14]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	7b9b      	ldrb	r3, [r3, #14]
 80063c6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80063c8:	7dbb      	ldrb	r3, [r7, #22]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d143      	bne.n	8006456 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	7b1b      	ldrb	r3, [r3, #12]
 80063d8:	f003 030f 	and.w	r3, r3, #15
 80063dc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	7b5b      	ldrb	r3, [r3, #13]
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d011      	beq.n	800640e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d106      	bne.n	8006404 <pbuf_free+0x90>
 80063f6:	4b1d      	ldr	r3, [pc, #116]	; (800646c <pbuf_free+0xf8>)
 80063f8:	f240 22ff 	movw	r2, #767	; 0x2ff
 80063fc:	491f      	ldr	r1, [pc, #124]	; (800647c <pbuf_free+0x108>)
 80063fe:	481d      	ldr	r0, [pc, #116]	; (8006474 <pbuf_free+0x100>)
 8006400:	f009 f95e 	bl	800f6c0 <iprintf>
        pc->custom_free_function(p);
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	4798      	blx	r3
 800640c:	e01d      	b.n	800644a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800640e:	7bfb      	ldrb	r3, [r7, #15]
 8006410:	2b02      	cmp	r3, #2
 8006412:	d104      	bne.n	800641e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006414:	6879      	ldr	r1, [r7, #4]
 8006416:	2008      	movs	r0, #8
 8006418:	f7ff f99a 	bl	8005750 <memp_free>
 800641c:	e015      	b.n	800644a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800641e:	7bfb      	ldrb	r3, [r7, #15]
 8006420:	2b01      	cmp	r3, #1
 8006422:	d104      	bne.n	800642e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006424:	6879      	ldr	r1, [r7, #4]
 8006426:	2007      	movs	r0, #7
 8006428:	f7ff f992 	bl	8005750 <memp_free>
 800642c:	e00d      	b.n	800644a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800642e:	7bfb      	ldrb	r3, [r7, #15]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d103      	bne.n	800643c <pbuf_free+0xc8>
          mem_free(p);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f7fe fe6b 	bl	8005110 <mem_free>
 800643a:	e006      	b.n	800644a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800643c:	4b0b      	ldr	r3, [pc, #44]	; (800646c <pbuf_free+0xf8>)
 800643e:	f240 320f 	movw	r2, #783	; 0x30f
 8006442:	490f      	ldr	r1, [pc, #60]	; (8006480 <pbuf_free+0x10c>)
 8006444:	480b      	ldr	r0, [pc, #44]	; (8006474 <pbuf_free+0x100>)
 8006446:	f009 f93b 	bl	800f6c0 <iprintf>
        }
      }
      count++;
 800644a:	7dfb      	ldrb	r3, [r7, #23]
 800644c:	3301      	adds	r3, #1
 800644e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	607b      	str	r3, [r7, #4]
 8006454:	e001      	b.n	800645a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006456:	2300      	movs	r3, #0
 8006458:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d19f      	bne.n	80063a0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006460:	7dfb      	ldrb	r3, [r7, #23]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3718      	adds	r7, #24
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	08011148 	.word	0x08011148
 8006470:	080112ac 	.word	0x080112ac
 8006474:	080111a8 	.word	0x080111a8
 8006478:	080112d8 	.word	0x080112d8
 800647c:	080112f0 	.word	0x080112f0
 8006480:	08011314 	.word	0x08011314

08006484 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800648c:	2300      	movs	r3, #0
 800648e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006490:	e005      	b.n	800649e <pbuf_clen+0x1a>
    ++len;
 8006492:	89fb      	ldrh	r3, [r7, #14]
 8006494:	3301      	adds	r3, #1
 8006496:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1f6      	bne.n	8006492 <pbuf_clen+0xe>
  }
  return len;
 80064a4:	89fb      	ldrh	r3, [r7, #14]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
	...

080064b4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d010      	beq.n	80064e4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	7b9b      	ldrb	r3, [r3, #14]
 80064c6:	3301      	adds	r3, #1
 80064c8:	b2da      	uxtb	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	7b9b      	ldrb	r3, [r3, #14]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d106      	bne.n	80064e4 <pbuf_ref+0x30>
 80064d6:	4b05      	ldr	r3, [pc, #20]	; (80064ec <pbuf_ref+0x38>)
 80064d8:	f240 3242 	movw	r2, #834	; 0x342
 80064dc:	4904      	ldr	r1, [pc, #16]	; (80064f0 <pbuf_ref+0x3c>)
 80064de:	4805      	ldr	r0, [pc, #20]	; (80064f4 <pbuf_ref+0x40>)
 80064e0:	f009 f8ee 	bl	800f6c0 <iprintf>
  }
}
 80064e4:	bf00      	nop
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	08011148 	.word	0x08011148
 80064f0:	08011328 	.word	0x08011328
 80064f4:	080111a8 	.word	0x080111a8

080064f8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d002      	beq.n	800650e <pbuf_cat+0x16>
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d107      	bne.n	800651e <pbuf_cat+0x26>
 800650e:	4b20      	ldr	r3, [pc, #128]	; (8006590 <pbuf_cat+0x98>)
 8006510:	f240 3259 	movw	r2, #857	; 0x359
 8006514:	491f      	ldr	r1, [pc, #124]	; (8006594 <pbuf_cat+0x9c>)
 8006516:	4820      	ldr	r0, [pc, #128]	; (8006598 <pbuf_cat+0xa0>)
 8006518:	f009 f8d2 	bl	800f6c0 <iprintf>
 800651c:	e034      	b.n	8006588 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	60fb      	str	r3, [r7, #12]
 8006522:	e00a      	b.n	800653a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	891a      	ldrh	r2, [r3, #8]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	891b      	ldrh	r3, [r3, #8]
 800652c:	4413      	add	r3, r2
 800652e:	b29a      	uxth	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	60fb      	str	r3, [r7, #12]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1f0      	bne.n	8006524 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	891a      	ldrh	r2, [r3, #8]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	895b      	ldrh	r3, [r3, #10]
 800654a:	429a      	cmp	r2, r3
 800654c:	d006      	beq.n	800655c <pbuf_cat+0x64>
 800654e:	4b10      	ldr	r3, [pc, #64]	; (8006590 <pbuf_cat+0x98>)
 8006550:	f240 3262 	movw	r2, #866	; 0x362
 8006554:	4911      	ldr	r1, [pc, #68]	; (800659c <pbuf_cat+0xa4>)
 8006556:	4810      	ldr	r0, [pc, #64]	; (8006598 <pbuf_cat+0xa0>)
 8006558:	f009 f8b2 	bl	800f6c0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d006      	beq.n	8006572 <pbuf_cat+0x7a>
 8006564:	4b0a      	ldr	r3, [pc, #40]	; (8006590 <pbuf_cat+0x98>)
 8006566:	f240 3263 	movw	r2, #867	; 0x363
 800656a:	490d      	ldr	r1, [pc, #52]	; (80065a0 <pbuf_cat+0xa8>)
 800656c:	480a      	ldr	r0, [pc, #40]	; (8006598 <pbuf_cat+0xa0>)
 800656e:	f009 f8a7 	bl	800f6c0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	891a      	ldrh	r2, [r3, #8]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	891b      	ldrh	r3, [r3, #8]
 800657a:	4413      	add	r3, r2
 800657c:	b29a      	uxth	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	683a      	ldr	r2, [r7, #0]
 8006586:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	08011148 	.word	0x08011148
 8006594:	0801133c 	.word	0x0801133c
 8006598:	080111a8 	.word	0x080111a8
 800659c:	08011374 	.word	0x08011374
 80065a0:	080113a4 	.word	0x080113a4

080065a4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80065ae:	6839      	ldr	r1, [r7, #0]
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f7ff ffa1 	bl	80064f8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80065b6:	6838      	ldr	r0, [r7, #0]
 80065b8:	f7ff ff7c 	bl	80064b4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80065bc:	bf00      	nop
 80065be:	3708      	adds	r7, #8
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80065ce:	2300      	movs	r3, #0
 80065d0:	617b      	str	r3, [r7, #20]
 80065d2:	2300      	movs	r3, #0
 80065d4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d008      	beq.n	80065ee <pbuf_copy+0x2a>
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d005      	beq.n	80065ee <pbuf_copy+0x2a>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	891a      	ldrh	r2, [r3, #8]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	891b      	ldrh	r3, [r3, #8]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d209      	bcs.n	8006602 <pbuf_copy+0x3e>
 80065ee:	4b57      	ldr	r3, [pc, #348]	; (800674c <pbuf_copy+0x188>)
 80065f0:	f240 32c9 	movw	r2, #969	; 0x3c9
 80065f4:	4956      	ldr	r1, [pc, #344]	; (8006750 <pbuf_copy+0x18c>)
 80065f6:	4857      	ldr	r0, [pc, #348]	; (8006754 <pbuf_copy+0x190>)
 80065f8:	f009 f862 	bl	800f6c0 <iprintf>
 80065fc:	f06f 030f 	mvn.w	r3, #15
 8006600:	e09f      	b.n	8006742 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	895b      	ldrh	r3, [r3, #10]
 8006606:	461a      	mov	r2, r3
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	1ad2      	subs	r2, r2, r3
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	895b      	ldrh	r3, [r3, #10]
 8006610:	4619      	mov	r1, r3
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	1acb      	subs	r3, r1, r3
 8006616:	429a      	cmp	r2, r3
 8006618:	d306      	bcc.n	8006628 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	895b      	ldrh	r3, [r3, #10]
 800661e:	461a      	mov	r2, r3
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	60fb      	str	r3, [r7, #12]
 8006626:	e005      	b.n	8006634 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	895b      	ldrh	r3, [r3, #10]
 800662c:	461a      	mov	r2, r3
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685a      	ldr	r2, [r3, #4]
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	18d0      	adds	r0, r2, r3
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	685a      	ldr	r2, [r3, #4]
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	4413      	add	r3, r2
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	4619      	mov	r1, r3
 8006648:	f009 f80a 	bl	800f660 <memcpy>
    offset_to += len;
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	4413      	add	r3, r2
 8006652:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	4413      	add	r3, r2
 800665a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	895b      	ldrh	r3, [r3, #10]
 8006660:	461a      	mov	r2, r3
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	4293      	cmp	r3, r2
 8006666:	d906      	bls.n	8006676 <pbuf_copy+0xb2>
 8006668:	4b38      	ldr	r3, [pc, #224]	; (800674c <pbuf_copy+0x188>)
 800666a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800666e:	493a      	ldr	r1, [pc, #232]	; (8006758 <pbuf_copy+0x194>)
 8006670:	4838      	ldr	r0, [pc, #224]	; (8006754 <pbuf_copy+0x190>)
 8006672:	f009 f825 	bl	800f6c0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	895b      	ldrh	r3, [r3, #10]
 800667a:	461a      	mov	r2, r3
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	4293      	cmp	r3, r2
 8006680:	d906      	bls.n	8006690 <pbuf_copy+0xcc>
 8006682:	4b32      	ldr	r3, [pc, #200]	; (800674c <pbuf_copy+0x188>)
 8006684:	f240 32da 	movw	r2, #986	; 0x3da
 8006688:	4934      	ldr	r1, [pc, #208]	; (800675c <pbuf_copy+0x198>)
 800668a:	4832      	ldr	r0, [pc, #200]	; (8006754 <pbuf_copy+0x190>)
 800668c:	f009 f818 	bl	800f6c0 <iprintf>
    if (offset_from >= p_from->len) {
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	895b      	ldrh	r3, [r3, #10]
 8006694:	461a      	mov	r2, r3
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	4293      	cmp	r3, r2
 800669a:	d304      	bcc.n	80066a6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800669c:	2300      	movs	r3, #0
 800669e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	895b      	ldrh	r3, [r3, #10]
 80066aa:	461a      	mov	r2, r3
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d114      	bne.n	80066dc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80066b2:	2300      	movs	r3, #0
 80066b4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10c      	bne.n	80066dc <pbuf_copy+0x118>
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d009      	beq.n	80066dc <pbuf_copy+0x118>
 80066c8:	4b20      	ldr	r3, [pc, #128]	; (800674c <pbuf_copy+0x188>)
 80066ca:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80066ce:	4924      	ldr	r1, [pc, #144]	; (8006760 <pbuf_copy+0x19c>)
 80066d0:	4820      	ldr	r0, [pc, #128]	; (8006754 <pbuf_copy+0x190>)
 80066d2:	f008 fff5 	bl	800f6c0 <iprintf>
 80066d6:	f06f 030f 	mvn.w	r3, #15
 80066da:	e032      	b.n	8006742 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d013      	beq.n	800670a <pbuf_copy+0x146>
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	895a      	ldrh	r2, [r3, #10]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	891b      	ldrh	r3, [r3, #8]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d10d      	bne.n	800670a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d009      	beq.n	800670a <pbuf_copy+0x146>
 80066f6:	4b15      	ldr	r3, [pc, #84]	; (800674c <pbuf_copy+0x188>)
 80066f8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80066fc:	4919      	ldr	r1, [pc, #100]	; (8006764 <pbuf_copy+0x1a0>)
 80066fe:	4815      	ldr	r0, [pc, #84]	; (8006754 <pbuf_copy+0x190>)
 8006700:	f008 ffde 	bl	800f6c0 <iprintf>
 8006704:	f06f 0305 	mvn.w	r3, #5
 8006708:	e01b      	b.n	8006742 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d013      	beq.n	8006738 <pbuf_copy+0x174>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	895a      	ldrh	r2, [r3, #10]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	891b      	ldrh	r3, [r3, #8]
 8006718:	429a      	cmp	r2, r3
 800671a:	d10d      	bne.n	8006738 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d009      	beq.n	8006738 <pbuf_copy+0x174>
 8006724:	4b09      	ldr	r3, [pc, #36]	; (800674c <pbuf_copy+0x188>)
 8006726:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800672a:	490e      	ldr	r1, [pc, #56]	; (8006764 <pbuf_copy+0x1a0>)
 800672c:	4809      	ldr	r0, [pc, #36]	; (8006754 <pbuf_copy+0x190>)
 800672e:	f008 ffc7 	bl	800f6c0 <iprintf>
 8006732:	f06f 0305 	mvn.w	r3, #5
 8006736:	e004      	b.n	8006742 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	f47f af61 	bne.w	8006602 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3718      	adds	r7, #24
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	08011148 	.word	0x08011148
 8006750:	080113f0 	.word	0x080113f0
 8006754:	080111a8 	.word	0x080111a8
 8006758:	08011420 	.word	0x08011420
 800675c:	08011438 	.word	0x08011438
 8006760:	08011454 	.word	0x08011454
 8006764:	08011464 	.word	0x08011464

08006768 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b088      	sub	sp, #32
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	4611      	mov	r1, r2
 8006774:	461a      	mov	r2, r3
 8006776:	460b      	mov	r3, r1
 8006778:	80fb      	strh	r3, [r7, #6]
 800677a:	4613      	mov	r3, r2
 800677c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800677e:	2300      	movs	r3, #0
 8006780:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006782:	2300      	movs	r3, #0
 8006784:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d108      	bne.n	800679e <pbuf_copy_partial+0x36>
 800678c:	4b2b      	ldr	r3, [pc, #172]	; (800683c <pbuf_copy_partial+0xd4>)
 800678e:	f240 420a 	movw	r2, #1034	; 0x40a
 8006792:	492b      	ldr	r1, [pc, #172]	; (8006840 <pbuf_copy_partial+0xd8>)
 8006794:	482b      	ldr	r0, [pc, #172]	; (8006844 <pbuf_copy_partial+0xdc>)
 8006796:	f008 ff93 	bl	800f6c0 <iprintf>
 800679a:	2300      	movs	r3, #0
 800679c:	e04a      	b.n	8006834 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d108      	bne.n	80067b6 <pbuf_copy_partial+0x4e>
 80067a4:	4b25      	ldr	r3, [pc, #148]	; (800683c <pbuf_copy_partial+0xd4>)
 80067a6:	f240 420b 	movw	r2, #1035	; 0x40b
 80067aa:	4927      	ldr	r1, [pc, #156]	; (8006848 <pbuf_copy_partial+0xe0>)
 80067ac:	4825      	ldr	r0, [pc, #148]	; (8006844 <pbuf_copy_partial+0xdc>)
 80067ae:	f008 ff87 	bl	800f6c0 <iprintf>
 80067b2:	2300      	movs	r3, #0
 80067b4:	e03e      	b.n	8006834 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	61fb      	str	r3, [r7, #28]
 80067ba:	e034      	b.n	8006826 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80067bc:	88bb      	ldrh	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00a      	beq.n	80067d8 <pbuf_copy_partial+0x70>
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	895b      	ldrh	r3, [r3, #10]
 80067c6:	88ba      	ldrh	r2, [r7, #4]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d305      	bcc.n	80067d8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	895b      	ldrh	r3, [r3, #10]
 80067d0:	88ba      	ldrh	r2, [r7, #4]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	80bb      	strh	r3, [r7, #4]
 80067d6:	e023      	b.n	8006820 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	895a      	ldrh	r2, [r3, #10]
 80067dc:	88bb      	ldrh	r3, [r7, #4]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80067e2:	8b3a      	ldrh	r2, [r7, #24]
 80067e4:	88fb      	ldrh	r3, [r7, #6]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d901      	bls.n	80067ee <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80067ea:	88fb      	ldrh	r3, [r7, #6]
 80067ec:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80067ee:	8b7b      	ldrh	r3, [r7, #26]
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	18d0      	adds	r0, r2, r3
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	685a      	ldr	r2, [r3, #4]
 80067f8:	88bb      	ldrh	r3, [r7, #4]
 80067fa:	4413      	add	r3, r2
 80067fc:	8b3a      	ldrh	r2, [r7, #24]
 80067fe:	4619      	mov	r1, r3
 8006800:	f008 ff2e 	bl	800f660 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006804:	8afa      	ldrh	r2, [r7, #22]
 8006806:	8b3b      	ldrh	r3, [r7, #24]
 8006808:	4413      	add	r3, r2
 800680a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800680c:	8b7a      	ldrh	r2, [r7, #26]
 800680e:	8b3b      	ldrh	r3, [r7, #24]
 8006810:	4413      	add	r3, r2
 8006812:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006814:	88fa      	ldrh	r2, [r7, #6]
 8006816:	8b3b      	ldrh	r3, [r7, #24]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800681c:	2300      	movs	r3, #0
 800681e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	61fb      	str	r3, [r7, #28]
 8006826:	88fb      	ldrh	r3, [r7, #6]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d002      	beq.n	8006832 <pbuf_copy_partial+0xca>
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1c4      	bne.n	80067bc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006832:	8afb      	ldrh	r3, [r7, #22]
}
 8006834:	4618      	mov	r0, r3
 8006836:	3720      	adds	r7, #32
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	08011148 	.word	0x08011148
 8006840:	08011490 	.word	0x08011490
 8006844:	080111a8 	.word	0x080111a8
 8006848:	080114b0 	.word	0x080114b0

0800684c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b088      	sub	sp, #32
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	4613      	mov	r3, r2
 8006858:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800685a:	88fb      	ldrh	r3, [r7, #6]
 800685c:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800685e:	2300      	movs	r3, #0
 8006860:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d109      	bne.n	800687c <pbuf_take+0x30>
 8006868:	4b3a      	ldr	r3, [pc, #232]	; (8006954 <pbuf_take+0x108>)
 800686a:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800686e:	493a      	ldr	r1, [pc, #232]	; (8006958 <pbuf_take+0x10c>)
 8006870:	483a      	ldr	r0, [pc, #232]	; (800695c <pbuf_take+0x110>)
 8006872:	f008 ff25 	bl	800f6c0 <iprintf>
 8006876:	f06f 030f 	mvn.w	r3, #15
 800687a:	e067      	b.n	800694c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d109      	bne.n	8006896 <pbuf_take+0x4a>
 8006882:	4b34      	ldr	r3, [pc, #208]	; (8006954 <pbuf_take+0x108>)
 8006884:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8006888:	4935      	ldr	r1, [pc, #212]	; (8006960 <pbuf_take+0x114>)
 800688a:	4834      	ldr	r0, [pc, #208]	; (800695c <pbuf_take+0x110>)
 800688c:	f008 ff18 	bl	800f6c0 <iprintf>
 8006890:	f06f 030f 	mvn.w	r3, #15
 8006894:	e05a      	b.n	800694c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	891b      	ldrh	r3, [r3, #8]
 800689a:	88fa      	ldrh	r2, [r7, #6]
 800689c:	429a      	cmp	r2, r3
 800689e:	d909      	bls.n	80068b4 <pbuf_take+0x68>
 80068a0:	4b2c      	ldr	r3, [pc, #176]	; (8006954 <pbuf_take+0x108>)
 80068a2:	f240 42b5 	movw	r2, #1205	; 0x4b5
 80068a6:	492f      	ldr	r1, [pc, #188]	; (8006964 <pbuf_take+0x118>)
 80068a8:	482c      	ldr	r0, [pc, #176]	; (800695c <pbuf_take+0x110>)
 80068aa:	f008 ff09 	bl	800f6c0 <iprintf>
 80068ae:	f04f 33ff 	mov.w	r3, #4294967295
 80068b2:	e04b      	b.n	800694c <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d007      	beq.n	80068ca <pbuf_take+0x7e>
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d004      	beq.n	80068ca <pbuf_take+0x7e>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	891b      	ldrh	r3, [r3, #8]
 80068c4:	88fa      	ldrh	r2, [r7, #6]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d902      	bls.n	80068d0 <pbuf_take+0x84>
    return ERR_ARG;
 80068ca:	f06f 030f 	mvn.w	r3, #15
 80068ce:	e03d      	b.n	800694c <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	61fb      	str	r3, [r7, #28]
 80068d4:	e028      	b.n	8006928 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d106      	bne.n	80068ea <pbuf_take+0x9e>
 80068dc:	4b1d      	ldr	r3, [pc, #116]	; (8006954 <pbuf_take+0x108>)
 80068de:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80068e2:	4921      	ldr	r1, [pc, #132]	; (8006968 <pbuf_take+0x11c>)
 80068e4:	481d      	ldr	r0, [pc, #116]	; (800695c <pbuf_take+0x110>)
 80068e6:	f008 feeb 	bl	800f6c0 <iprintf>
    buf_copy_len = total_copy_len;
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	895b      	ldrh	r3, [r3, #10]
 80068f2:	461a      	mov	r2, r3
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d902      	bls.n	8006900 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	895b      	ldrh	r3, [r3, #10]
 80068fe:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	6858      	ldr	r0, [r3, #4]
 8006904:	68ba      	ldr	r2, [r7, #8]
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	4413      	add	r3, r2
 800690a:	69ba      	ldr	r2, [r7, #24]
 800690c:	4619      	mov	r1, r3
 800690e:	f008 fea7 	bl	800f660 <memcpy>
    total_copy_len -= buf_copy_len;
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	4413      	add	r3, r2
 8006920:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	61fb      	str	r3, [r7, #28]
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1d3      	bne.n	80068d6 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d103      	bne.n	800693c <pbuf_take+0xf0>
 8006934:	88fb      	ldrh	r3, [r7, #6]
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	429a      	cmp	r2, r3
 800693a:	d006      	beq.n	800694a <pbuf_take+0xfe>
 800693c:	4b05      	ldr	r3, [pc, #20]	; (8006954 <pbuf_take+0x108>)
 800693e:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8006942:	490a      	ldr	r1, [pc, #40]	; (800696c <pbuf_take+0x120>)
 8006944:	4805      	ldr	r0, [pc, #20]	; (800695c <pbuf_take+0x110>)
 8006946:	f008 febb 	bl	800f6c0 <iprintf>
  return ERR_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3720      	adds	r7, #32
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	08011148 	.word	0x08011148
 8006958:	08011520 	.word	0x08011520
 800695c:	080111a8 	.word	0x080111a8
 8006960:	08011538 	.word	0x08011538
 8006964:	08011554 	.word	0x08011554
 8006968:	08011574 	.word	0x08011574
 800696c:	0801158c 	.word	0x0801158c

08006970 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	4603      	mov	r3, r0
 8006978:	603a      	str	r2, [r7, #0]
 800697a:	71fb      	strb	r3, [r7, #7]
 800697c:	460b      	mov	r3, r1
 800697e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	8919      	ldrh	r1, [r3, #8]
 8006984:	88ba      	ldrh	r2, [r7, #4]
 8006986:	79fb      	ldrb	r3, [r7, #7]
 8006988:	4618      	mov	r0, r3
 800698a:	f7ff fa0f 	bl	8005dac <pbuf_alloc>
 800698e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <pbuf_clone+0x2a>
    return NULL;
 8006996:	2300      	movs	r3, #0
 8006998:	e011      	b.n	80069be <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800699a:	6839      	ldr	r1, [r7, #0]
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f7ff fe11 	bl	80065c4 <pbuf_copy>
 80069a2:	4603      	mov	r3, r0
 80069a4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80069a6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d006      	beq.n	80069bc <pbuf_clone+0x4c>
 80069ae:	4b06      	ldr	r3, [pc, #24]	; (80069c8 <pbuf_clone+0x58>)
 80069b0:	f240 5224 	movw	r2, #1316	; 0x524
 80069b4:	4905      	ldr	r1, [pc, #20]	; (80069cc <pbuf_clone+0x5c>)
 80069b6:	4806      	ldr	r0, [pc, #24]	; (80069d0 <pbuf_clone+0x60>)
 80069b8:	f008 fe82 	bl	800f6c0 <iprintf>
  return q;
 80069bc:	68fb      	ldr	r3, [r7, #12]
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	08011148 	.word	0x08011148
 80069cc:	080115bc 	.word	0x080115bc
 80069d0:	080111a8 	.word	0x080111a8

080069d4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80069d8:	f008 fe8a 	bl	800f6f0 <rand>
 80069dc:	4603      	mov	r3, r0
 80069de:	b29b      	uxth	r3, r3
 80069e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	4b01      	ldr	r3, [pc, #4]	; (80069f4 <tcp_init+0x20>)
 80069ee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80069f0:	bf00      	nop
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	2000000a 	.word	0x2000000a

080069f8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	7d1b      	ldrb	r3, [r3, #20]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d105      	bne.n	8006a14 <tcp_free+0x1c>
 8006a08:	4b06      	ldr	r3, [pc, #24]	; (8006a24 <tcp_free+0x2c>)
 8006a0a:	22d4      	movs	r2, #212	; 0xd4
 8006a0c:	4906      	ldr	r1, [pc, #24]	; (8006a28 <tcp_free+0x30>)
 8006a0e:	4807      	ldr	r0, [pc, #28]	; (8006a2c <tcp_free+0x34>)
 8006a10:	f008 fe56 	bl	800f6c0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006a14:	6879      	ldr	r1, [r7, #4]
 8006a16:	2001      	movs	r0, #1
 8006a18:	f7fe fe9a 	bl	8005750 <memp_free>
}
 8006a1c:	bf00      	nop
 8006a1e:	3708      	adds	r7, #8
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	08011648 	.word	0x08011648
 8006a28:	08011678 	.word	0x08011678
 8006a2c:	0801168c 	.word	0x0801168c

08006a30 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	7d1b      	ldrb	r3, [r3, #20]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d105      	bne.n	8006a4c <tcp_free_listen+0x1c>
 8006a40:	4b06      	ldr	r3, [pc, #24]	; (8006a5c <tcp_free_listen+0x2c>)
 8006a42:	22df      	movs	r2, #223	; 0xdf
 8006a44:	4906      	ldr	r1, [pc, #24]	; (8006a60 <tcp_free_listen+0x30>)
 8006a46:	4807      	ldr	r0, [pc, #28]	; (8006a64 <tcp_free_listen+0x34>)
 8006a48:	f008 fe3a 	bl	800f6c0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006a4c:	6879      	ldr	r1, [r7, #4]
 8006a4e:	2002      	movs	r0, #2
 8006a50:	f7fe fe7e 	bl	8005750 <memp_free>
}
 8006a54:	bf00      	nop
 8006a56:	3708      	adds	r7, #8
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	08011648 	.word	0x08011648
 8006a60:	080116b4 	.word	0x080116b4
 8006a64:	0801168c 	.word	0x0801168c

08006a68 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006a6c:	f001 f85c 	bl	8007b28 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006a70:	4b07      	ldr	r3, [pc, #28]	; (8006a90 <tcp_tmr+0x28>)
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	3301      	adds	r3, #1
 8006a76:	b2da      	uxtb	r2, r3
 8006a78:	4b05      	ldr	r3, [pc, #20]	; (8006a90 <tcp_tmr+0x28>)
 8006a7a:	701a      	strb	r2, [r3, #0]
 8006a7c:	4b04      	ldr	r3, [pc, #16]	; (8006a90 <tcp_tmr+0x28>)
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	f003 0301 	and.w	r3, r3, #1
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d001      	beq.n	8006a8c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006a88:	f000 fd0e 	bl	80074a8 <tcp_slowtmr>
  }
}
 8006a8c:	bf00      	nop
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	200000d1 	.word	0x200000d1

08006a94 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d105      	bne.n	8006ab0 <tcp_remove_listener+0x1c>
 8006aa4:	4b0d      	ldr	r3, [pc, #52]	; (8006adc <tcp_remove_listener+0x48>)
 8006aa6:	22ff      	movs	r2, #255	; 0xff
 8006aa8:	490d      	ldr	r1, [pc, #52]	; (8006ae0 <tcp_remove_listener+0x4c>)
 8006aaa:	480e      	ldr	r0, [pc, #56]	; (8006ae4 <tcp_remove_listener+0x50>)
 8006aac:	f008 fe08 	bl	800f6c0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	60fb      	str	r3, [r7, #12]
 8006ab4:	e00a      	b.n	8006acc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006aba:	683a      	ldr	r2, [r7, #0]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d102      	bne.n	8006ac6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	60fb      	str	r3, [r7, #12]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1f1      	bne.n	8006ab6 <tcp_remove_listener+0x22>
    }
  }
}
 8006ad2:	bf00      	nop
 8006ad4:	bf00      	nop
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	08011648 	.word	0x08011648
 8006ae0:	080116d0 	.word	0x080116d0
 8006ae4:	0801168c 	.word	0x0801168c

08006ae8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d106      	bne.n	8006b04 <tcp_listen_closed+0x1c>
 8006af6:	4b14      	ldr	r3, [pc, #80]	; (8006b48 <tcp_listen_closed+0x60>)
 8006af8:	f240 1211 	movw	r2, #273	; 0x111
 8006afc:	4913      	ldr	r1, [pc, #76]	; (8006b4c <tcp_listen_closed+0x64>)
 8006afe:	4814      	ldr	r0, [pc, #80]	; (8006b50 <tcp_listen_closed+0x68>)
 8006b00:	f008 fdde 	bl	800f6c0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	7d1b      	ldrb	r3, [r3, #20]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d006      	beq.n	8006b1a <tcp_listen_closed+0x32>
 8006b0c:	4b0e      	ldr	r3, [pc, #56]	; (8006b48 <tcp_listen_closed+0x60>)
 8006b0e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006b12:	4910      	ldr	r1, [pc, #64]	; (8006b54 <tcp_listen_closed+0x6c>)
 8006b14:	480e      	ldr	r0, [pc, #56]	; (8006b50 <tcp_listen_closed+0x68>)
 8006b16:	f008 fdd3 	bl	800f6c0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	60fb      	str	r3, [r7, #12]
 8006b1e:	e00b      	b.n	8006b38 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006b20:	4a0d      	ldr	r2, [pc, #52]	; (8006b58 <tcp_listen_closed+0x70>)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	6879      	ldr	r1, [r7, #4]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7ff ffb1 	bl	8006a94 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	3301      	adds	r3, #1
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2b03      	cmp	r3, #3
 8006b3c:	d9f0      	bls.n	8006b20 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006b3e:	bf00      	nop
 8006b40:	bf00      	nop
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	08011648 	.word	0x08011648
 8006b4c:	080116f8 	.word	0x080116f8
 8006b50:	0801168c 	.word	0x0801168c
 8006b54:	08011704 	.word	0x08011704
 8006b58:	08013614 	.word	0x08013614

08006b5c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006b5c:	b5b0      	push	{r4, r5, r7, lr}
 8006b5e:	b088      	sub	sp, #32
 8006b60:	af04      	add	r7, sp, #16
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	460b      	mov	r3, r1
 8006b66:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d106      	bne.n	8006b7c <tcp_close_shutdown+0x20>
 8006b6e:	4b63      	ldr	r3, [pc, #396]	; (8006cfc <tcp_close_shutdown+0x1a0>)
 8006b70:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006b74:	4962      	ldr	r1, [pc, #392]	; (8006d00 <tcp_close_shutdown+0x1a4>)
 8006b76:	4863      	ldr	r0, [pc, #396]	; (8006d04 <tcp_close_shutdown+0x1a8>)
 8006b78:	f008 fda2 	bl	800f6c0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006b7c:	78fb      	ldrb	r3, [r7, #3]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d066      	beq.n	8006c50 <tcp_close_shutdown+0xf4>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	7d1b      	ldrb	r3, [r3, #20]
 8006b86:	2b04      	cmp	r3, #4
 8006b88:	d003      	beq.n	8006b92 <tcp_close_shutdown+0x36>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	7d1b      	ldrb	r3, [r3, #20]
 8006b8e:	2b07      	cmp	r3, #7
 8006b90:	d15e      	bne.n	8006c50 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d104      	bne.n	8006ba4 <tcp_close_shutdown+0x48>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b9e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006ba2:	d055      	beq.n	8006c50 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	8b5b      	ldrh	r3, [r3, #26]
 8006ba8:	f003 0310 	and.w	r3, r3, #16
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d106      	bne.n	8006bbe <tcp_close_shutdown+0x62>
 8006bb0:	4b52      	ldr	r3, [pc, #328]	; (8006cfc <tcp_close_shutdown+0x1a0>)
 8006bb2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8006bb6:	4954      	ldr	r1, [pc, #336]	; (8006d08 <tcp_close_shutdown+0x1ac>)
 8006bb8:	4852      	ldr	r0, [pc, #328]	; (8006d04 <tcp_close_shutdown+0x1a8>)
 8006bba:	f008 fd81 	bl	800f6c0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006bc6:	687d      	ldr	r5, [r7, #4]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	3304      	adds	r3, #4
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	8ad2      	ldrh	r2, [r2, #22]
 8006bd0:	6879      	ldr	r1, [r7, #4]
 8006bd2:	8b09      	ldrh	r1, [r1, #24]
 8006bd4:	9102      	str	r1, [sp, #8]
 8006bd6:	9201      	str	r2, [sp, #4]
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	462b      	mov	r3, r5
 8006bdc:	4622      	mov	r2, r4
 8006bde:	4601      	mov	r1, r0
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f005 fd85 	bl	800c6f0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f001 fb66 	bl	80082b8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006bec:	4b47      	ldr	r3, [pc, #284]	; (8006d0c <tcp_close_shutdown+0x1b0>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d105      	bne.n	8006c02 <tcp_close_shutdown+0xa6>
 8006bf6:	4b45      	ldr	r3, [pc, #276]	; (8006d0c <tcp_close_shutdown+0x1b0>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	4a43      	ldr	r2, [pc, #268]	; (8006d0c <tcp_close_shutdown+0x1b0>)
 8006bfe:	6013      	str	r3, [r2, #0]
 8006c00:	e013      	b.n	8006c2a <tcp_close_shutdown+0xce>
 8006c02:	4b42      	ldr	r3, [pc, #264]	; (8006d0c <tcp_close_shutdown+0x1b0>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	60fb      	str	r3, [r7, #12]
 8006c08:	e00c      	b.n	8006c24 <tcp_close_shutdown+0xc8>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d104      	bne.n	8006c1e <tcp_close_shutdown+0xc2>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	68da      	ldr	r2, [r3, #12]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	60da      	str	r2, [r3, #12]
 8006c1c:	e005      	b.n	8006c2a <tcp_close_shutdown+0xce>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	60fb      	str	r3, [r7, #12]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1ef      	bne.n	8006c0a <tcp_close_shutdown+0xae>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	60da      	str	r2, [r3, #12]
 8006c30:	4b37      	ldr	r3, [pc, #220]	; (8006d10 <tcp_close_shutdown+0x1b4>)
 8006c32:	2201      	movs	r2, #1
 8006c34:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006c36:	4b37      	ldr	r3, [pc, #220]	; (8006d14 <tcp_close_shutdown+0x1b8>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d102      	bne.n	8006c46 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006c40:	f003 fffa 	bl	800ac38 <tcp_trigger_input_pcb_close>
 8006c44:	e002      	b.n	8006c4c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7ff fed6 	bl	80069f8 <tcp_free>
      }
      return ERR_OK;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	e050      	b.n	8006cf2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	7d1b      	ldrb	r3, [r3, #20]
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d03b      	beq.n	8006cd0 <tcp_close_shutdown+0x174>
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	dc44      	bgt.n	8006ce6 <tcp_close_shutdown+0x18a>
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d002      	beq.n	8006c66 <tcp_close_shutdown+0x10a>
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d02a      	beq.n	8006cba <tcp_close_shutdown+0x15e>
 8006c64:	e03f      	b.n	8006ce6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	8adb      	ldrh	r3, [r3, #22]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d021      	beq.n	8006cb2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006c6e:	4b2a      	ldr	r3, [pc, #168]	; (8006d18 <tcp_close_shutdown+0x1bc>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d105      	bne.n	8006c84 <tcp_close_shutdown+0x128>
 8006c78:	4b27      	ldr	r3, [pc, #156]	; (8006d18 <tcp_close_shutdown+0x1bc>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	4a26      	ldr	r2, [pc, #152]	; (8006d18 <tcp_close_shutdown+0x1bc>)
 8006c80:	6013      	str	r3, [r2, #0]
 8006c82:	e013      	b.n	8006cac <tcp_close_shutdown+0x150>
 8006c84:	4b24      	ldr	r3, [pc, #144]	; (8006d18 <tcp_close_shutdown+0x1bc>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	60bb      	str	r3, [r7, #8]
 8006c8a:	e00c      	b.n	8006ca6 <tcp_close_shutdown+0x14a>
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d104      	bne.n	8006ca0 <tcp_close_shutdown+0x144>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68da      	ldr	r2, [r3, #12]
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	60da      	str	r2, [r3, #12]
 8006c9e:	e005      	b.n	8006cac <tcp_close_shutdown+0x150>
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	60bb      	str	r3, [r7, #8]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1ef      	bne.n	8006c8c <tcp_close_shutdown+0x130>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f7ff fea0 	bl	80069f8 <tcp_free>
      break;
 8006cb8:	e01a      	b.n	8006cf0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7ff ff14 	bl	8006ae8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006cc0:	6879      	ldr	r1, [r7, #4]
 8006cc2:	4816      	ldr	r0, [pc, #88]	; (8006d1c <tcp_close_shutdown+0x1c0>)
 8006cc4:	f001 fb48 	bl	8008358 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f7ff feb1 	bl	8006a30 <tcp_free_listen>
      break;
 8006cce:	e00f      	b.n	8006cf0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006cd0:	6879      	ldr	r1, [r7, #4]
 8006cd2:	480e      	ldr	r0, [pc, #56]	; (8006d0c <tcp_close_shutdown+0x1b0>)
 8006cd4:	f001 fb40 	bl	8008358 <tcp_pcb_remove>
 8006cd8:	4b0d      	ldr	r3, [pc, #52]	; (8006d10 <tcp_close_shutdown+0x1b4>)
 8006cda:	2201      	movs	r2, #1
 8006cdc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f7ff fe8a 	bl	80069f8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006ce4:	e004      	b.n	8006cf0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f81a 	bl	8006d20 <tcp_close_shutdown_fin>
 8006cec:	4603      	mov	r3, r0
 8006cee:	e000      	b.n	8006cf2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bdb0      	pop	{r4, r5, r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	08011648 	.word	0x08011648
 8006d00:	0801171c 	.word	0x0801171c
 8006d04:	0801168c 	.word	0x0801168c
 8006d08:	0801173c 	.word	0x0801173c
 8006d0c:	20006938 	.word	0x20006938
 8006d10:	20006934 	.word	0x20006934
 8006d14:	2000694c 	.word	0x2000694c
 8006d18:	20006944 	.word	0x20006944
 8006d1c:	20006940 	.word	0x20006940

08006d20 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d106      	bne.n	8006d3c <tcp_close_shutdown_fin+0x1c>
 8006d2e:	4b2e      	ldr	r3, [pc, #184]	; (8006de8 <tcp_close_shutdown_fin+0xc8>)
 8006d30:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006d34:	492d      	ldr	r1, [pc, #180]	; (8006dec <tcp_close_shutdown_fin+0xcc>)
 8006d36:	482e      	ldr	r0, [pc, #184]	; (8006df0 <tcp_close_shutdown_fin+0xd0>)
 8006d38:	f008 fcc2 	bl	800f6c0 <iprintf>

  switch (pcb->state) {
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	7d1b      	ldrb	r3, [r3, #20]
 8006d40:	2b07      	cmp	r3, #7
 8006d42:	d020      	beq.n	8006d86 <tcp_close_shutdown_fin+0x66>
 8006d44:	2b07      	cmp	r3, #7
 8006d46:	dc2b      	bgt.n	8006da0 <tcp_close_shutdown_fin+0x80>
 8006d48:	2b03      	cmp	r3, #3
 8006d4a:	d002      	beq.n	8006d52 <tcp_close_shutdown_fin+0x32>
 8006d4c:	2b04      	cmp	r3, #4
 8006d4e:	d00d      	beq.n	8006d6c <tcp_close_shutdown_fin+0x4c>
 8006d50:	e026      	b.n	8006da0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f004 fdda 	bl	800b90c <tcp_send_fin>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006d5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d11f      	bne.n	8006da4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2205      	movs	r2, #5
 8006d68:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006d6a:	e01b      	b.n	8006da4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f004 fdcd 	bl	800b90c <tcp_send_fin>
 8006d72:	4603      	mov	r3, r0
 8006d74:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d114      	bne.n	8006da8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2205      	movs	r2, #5
 8006d82:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006d84:	e010      	b.n	8006da8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f004 fdc0 	bl	800b90c <tcp_send_fin>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d109      	bne.n	8006dac <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2209      	movs	r2, #9
 8006d9c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006d9e:	e005      	b.n	8006dac <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006da0:	2300      	movs	r3, #0
 8006da2:	e01c      	b.n	8006dde <tcp_close_shutdown_fin+0xbe>
      break;
 8006da4:	bf00      	nop
 8006da6:	e002      	b.n	8006dae <tcp_close_shutdown_fin+0x8e>
      break;
 8006da8:	bf00      	nop
 8006daa:	e000      	b.n	8006dae <tcp_close_shutdown_fin+0x8e>
      break;
 8006dac:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d103      	bne.n	8006dbe <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f004 fee6 	bl	800bb88 <tcp_output>
 8006dbc:	e00d      	b.n	8006dda <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8006dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc6:	d108      	bne.n	8006dda <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	8b5b      	ldrh	r3, [r3, #26]
 8006dcc:	f043 0308 	orr.w	r3, r3, #8
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	e001      	b.n	8006dde <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8006dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	08011648 	.word	0x08011648
 8006dec:	080116f8 	.word	0x080116f8
 8006df0:	0801168c 	.word	0x0801168c

08006df4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d109      	bne.n	8006e16 <tcp_close+0x22>
 8006e02:	4b0f      	ldr	r3, [pc, #60]	; (8006e40 <tcp_close+0x4c>)
 8006e04:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006e08:	490e      	ldr	r1, [pc, #56]	; (8006e44 <tcp_close+0x50>)
 8006e0a:	480f      	ldr	r0, [pc, #60]	; (8006e48 <tcp_close+0x54>)
 8006e0c:	f008 fc58 	bl	800f6c0 <iprintf>
 8006e10:	f06f 030f 	mvn.w	r3, #15
 8006e14:	e00f      	b.n	8006e36 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	7d1b      	ldrb	r3, [r3, #20]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d006      	beq.n	8006e2c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	8b5b      	ldrh	r3, [r3, #26]
 8006e22:	f043 0310 	orr.w	r3, r3, #16
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7ff fe94 	bl	8006b5c <tcp_close_shutdown>
 8006e34:	4603      	mov	r3, r0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	08011648 	.word	0x08011648
 8006e44:	08011758 	.word	0x08011758
 8006e48:	0801168c 	.word	0x0801168c

08006e4c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b08e      	sub	sp, #56	; 0x38
 8006e50:	af04      	add	r7, sp, #16
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d107      	bne.n	8006e6c <tcp_abandon+0x20>
 8006e5c:	4b52      	ldr	r3, [pc, #328]	; (8006fa8 <tcp_abandon+0x15c>)
 8006e5e:	f240 223d 	movw	r2, #573	; 0x23d
 8006e62:	4952      	ldr	r1, [pc, #328]	; (8006fac <tcp_abandon+0x160>)
 8006e64:	4852      	ldr	r0, [pc, #328]	; (8006fb0 <tcp_abandon+0x164>)
 8006e66:	f008 fc2b 	bl	800f6c0 <iprintf>
 8006e6a:	e099      	b.n	8006fa0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	7d1b      	ldrb	r3, [r3, #20]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d106      	bne.n	8006e82 <tcp_abandon+0x36>
 8006e74:	4b4c      	ldr	r3, [pc, #304]	; (8006fa8 <tcp_abandon+0x15c>)
 8006e76:	f44f 7210 	mov.w	r2, #576	; 0x240
 8006e7a:	494e      	ldr	r1, [pc, #312]	; (8006fb4 <tcp_abandon+0x168>)
 8006e7c:	484c      	ldr	r0, [pc, #304]	; (8006fb0 <tcp_abandon+0x164>)
 8006e7e:	f008 fc1f 	bl	800f6c0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	7d1b      	ldrb	r3, [r3, #20]
 8006e86:	2b0a      	cmp	r3, #10
 8006e88:	d107      	bne.n	8006e9a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006e8a:	6879      	ldr	r1, [r7, #4]
 8006e8c:	484a      	ldr	r0, [pc, #296]	; (8006fb8 <tcp_abandon+0x16c>)
 8006e8e:	f001 fa63 	bl	8008358 <tcp_pcb_remove>
    tcp_free(pcb);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f7ff fdb0 	bl	80069f8 <tcp_free>
 8006e98:	e082      	b.n	8006fa0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ea6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eac:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eb4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	7d1b      	ldrb	r3, [r3, #20]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d126      	bne.n	8006f12 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	8adb      	ldrh	r3, [r3, #22]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d02e      	beq.n	8006f2a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006ecc:	4b3b      	ldr	r3, [pc, #236]	; (8006fbc <tcp_abandon+0x170>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d105      	bne.n	8006ee2 <tcp_abandon+0x96>
 8006ed6:	4b39      	ldr	r3, [pc, #228]	; (8006fbc <tcp_abandon+0x170>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	4a37      	ldr	r2, [pc, #220]	; (8006fbc <tcp_abandon+0x170>)
 8006ede:	6013      	str	r3, [r2, #0]
 8006ee0:	e013      	b.n	8006f0a <tcp_abandon+0xbe>
 8006ee2:	4b36      	ldr	r3, [pc, #216]	; (8006fbc <tcp_abandon+0x170>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	61fb      	str	r3, [r7, #28]
 8006ee8:	e00c      	b.n	8006f04 <tcp_abandon+0xb8>
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d104      	bne.n	8006efe <tcp_abandon+0xb2>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	68da      	ldr	r2, [r3, #12]
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	60da      	str	r2, [r3, #12]
 8006efc:	e005      	b.n	8006f0a <tcp_abandon+0xbe>
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	61fb      	str	r3, [r7, #28]
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1ef      	bne.n	8006eea <tcp_abandon+0x9e>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	60da      	str	r2, [r3, #12]
 8006f10:	e00b      	b.n	8006f2a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	8adb      	ldrh	r3, [r3, #22]
 8006f1a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006f1c:	6879      	ldr	r1, [r7, #4]
 8006f1e:	4828      	ldr	r0, [pc, #160]	; (8006fc0 <tcp_abandon+0x174>)
 8006f20:	f001 fa1a 	bl	8008358 <tcp_pcb_remove>
 8006f24:	4b27      	ldr	r3, [pc, #156]	; (8006fc4 <tcp_abandon+0x178>)
 8006f26:	2201      	movs	r2, #1
 8006f28:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d004      	beq.n	8006f3c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 fed6 	bl	8007ce8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d004      	beq.n	8006f4e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f000 fecd 	bl	8007ce8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d004      	beq.n	8006f60 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f000 fec4 	bl	8007ce8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00e      	beq.n	8006f84 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006f66:	6879      	ldr	r1, [r7, #4]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	3304      	adds	r3, #4
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	8b12      	ldrh	r2, [r2, #24]
 8006f70:	9202      	str	r2, [sp, #8]
 8006f72:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006f74:	9201      	str	r2, [sp, #4]
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	460b      	mov	r3, r1
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	69b9      	ldr	r1, [r7, #24]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f005 fbb6 	bl	800c6f0 <tcp_rst>
    }
    last_state = pcb->state;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	7d1b      	ldrb	r3, [r3, #20]
 8006f88:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7ff fd34 	bl	80069f8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d004      	beq.n	8006fa0 <tcp_abandon+0x154>
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	f06f 010c 	mvn.w	r1, #12
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	4798      	blx	r3
  }
}
 8006fa0:	3728      	adds	r7, #40	; 0x28
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	08011648 	.word	0x08011648
 8006fac:	0801178c 	.word	0x0801178c
 8006fb0:	0801168c 	.word	0x0801168c
 8006fb4:	080117a8 	.word	0x080117a8
 8006fb8:	20006948 	.word	0x20006948
 8006fbc:	20006944 	.word	0x20006944
 8006fc0:	20006938 	.word	0x20006938
 8006fc4:	20006934 	.word	0x20006934

08006fc8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006fd0:	2101      	movs	r1, #1
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7ff ff3a 	bl	8006e4c <tcp_abandon>
}
 8006fd8:	bf00      	nop
 8006fda:	3708      	adds	r7, #8
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b088      	sub	sp, #32
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	4613      	mov	r3, r2
 8006fec:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8006fee:	2304      	movs	r3, #4
 8006ff0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d101      	bne.n	8006ffc <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8006ff8:	4b3e      	ldr	r3, [pc, #248]	; (80070f4 <tcp_bind+0x114>)
 8006ffa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d109      	bne.n	8007016 <tcp_bind+0x36>
 8007002:	4b3d      	ldr	r3, [pc, #244]	; (80070f8 <tcp_bind+0x118>)
 8007004:	f240 22a9 	movw	r2, #681	; 0x2a9
 8007008:	493c      	ldr	r1, [pc, #240]	; (80070fc <tcp_bind+0x11c>)
 800700a:	483d      	ldr	r0, [pc, #244]	; (8007100 <tcp_bind+0x120>)
 800700c:	f008 fb58 	bl	800f6c0 <iprintf>
 8007010:	f06f 030f 	mvn.w	r3, #15
 8007014:	e06a      	b.n	80070ec <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	7d1b      	ldrb	r3, [r3, #20]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d009      	beq.n	8007032 <tcp_bind+0x52>
 800701e:	4b36      	ldr	r3, [pc, #216]	; (80070f8 <tcp_bind+0x118>)
 8007020:	f240 22ab 	movw	r2, #683	; 0x2ab
 8007024:	4937      	ldr	r1, [pc, #220]	; (8007104 <tcp_bind+0x124>)
 8007026:	4836      	ldr	r0, [pc, #216]	; (8007100 <tcp_bind+0x120>)
 8007028:	f008 fb4a 	bl	800f6c0 <iprintf>
 800702c:	f06f 0305 	mvn.w	r3, #5
 8007030:	e05c      	b.n	80070ec <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8007032:	88fb      	ldrh	r3, [r7, #6]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d109      	bne.n	800704c <tcp_bind+0x6c>
    port = tcp_new_port();
 8007038:	f000 f9f0 	bl	800741c <tcp_new_port>
 800703c:	4603      	mov	r3, r0
 800703e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8007040:	88fb      	ldrh	r3, [r7, #6]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d135      	bne.n	80070b2 <tcp_bind+0xd2>
      return ERR_BUF;
 8007046:	f06f 0301 	mvn.w	r3, #1
 800704a:	e04f      	b.n	80070ec <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800704c:	2300      	movs	r3, #0
 800704e:	61fb      	str	r3, [r7, #28]
 8007050:	e02b      	b.n	80070aa <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007052:	4a2d      	ldr	r2, [pc, #180]	; (8007108 <tcp_bind+0x128>)
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	61bb      	str	r3, [r7, #24]
 800705e:	e01e      	b.n	800709e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	8adb      	ldrh	r3, [r3, #22]
 8007064:	88fa      	ldrh	r2, [r7, #6]
 8007066:	429a      	cmp	r2, r3
 8007068:	d116      	bne.n	8007098 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800706a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800706c:	2b00      	cmp	r3, #0
 800706e:	d010      	beq.n	8007092 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00c      	beq.n	8007092 <tcp_bind+0xb2>
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d009      	beq.n	8007092 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d005      	beq.n	8007092 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800708e:	429a      	cmp	r2, r3
 8007090:	d102      	bne.n	8007098 <tcp_bind+0xb8>
              return ERR_USE;
 8007092:	f06f 0307 	mvn.w	r3, #7
 8007096:	e029      	b.n	80070ec <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	61bb      	str	r3, [r7, #24]
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1dd      	bne.n	8007060 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	3301      	adds	r3, #1
 80070a8:	61fb      	str	r3, [r7, #28]
 80070aa:	69fa      	ldr	r2, [r7, #28]
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	dbcf      	blt.n	8007052 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00c      	beq.n	80070d2 <tcp_bind+0xf2>
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d008      	beq.n	80070d2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d002      	beq.n	80070cc <tcp_bind+0xec>
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	e000      	b.n	80070ce <tcp_bind+0xee>
 80070cc:	2300      	movs	r3, #0
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	88fa      	ldrh	r2, [r7, #6]
 80070d6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80070d8:	4b0c      	ldr	r3, [pc, #48]	; (800710c <tcp_bind+0x12c>)
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	60da      	str	r2, [r3, #12]
 80070e0:	4a0a      	ldr	r2, [pc, #40]	; (800710c <tcp_bind+0x12c>)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6013      	str	r3, [r2, #0]
 80070e6:	f005 fcc5 	bl	800ca74 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3720      	adds	r7, #32
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	0801363c 	.word	0x0801363c
 80070f8:	08011648 	.word	0x08011648
 80070fc:	080117dc 	.word	0x080117dc
 8007100:	0801168c 	.word	0x0801168c
 8007104:	080117f4 	.word	0x080117f4
 8007108:	08013614 	.word	0x08013614
 800710c:	20006944 	.word	0x20006944

08007110 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	4613      	mov	r3, r2
 800711c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d106      	bne.n	8007132 <tcp_accept_null+0x22>
 8007124:	4b07      	ldr	r3, [pc, #28]	; (8007144 <tcp_accept_null+0x34>)
 8007126:	f240 320f 	movw	r2, #783	; 0x30f
 800712a:	4907      	ldr	r1, [pc, #28]	; (8007148 <tcp_accept_null+0x38>)
 800712c:	4807      	ldr	r0, [pc, #28]	; (800714c <tcp_accept_null+0x3c>)
 800712e:	f008 fac7 	bl	800f6c0 <iprintf>

  tcp_abort(pcb);
 8007132:	68b8      	ldr	r0, [r7, #8]
 8007134:	f7ff ff48 	bl	8006fc8 <tcp_abort>

  return ERR_ABRT;
 8007138:	f06f 030c 	mvn.w	r3, #12
}
 800713c:	4618      	mov	r0, r3
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	08011648 	.word	0x08011648
 8007148:	0801181c 	.word	0x0801181c
 800714c:	0801168c 	.word	0x0801168c

08007150 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	460b      	mov	r3, r1
 800715a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800715c:	78fb      	ldrb	r3, [r7, #3]
 800715e:	2200      	movs	r2, #0
 8007160:	4619      	mov	r1, r3
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f806 	bl	8007174 <tcp_listen_with_backlog_and_err>
 8007168:	4603      	mov	r3, r0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3708      	adds	r7, #8
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
	...

08007174 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b088      	sub	sp, #32
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	460b      	mov	r3, r1
 800717e:	607a      	str	r2, [r7, #4]
 8007180:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8007182:	2300      	movs	r3, #0
 8007184:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d109      	bne.n	80071a0 <tcp_listen_with_backlog_and_err+0x2c>
 800718c:	4b47      	ldr	r3, [pc, #284]	; (80072ac <tcp_listen_with_backlog_and_err+0x138>)
 800718e:	f240 3259 	movw	r2, #857	; 0x359
 8007192:	4947      	ldr	r1, [pc, #284]	; (80072b0 <tcp_listen_with_backlog_and_err+0x13c>)
 8007194:	4847      	ldr	r0, [pc, #284]	; (80072b4 <tcp_listen_with_backlog_and_err+0x140>)
 8007196:	f008 fa93 	bl	800f6c0 <iprintf>
 800719a:	23f0      	movs	r3, #240	; 0xf0
 800719c:	76fb      	strb	r3, [r7, #27]
 800719e:	e079      	b.n	8007294 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	7d1b      	ldrb	r3, [r3, #20]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d009      	beq.n	80071bc <tcp_listen_with_backlog_and_err+0x48>
 80071a8:	4b40      	ldr	r3, [pc, #256]	; (80072ac <tcp_listen_with_backlog_and_err+0x138>)
 80071aa:	f240 325a 	movw	r2, #858	; 0x35a
 80071ae:	4942      	ldr	r1, [pc, #264]	; (80072b8 <tcp_listen_with_backlog_and_err+0x144>)
 80071b0:	4840      	ldr	r0, [pc, #256]	; (80072b4 <tcp_listen_with_backlog_and_err+0x140>)
 80071b2:	f008 fa85 	bl	800f6c0 <iprintf>
 80071b6:	23f1      	movs	r3, #241	; 0xf1
 80071b8:	76fb      	strb	r3, [r7, #27]
 80071ba:	e06b      	b.n	8007294 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	7d1b      	ldrb	r3, [r3, #20]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d104      	bne.n	80071ce <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80071c8:	23f7      	movs	r3, #247	; 0xf7
 80071ca:	76fb      	strb	r3, [r7, #27]
    goto done;
 80071cc:	e062      	b.n	8007294 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80071ce:	2002      	movs	r0, #2
 80071d0:	f7fe fa72 	bl	80056b8 <memp_malloc>
 80071d4:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d102      	bne.n	80071e2 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 80071dc:	23ff      	movs	r3, #255	; 0xff
 80071de:	76fb      	strb	r3, [r7, #27]
    goto done;
 80071e0:	e058      	b.n	8007294 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	691a      	ldr	r2, [r3, #16]
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	8ada      	ldrh	r2, [r3, #22]
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	2201      	movs	r2, #1
 80071f6:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	7d5a      	ldrb	r2, [r3, #21]
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	7a5a      	ldrb	r2, [r3, #9]
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	2200      	movs	r2, #0
 800720c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	7ada      	ldrb	r2, [r3, #11]
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	7a9a      	ldrb	r2, [r3, #10]
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	8adb      	ldrh	r3, [r3, #22]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d021      	beq.n	8007272 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800722e:	4b23      	ldr	r3, [pc, #140]	; (80072bc <tcp_listen_with_backlog_and_err+0x148>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	429a      	cmp	r2, r3
 8007236:	d105      	bne.n	8007244 <tcp_listen_with_backlog_and_err+0xd0>
 8007238:	4b20      	ldr	r3, [pc, #128]	; (80072bc <tcp_listen_with_backlog_and_err+0x148>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	4a1f      	ldr	r2, [pc, #124]	; (80072bc <tcp_listen_with_backlog_and_err+0x148>)
 8007240:	6013      	str	r3, [r2, #0]
 8007242:	e013      	b.n	800726c <tcp_listen_with_backlog_and_err+0xf8>
 8007244:	4b1d      	ldr	r3, [pc, #116]	; (80072bc <tcp_listen_with_backlog_and_err+0x148>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	617b      	str	r3, [r7, #20]
 800724a:	e00c      	b.n	8007266 <tcp_listen_with_backlog_and_err+0xf2>
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	429a      	cmp	r2, r3
 8007254:	d104      	bne.n	8007260 <tcp_listen_with_backlog_and_err+0xec>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	68da      	ldr	r2, [r3, #12]
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	60da      	str	r2, [r3, #12]
 800725e:	e005      	b.n	800726c <tcp_listen_with_backlog_and_err+0xf8>
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	617b      	str	r3, [r7, #20]
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1ef      	bne.n	800724c <tcp_listen_with_backlog_and_err+0xd8>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f7ff fbc0 	bl	80069f8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	4a11      	ldr	r2, [pc, #68]	; (80072c0 <tcp_listen_with_backlog_and_err+0x14c>)
 800727c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800727e:	4b11      	ldr	r3, [pc, #68]	; (80072c4 <tcp_listen_with_backlog_and_err+0x150>)
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	60da      	str	r2, [r3, #12]
 8007286:	4a0f      	ldr	r2, [pc, #60]	; (80072c4 <tcp_listen_with_backlog_and_err+0x150>)
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	6013      	str	r3, [r2, #0]
 800728c:	f005 fbf2 	bl	800ca74 <tcp_timer_needed>
  res = ERR_OK;
 8007290:	2300      	movs	r3, #0
 8007292:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d002      	beq.n	80072a0 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	7efa      	ldrb	r2, [r7, #27]
 800729e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80072a0:	69fb      	ldr	r3, [r7, #28]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3720      	adds	r7, #32
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	08011648 	.word	0x08011648
 80072b0:	0801183c 	.word	0x0801183c
 80072b4:	0801168c 	.word	0x0801168c
 80072b8:	0801186c 	.word	0x0801186c
 80072bc:	20006944 	.word	0x20006944
 80072c0:	08007111 	.word	0x08007111
 80072c4:	20006940 	.word	0x20006940

080072c8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d106      	bne.n	80072e4 <tcp_update_rcv_ann_wnd+0x1c>
 80072d6:	4b25      	ldr	r3, [pc, #148]	; (800736c <tcp_update_rcv_ann_wnd+0xa4>)
 80072d8:	f240 32a6 	movw	r2, #934	; 0x3a6
 80072dc:	4924      	ldr	r1, [pc, #144]	; (8007370 <tcp_update_rcv_ann_wnd+0xa8>)
 80072de:	4825      	ldr	r0, [pc, #148]	; (8007374 <tcp_update_rcv_ann_wnd+0xac>)
 80072e0:	f008 f9ee 	bl	800f6c0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80072ec:	4413      	add	r3, r2
 80072ee:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80072f8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80072fc:	bf28      	it	cs
 80072fe:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8007302:	b292      	uxth	r2, r2
 8007304:	4413      	add	r3, r2
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	db08      	blt.n	8007320 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	e020      	b.n	8007362 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	2b00      	cmp	r3, #0
 800732c:	dd03      	ble.n	8007336 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007334:	e014      	b.n	8007360 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007348:	d306      	bcc.n	8007358 <tcp_update_rcv_ann_wnd+0x90>
 800734a:	4b08      	ldr	r3, [pc, #32]	; (800736c <tcp_update_rcv_ann_wnd+0xa4>)
 800734c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8007350:	4909      	ldr	r1, [pc, #36]	; (8007378 <tcp_update_rcv_ann_wnd+0xb0>)
 8007352:	4808      	ldr	r0, [pc, #32]	; (8007374 <tcp_update_rcv_ann_wnd+0xac>)
 8007354:	f008 f9b4 	bl	800f6c0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	b29a      	uxth	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8007360:	2300      	movs	r3, #0
  }
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	08011648 	.word	0x08011648
 8007370:	080118a4 	.word	0x080118a4
 8007374:	0801168c 	.word	0x0801168c
 8007378:	080118c8 	.word	0x080118c8

0800737c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	460b      	mov	r3, r1
 8007386:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d107      	bne.n	800739e <tcp_recved+0x22>
 800738e:	4b1f      	ldr	r3, [pc, #124]	; (800740c <tcp_recved+0x90>)
 8007390:	f240 32cf 	movw	r2, #975	; 0x3cf
 8007394:	491e      	ldr	r1, [pc, #120]	; (8007410 <tcp_recved+0x94>)
 8007396:	481f      	ldr	r0, [pc, #124]	; (8007414 <tcp_recved+0x98>)
 8007398:	f008 f992 	bl	800f6c0 <iprintf>
 800739c:	e032      	b.n	8007404 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	7d1b      	ldrb	r3, [r3, #20]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d106      	bne.n	80073b4 <tcp_recved+0x38>
 80073a6:	4b19      	ldr	r3, [pc, #100]	; (800740c <tcp_recved+0x90>)
 80073a8:	f240 32d2 	movw	r2, #978	; 0x3d2
 80073ac:	491a      	ldr	r1, [pc, #104]	; (8007418 <tcp_recved+0x9c>)
 80073ae:	4819      	ldr	r0, [pc, #100]	; (8007414 <tcp_recved+0x98>)
 80073b0:	f008 f986 	bl	800f6c0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80073b8:	887b      	ldrh	r3, [r7, #2]
 80073ba:	4413      	add	r3, r2
 80073bc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80073be:	89fb      	ldrh	r3, [r7, #14]
 80073c0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80073c4:	d804      	bhi.n	80073d0 <tcp_recved+0x54>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ca:	89fa      	ldrh	r2, [r7, #14]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d204      	bcs.n	80073da <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80073d6:	851a      	strh	r2, [r3, #40]	; 0x28
 80073d8:	e002      	b.n	80073e0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	89fa      	ldrh	r2, [r7, #14]
 80073de:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7ff ff71 	bl	80072c8 <tcp_update_rcv_ann_wnd>
 80073e6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80073ee:	d309      	bcc.n	8007404 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	8b5b      	ldrh	r3, [r3, #26]
 80073f4:	f043 0302 	orr.w	r3, r3, #2
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f004 fbc2 	bl	800bb88 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	08011648 	.word	0x08011648
 8007410:	080118e4 	.word	0x080118e4
 8007414:	0801168c 	.word	0x0801168c
 8007418:	080118fc 	.word	0x080118fc

0800741c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8007422:	2300      	movs	r3, #0
 8007424:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8007426:	4b1e      	ldr	r3, [pc, #120]	; (80074a0 <tcp_new_port+0x84>)
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	3301      	adds	r3, #1
 800742c:	b29a      	uxth	r2, r3
 800742e:	4b1c      	ldr	r3, [pc, #112]	; (80074a0 <tcp_new_port+0x84>)
 8007430:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8007432:	4b1b      	ldr	r3, [pc, #108]	; (80074a0 <tcp_new_port+0x84>)
 8007434:	881b      	ldrh	r3, [r3, #0]
 8007436:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800743a:	4293      	cmp	r3, r2
 800743c:	d103      	bne.n	8007446 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800743e:	4b18      	ldr	r3, [pc, #96]	; (80074a0 <tcp_new_port+0x84>)
 8007440:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8007444:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007446:	2300      	movs	r3, #0
 8007448:	71fb      	strb	r3, [r7, #7]
 800744a:	e01e      	b.n	800748a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800744c:	79fb      	ldrb	r3, [r7, #7]
 800744e:	4a15      	ldr	r2, [pc, #84]	; (80074a4 <tcp_new_port+0x88>)
 8007450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	603b      	str	r3, [r7, #0]
 8007458:	e011      	b.n	800747e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	8ada      	ldrh	r2, [r3, #22]
 800745e:	4b10      	ldr	r3, [pc, #64]	; (80074a0 <tcp_new_port+0x84>)
 8007460:	881b      	ldrh	r3, [r3, #0]
 8007462:	429a      	cmp	r2, r3
 8007464:	d108      	bne.n	8007478 <tcp_new_port+0x5c>
        n++;
 8007466:	88bb      	ldrh	r3, [r7, #4]
 8007468:	3301      	adds	r3, #1
 800746a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800746c:	88bb      	ldrh	r3, [r7, #4]
 800746e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007472:	d3d8      	bcc.n	8007426 <tcp_new_port+0xa>
          return 0;
 8007474:	2300      	movs	r3, #0
 8007476:	e00d      	b.n	8007494 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	603b      	str	r3, [r7, #0]
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1ea      	bne.n	800745a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007484:	79fb      	ldrb	r3, [r7, #7]
 8007486:	3301      	adds	r3, #1
 8007488:	71fb      	strb	r3, [r7, #7]
 800748a:	79fb      	ldrb	r3, [r7, #7]
 800748c:	2b03      	cmp	r3, #3
 800748e:	d9dd      	bls.n	800744c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8007490:	4b03      	ldr	r3, [pc, #12]	; (80074a0 <tcp_new_port+0x84>)
 8007492:	881b      	ldrh	r3, [r3, #0]
}
 8007494:	4618      	mov	r0, r3
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr
 80074a0:	2000000a 	.word	0x2000000a
 80074a4:	08013614 	.word	0x08013614

080074a8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80074a8:	b5b0      	push	{r4, r5, r7, lr}
 80074aa:	b090      	sub	sp, #64	; 0x40
 80074ac:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80074ae:	2300      	movs	r3, #0
 80074b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80074b4:	4b94      	ldr	r3, [pc, #592]	; (8007708 <tcp_slowtmr+0x260>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	3301      	adds	r3, #1
 80074ba:	4a93      	ldr	r2, [pc, #588]	; (8007708 <tcp_slowtmr+0x260>)
 80074bc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80074be:	4b93      	ldr	r3, [pc, #588]	; (800770c <tcp_slowtmr+0x264>)
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	3301      	adds	r3, #1
 80074c4:	b2da      	uxtb	r2, r3
 80074c6:	4b91      	ldr	r3, [pc, #580]	; (800770c <tcp_slowtmr+0x264>)
 80074c8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80074ca:	2300      	movs	r3, #0
 80074cc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80074ce:	4b90      	ldr	r3, [pc, #576]	; (8007710 <tcp_slowtmr+0x268>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80074d4:	e29f      	b.n	8007a16 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80074d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d8:	7d1b      	ldrb	r3, [r3, #20]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d106      	bne.n	80074ec <tcp_slowtmr+0x44>
 80074de:	4b8d      	ldr	r3, [pc, #564]	; (8007714 <tcp_slowtmr+0x26c>)
 80074e0:	f240 42be 	movw	r2, #1214	; 0x4be
 80074e4:	498c      	ldr	r1, [pc, #560]	; (8007718 <tcp_slowtmr+0x270>)
 80074e6:	488d      	ldr	r0, [pc, #564]	; (800771c <tcp_slowtmr+0x274>)
 80074e8:	f008 f8ea 	bl	800f6c0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80074ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ee:	7d1b      	ldrb	r3, [r3, #20]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d106      	bne.n	8007502 <tcp_slowtmr+0x5a>
 80074f4:	4b87      	ldr	r3, [pc, #540]	; (8007714 <tcp_slowtmr+0x26c>)
 80074f6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80074fa:	4989      	ldr	r1, [pc, #548]	; (8007720 <tcp_slowtmr+0x278>)
 80074fc:	4887      	ldr	r0, [pc, #540]	; (800771c <tcp_slowtmr+0x274>)
 80074fe:	f008 f8df 	bl	800f6c0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007504:	7d1b      	ldrb	r3, [r3, #20]
 8007506:	2b0a      	cmp	r3, #10
 8007508:	d106      	bne.n	8007518 <tcp_slowtmr+0x70>
 800750a:	4b82      	ldr	r3, [pc, #520]	; (8007714 <tcp_slowtmr+0x26c>)
 800750c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007510:	4984      	ldr	r1, [pc, #528]	; (8007724 <tcp_slowtmr+0x27c>)
 8007512:	4882      	ldr	r0, [pc, #520]	; (800771c <tcp_slowtmr+0x274>)
 8007514:	f008 f8d4 	bl	800f6c0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751a:	7f9a      	ldrb	r2, [r3, #30]
 800751c:	4b7b      	ldr	r3, [pc, #492]	; (800770c <tcp_slowtmr+0x264>)
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	429a      	cmp	r2, r3
 8007522:	d105      	bne.n	8007530 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8007524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007526:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800752e:	e272      	b.n	8007a16 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8007530:	4b76      	ldr	r3, [pc, #472]	; (800770c <tcp_slowtmr+0x264>)
 8007532:	781a      	ldrb	r2, [r3, #0]
 8007534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007536:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007538:	2300      	movs	r3, #0
 800753a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800753e:	2300      	movs	r3, #0
 8007540:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007546:	7d1b      	ldrb	r3, [r3, #20]
 8007548:	2b02      	cmp	r3, #2
 800754a:	d10a      	bne.n	8007562 <tcp_slowtmr+0xba>
 800754c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007552:	2b05      	cmp	r3, #5
 8007554:	d905      	bls.n	8007562 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8007556:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800755a:	3301      	adds	r3, #1
 800755c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007560:	e11e      	b.n	80077a0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007564:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007568:	2b0b      	cmp	r3, #11
 800756a:	d905      	bls.n	8007578 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800756c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007570:	3301      	adds	r3, #1
 8007572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007576:	e113      	b.n	80077a0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800757e:	2b00      	cmp	r3, #0
 8007580:	d075      	beq.n	800766e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007586:	2b00      	cmp	r3, #0
 8007588:	d006      	beq.n	8007598 <tcp_slowtmr+0xf0>
 800758a:	4b62      	ldr	r3, [pc, #392]	; (8007714 <tcp_slowtmr+0x26c>)
 800758c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8007590:	4965      	ldr	r1, [pc, #404]	; (8007728 <tcp_slowtmr+0x280>)
 8007592:	4862      	ldr	r0, [pc, #392]	; (800771c <tcp_slowtmr+0x274>)
 8007594:	f008 f894 	bl	800f6c0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800759a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800759c:	2b00      	cmp	r3, #0
 800759e:	d106      	bne.n	80075ae <tcp_slowtmr+0x106>
 80075a0:	4b5c      	ldr	r3, [pc, #368]	; (8007714 <tcp_slowtmr+0x26c>)
 80075a2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80075a6:	4961      	ldr	r1, [pc, #388]	; (800772c <tcp_slowtmr+0x284>)
 80075a8:	485c      	ldr	r0, [pc, #368]	; (800771c <tcp_slowtmr+0x274>)
 80075aa:	f008 f889 	bl	800f6c0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80075ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80075b4:	2b0b      	cmp	r3, #11
 80075b6:	d905      	bls.n	80075c4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80075b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075bc:	3301      	adds	r3, #1
 80075be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80075c2:	e0ed      	b.n	80077a0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80075c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80075ca:	3b01      	subs	r3, #1
 80075cc:	4a58      	ldr	r2, [pc, #352]	; (8007730 <tcp_slowtmr+0x288>)
 80075ce:	5cd3      	ldrb	r3, [r2, r3]
 80075d0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80075d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80075d8:	7c7a      	ldrb	r2, [r7, #17]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d907      	bls.n	80075ee <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80075de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80075e4:	3301      	adds	r3, #1
 80075e6:	b2da      	uxtb	r2, r3
 80075e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ea:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80075ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80075f4:	7c7a      	ldrb	r2, [r7, #17]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	f200 80d2 	bhi.w	80077a0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80075fc:	2301      	movs	r3, #1
 80075fe:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007602:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007606:	2b00      	cmp	r3, #0
 8007608:	d108      	bne.n	800761c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800760a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800760c:	f005 f964 	bl	800c8d8 <tcp_zero_window_probe>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d014      	beq.n	8007640 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8007616:	2300      	movs	r3, #0
 8007618:	623b      	str	r3, [r7, #32]
 800761a:	e011      	b.n	8007640 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800761c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007622:	4619      	mov	r1, r3
 8007624:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007626:	f004 f829 	bl	800b67c <tcp_split_unsent_seg>
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d107      	bne.n	8007640 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8007630:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007632:	f004 faa9 	bl	800bb88 <tcp_output>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d101      	bne.n	8007640 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800763c:	2300      	movs	r3, #0
 800763e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8007640:	6a3b      	ldr	r3, [r7, #32]
 8007642:	2b00      	cmp	r3, #0
 8007644:	f000 80ac 	beq.w	80077a0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8007648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800764a:	2200      	movs	r2, #0
 800764c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007652:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007656:	2b06      	cmp	r3, #6
 8007658:	f200 80a2 	bhi.w	80077a0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800765c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007662:	3301      	adds	r3, #1
 8007664:	b2da      	uxtb	r2, r3
 8007666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007668:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800766c:	e098      	b.n	80077a0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800766e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007670:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007674:	2b00      	cmp	r3, #0
 8007676:	db0f      	blt.n	8007698 <tcp_slowtmr+0x1f0>
 8007678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800767e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007682:	4293      	cmp	r3, r2
 8007684:	d008      	beq.n	8007698 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8007686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007688:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800768c:	b29b      	uxth	r3, r3
 800768e:	3301      	adds	r3, #1
 8007690:	b29b      	uxth	r3, r3
 8007692:	b21a      	sxth	r2, r3
 8007694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007696:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800769e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80076a4:	429a      	cmp	r2, r3
 80076a6:	db7b      	blt.n	80077a0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80076a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076aa:	f004 fd5f 	bl	800c16c <tcp_rexmit_rto_prepare>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d007      	beq.n	80076c4 <tcp_slowtmr+0x21c>
 80076b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d171      	bne.n	80077a0 <tcp_slowtmr+0x2f8>
 80076bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d06d      	beq.n	80077a0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80076c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c6:	7d1b      	ldrb	r3, [r3, #20]
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d03a      	beq.n	8007742 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80076cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80076d2:	2b0c      	cmp	r3, #12
 80076d4:	bf28      	it	cs
 80076d6:	230c      	movcs	r3, #12
 80076d8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80076da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076dc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80076e0:	10db      	asrs	r3, r3, #3
 80076e2:	b21b      	sxth	r3, r3
 80076e4:	461a      	mov	r2, r3
 80076e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80076ec:	4413      	add	r3, r2
 80076ee:	7efa      	ldrb	r2, [r7, #27]
 80076f0:	4910      	ldr	r1, [pc, #64]	; (8007734 <tcp_slowtmr+0x28c>)
 80076f2:	5c8a      	ldrb	r2, [r1, r2]
 80076f4:	4093      	lsls	r3, r2
 80076f6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80076fe:	4293      	cmp	r3, r2
 8007700:	dc1a      	bgt.n	8007738 <tcp_slowtmr+0x290>
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	b21a      	sxth	r2, r3
 8007706:	e019      	b.n	800773c <tcp_slowtmr+0x294>
 8007708:	2000693c 	.word	0x2000693c
 800770c:	200000d2 	.word	0x200000d2
 8007710:	20006938 	.word	0x20006938
 8007714:	08011648 	.word	0x08011648
 8007718:	0801198c 	.word	0x0801198c
 800771c:	0801168c 	.word	0x0801168c
 8007720:	080119b8 	.word	0x080119b8
 8007724:	080119e4 	.word	0x080119e4
 8007728:	08011a14 	.word	0x08011a14
 800772c:	08011a48 	.word	0x08011a48
 8007730:	0801360c 	.word	0x0801360c
 8007734:	080135fc 	.word	0x080135fc
 8007738:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800773c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8007742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007744:	2200      	movs	r2, #0
 8007746:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800774a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800774e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007750:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007754:	4293      	cmp	r3, r2
 8007756:	bf28      	it	cs
 8007758:	4613      	movcs	r3, r2
 800775a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800775c:	8a7b      	ldrh	r3, [r7, #18]
 800775e:	085b      	lsrs	r3, r3, #1
 8007760:	b29a      	uxth	r2, r3
 8007762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007764:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800776e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007770:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007772:	005b      	lsls	r3, r3, #1
 8007774:	b29b      	uxth	r3, r3
 8007776:	429a      	cmp	r2, r3
 8007778:	d206      	bcs.n	8007788 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800777a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800777e:	005b      	lsls	r3, r3, #1
 8007780:	b29a      	uxth	r2, r3
 8007782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007784:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800778c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8007792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007794:	2200      	movs	r2, #0
 8007796:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800779a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800779c:	f004 fd56 	bl	800c24c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80077a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a2:	7d1b      	ldrb	r3, [r3, #20]
 80077a4:	2b06      	cmp	r3, #6
 80077a6:	d111      	bne.n	80077cc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80077a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077aa:	8b5b      	ldrh	r3, [r3, #26]
 80077ac:	f003 0310 	and.w	r3, r3, #16
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00b      	beq.n	80077cc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80077b4:	4b9d      	ldr	r3, [pc, #628]	; (8007a2c <tcp_slowtmr+0x584>)
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ba:	6a1b      	ldr	r3, [r3, #32]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	2b28      	cmp	r3, #40	; 0x28
 80077c0:	d904      	bls.n	80077cc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80077c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077c6:	3301      	adds	r3, #1
 80077c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80077cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ce:	7a5b      	ldrb	r3, [r3, #9]
 80077d0:	f003 0308 	and.w	r3, r3, #8
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d04c      	beq.n	8007872 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80077d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077da:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80077dc:	2b04      	cmp	r3, #4
 80077de:	d003      	beq.n	80077e8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80077e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80077e4:	2b07      	cmp	r3, #7
 80077e6:	d144      	bne.n	8007872 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80077e8:	4b90      	ldr	r3, [pc, #576]	; (8007a2c <tcp_slowtmr+0x584>)
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ee:	6a1b      	ldr	r3, [r3, #32]
 80077f0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80077f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077f8:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80077fc:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8007800:	498b      	ldr	r1, [pc, #556]	; (8007a30 <tcp_slowtmr+0x588>)
 8007802:	fba1 1303 	umull	r1, r3, r1, r3
 8007806:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007808:	429a      	cmp	r2, r3
 800780a:	d90a      	bls.n	8007822 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800780c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007810:	3301      	adds	r3, #1
 8007812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8007816:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800781a:	3301      	adds	r3, #1
 800781c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007820:	e027      	b.n	8007872 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007822:	4b82      	ldr	r3, [pc, #520]	; (8007a2c <tcp_slowtmr+0x584>)
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800782c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007834:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007838:	4618      	mov	r0, r3
 800783a:	4b7e      	ldr	r3, [pc, #504]	; (8007a34 <tcp_slowtmr+0x58c>)
 800783c:	fb03 f300 	mul.w	r3, r3, r0
 8007840:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007842:	497b      	ldr	r1, [pc, #492]	; (8007a30 <tcp_slowtmr+0x588>)
 8007844:	fba1 1303 	umull	r1, r3, r1, r3
 8007848:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800784a:	429a      	cmp	r2, r3
 800784c:	d911      	bls.n	8007872 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800784e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007850:	f005 f802 	bl	800c858 <tcp_keepalive>
 8007854:	4603      	mov	r3, r0
 8007856:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800785a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800785e:	2b00      	cmp	r3, #0
 8007860:	d107      	bne.n	8007872 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8007862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007864:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007868:	3301      	adds	r3, #1
 800786a:	b2da      	uxtb	r2, r3
 800786c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8007872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007876:	2b00      	cmp	r3, #0
 8007878:	d011      	beq.n	800789e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800787a:	4b6c      	ldr	r3, [pc, #432]	; (8007a2c <tcp_slowtmr+0x584>)
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	1ad2      	subs	r2, r2, r3
 8007884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007886:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800788a:	4619      	mov	r1, r3
 800788c:	460b      	mov	r3, r1
 800788e:	005b      	lsls	r3, r3, #1
 8007890:	440b      	add	r3, r1
 8007892:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007894:	429a      	cmp	r2, r3
 8007896:	d302      	bcc.n	800789e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007898:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800789a:	f000 fec1 	bl	8008620 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800789e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a0:	7d1b      	ldrb	r3, [r3, #20]
 80078a2:	2b03      	cmp	r3, #3
 80078a4:	d10b      	bne.n	80078be <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80078a6:	4b61      	ldr	r3, [pc, #388]	; (8007a2c <tcp_slowtmr+0x584>)
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ac:	6a1b      	ldr	r3, [r3, #32]
 80078ae:	1ad3      	subs	r3, r2, r3
 80078b0:	2b28      	cmp	r3, #40	; 0x28
 80078b2:	d904      	bls.n	80078be <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80078b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078b8:	3301      	adds	r3, #1
 80078ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80078be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c0:	7d1b      	ldrb	r3, [r3, #20]
 80078c2:	2b09      	cmp	r3, #9
 80078c4:	d10b      	bne.n	80078de <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80078c6:	4b59      	ldr	r3, [pc, #356]	; (8007a2c <tcp_slowtmr+0x584>)
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078cc:	6a1b      	ldr	r3, [r3, #32]
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	2bf0      	cmp	r3, #240	; 0xf0
 80078d2:	d904      	bls.n	80078de <tcp_slowtmr+0x436>
        ++pcb_remove;
 80078d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078d8:	3301      	adds	r3, #1
 80078da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80078de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d060      	beq.n	80079a8 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80078e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078ec:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80078ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078f0:	f000 fce2 	bl	80082b8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80078f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d010      	beq.n	800791c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80078fa:	4b4f      	ldr	r3, [pc, #316]	; (8007a38 <tcp_slowtmr+0x590>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007900:	429a      	cmp	r2, r3
 8007902:	d106      	bne.n	8007912 <tcp_slowtmr+0x46a>
 8007904:	4b4d      	ldr	r3, [pc, #308]	; (8007a3c <tcp_slowtmr+0x594>)
 8007906:	f240 526d 	movw	r2, #1389	; 0x56d
 800790a:	494d      	ldr	r1, [pc, #308]	; (8007a40 <tcp_slowtmr+0x598>)
 800790c:	484d      	ldr	r0, [pc, #308]	; (8007a44 <tcp_slowtmr+0x59c>)
 800790e:	f007 fed7 	bl	800f6c0 <iprintf>
        prev->next = pcb->next;
 8007912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007914:	68da      	ldr	r2, [r3, #12]
 8007916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007918:	60da      	str	r2, [r3, #12]
 800791a:	e00f      	b.n	800793c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800791c:	4b46      	ldr	r3, [pc, #280]	; (8007a38 <tcp_slowtmr+0x590>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007922:	429a      	cmp	r2, r3
 8007924:	d006      	beq.n	8007934 <tcp_slowtmr+0x48c>
 8007926:	4b45      	ldr	r3, [pc, #276]	; (8007a3c <tcp_slowtmr+0x594>)
 8007928:	f240 5271 	movw	r2, #1393	; 0x571
 800792c:	4946      	ldr	r1, [pc, #280]	; (8007a48 <tcp_slowtmr+0x5a0>)
 800792e:	4845      	ldr	r0, [pc, #276]	; (8007a44 <tcp_slowtmr+0x59c>)
 8007930:	f007 fec6 	bl	800f6c0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	4a3f      	ldr	r2, [pc, #252]	; (8007a38 <tcp_slowtmr+0x590>)
 800793a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800793c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007940:	2b00      	cmp	r3, #0
 8007942:	d013      	beq.n	800796c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007946:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800794c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800794e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007950:	3304      	adds	r3, #4
 8007952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007954:	8ad2      	ldrh	r2, [r2, #22]
 8007956:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007958:	8b09      	ldrh	r1, [r1, #24]
 800795a:	9102      	str	r1, [sp, #8]
 800795c:	9201      	str	r2, [sp, #4]
 800795e:	9300      	str	r3, [sp, #0]
 8007960:	462b      	mov	r3, r5
 8007962:	4622      	mov	r2, r4
 8007964:	4601      	mov	r1, r0
 8007966:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007968:	f004 fec2 	bl	800c6f0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800796c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007974:	7d1b      	ldrb	r3, [r3, #20]
 8007976:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800797c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007982:	6838      	ldr	r0, [r7, #0]
 8007984:	f7ff f838 	bl	80069f8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007988:	4b30      	ldr	r3, [pc, #192]	; (8007a4c <tcp_slowtmr+0x5a4>)
 800798a:	2200      	movs	r2, #0
 800798c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d004      	beq.n	800799e <tcp_slowtmr+0x4f6>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f06f 010c 	mvn.w	r1, #12
 800799a:	68b8      	ldr	r0, [r7, #8]
 800799c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800799e:	4b2b      	ldr	r3, [pc, #172]	; (8007a4c <tcp_slowtmr+0x5a4>)
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d037      	beq.n	8007a16 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80079a6:	e590      	b.n	80074ca <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80079a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079aa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80079ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80079b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b4:	7f1b      	ldrb	r3, [r3, #28]
 80079b6:	3301      	adds	r3, #1
 80079b8:	b2da      	uxtb	r2, r3
 80079ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079bc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80079be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c0:	7f1a      	ldrb	r2, [r3, #28]
 80079c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c4:	7f5b      	ldrb	r3, [r3, #29]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d325      	bcc.n	8007a16 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80079ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079cc:	2200      	movs	r2, #0
 80079ce:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80079d0:	4b1e      	ldr	r3, [pc, #120]	; (8007a4c <tcp_slowtmr+0x5a4>)
 80079d2:	2200      	movs	r2, #0
 80079d4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80079d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00b      	beq.n	80079f8 <tcp_slowtmr+0x550>
 80079e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079e8:	6912      	ldr	r2, [r2, #16]
 80079ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079ec:	4610      	mov	r0, r2
 80079ee:	4798      	blx	r3
 80079f0:	4603      	mov	r3, r0
 80079f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80079f6:	e002      	b.n	80079fe <tcp_slowtmr+0x556>
 80079f8:	2300      	movs	r3, #0
 80079fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80079fe:	4b13      	ldr	r3, [pc, #76]	; (8007a4c <tcp_slowtmr+0x5a4>)
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d000      	beq.n	8007a08 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8007a06:	e560      	b.n	80074ca <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007a08:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d102      	bne.n	8007a16 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8007a10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a12:	f004 f8b9 	bl	800bb88 <tcp_output>
  while (pcb != NULL) {
 8007a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f47f ad5c 	bne.w	80074d6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8007a22:	4b0b      	ldr	r3, [pc, #44]	; (8007a50 <tcp_slowtmr+0x5a8>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007a28:	e067      	b.n	8007afa <tcp_slowtmr+0x652>
 8007a2a:	bf00      	nop
 8007a2c:	2000693c 	.word	0x2000693c
 8007a30:	10624dd3 	.word	0x10624dd3
 8007a34:	000124f8 	.word	0x000124f8
 8007a38:	20006938 	.word	0x20006938
 8007a3c:	08011648 	.word	0x08011648
 8007a40:	08011a80 	.word	0x08011a80
 8007a44:	0801168c 	.word	0x0801168c
 8007a48:	08011aac 	.word	0x08011aac
 8007a4c:	20006934 	.word	0x20006934
 8007a50:	20006948 	.word	0x20006948
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a56:	7d1b      	ldrb	r3, [r3, #20]
 8007a58:	2b0a      	cmp	r3, #10
 8007a5a:	d006      	beq.n	8007a6a <tcp_slowtmr+0x5c2>
 8007a5c:	4b2b      	ldr	r3, [pc, #172]	; (8007b0c <tcp_slowtmr+0x664>)
 8007a5e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8007a62:	492b      	ldr	r1, [pc, #172]	; (8007b10 <tcp_slowtmr+0x668>)
 8007a64:	482b      	ldr	r0, [pc, #172]	; (8007b14 <tcp_slowtmr+0x66c>)
 8007a66:	f007 fe2b 	bl	800f6c0 <iprintf>
    pcb_remove = 0;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007a70:	4b29      	ldr	r3, [pc, #164]	; (8007b18 <tcp_slowtmr+0x670>)
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a76:	6a1b      	ldr	r3, [r3, #32]
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	2bf0      	cmp	r3, #240	; 0xf0
 8007a7c:	d904      	bls.n	8007a88 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8007a7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a82:	3301      	adds	r3, #1
 8007a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d02f      	beq.n	8007af0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007a90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a92:	f000 fc11 	bl	80082b8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d010      	beq.n	8007abe <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007a9c:	4b1f      	ldr	r3, [pc, #124]	; (8007b1c <tcp_slowtmr+0x674>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d106      	bne.n	8007ab4 <tcp_slowtmr+0x60c>
 8007aa6:	4b19      	ldr	r3, [pc, #100]	; (8007b0c <tcp_slowtmr+0x664>)
 8007aa8:	f240 52af 	movw	r2, #1455	; 0x5af
 8007aac:	491c      	ldr	r1, [pc, #112]	; (8007b20 <tcp_slowtmr+0x678>)
 8007aae:	4819      	ldr	r0, [pc, #100]	; (8007b14 <tcp_slowtmr+0x66c>)
 8007ab0:	f007 fe06 	bl	800f6c0 <iprintf>
        prev->next = pcb->next;
 8007ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab6:	68da      	ldr	r2, [r3, #12]
 8007ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aba:	60da      	str	r2, [r3, #12]
 8007abc:	e00f      	b.n	8007ade <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007abe:	4b17      	ldr	r3, [pc, #92]	; (8007b1c <tcp_slowtmr+0x674>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d006      	beq.n	8007ad6 <tcp_slowtmr+0x62e>
 8007ac8:	4b10      	ldr	r3, [pc, #64]	; (8007b0c <tcp_slowtmr+0x664>)
 8007aca:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8007ace:	4915      	ldr	r1, [pc, #84]	; (8007b24 <tcp_slowtmr+0x67c>)
 8007ad0:	4810      	ldr	r0, [pc, #64]	; (8007b14 <tcp_slowtmr+0x66c>)
 8007ad2:	f007 fdf5 	bl	800f6c0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	4a10      	ldr	r2, [pc, #64]	; (8007b1c <tcp_slowtmr+0x674>)
 8007adc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8007ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007ae8:	69f8      	ldr	r0, [r7, #28]
 8007aea:	f7fe ff85 	bl	80069f8 <tcp_free>
 8007aee:	e004      	b.n	8007afa <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8007af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1a9      	bne.n	8007a54 <tcp_slowtmr+0x5ac>
    }
  }
}
 8007b00:	bf00      	nop
 8007b02:	bf00      	nop
 8007b04:	3730      	adds	r7, #48	; 0x30
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bdb0      	pop	{r4, r5, r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	08011648 	.word	0x08011648
 8007b10:	08011ad8 	.word	0x08011ad8
 8007b14:	0801168c 	.word	0x0801168c
 8007b18:	2000693c 	.word	0x2000693c
 8007b1c:	20006948 	.word	0x20006948
 8007b20:	08011b08 	.word	0x08011b08
 8007b24:	08011b30 	.word	0x08011b30

08007b28 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007b2e:	4b2d      	ldr	r3, [pc, #180]	; (8007be4 <tcp_fasttmr+0xbc>)
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	3301      	adds	r3, #1
 8007b34:	b2da      	uxtb	r2, r3
 8007b36:	4b2b      	ldr	r3, [pc, #172]	; (8007be4 <tcp_fasttmr+0xbc>)
 8007b38:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007b3a:	4b2b      	ldr	r3, [pc, #172]	; (8007be8 <tcp_fasttmr+0xc0>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007b40:	e048      	b.n	8007bd4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	7f9a      	ldrb	r2, [r3, #30]
 8007b46:	4b27      	ldr	r3, [pc, #156]	; (8007be4 <tcp_fasttmr+0xbc>)
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d03f      	beq.n	8007bce <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007b4e:	4b25      	ldr	r3, [pc, #148]	; (8007be4 <tcp_fasttmr+0xbc>)
 8007b50:	781a      	ldrb	r2, [r3, #0]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	8b5b      	ldrh	r3, [r3, #26]
 8007b5a:	f003 0301 	and.w	r3, r3, #1
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d010      	beq.n	8007b84 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	8b5b      	ldrh	r3, [r3, #26]
 8007b66:	f043 0302 	orr.w	r3, r3, #2
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f004 f809 	bl	800bb88 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	8b5b      	ldrh	r3, [r3, #26]
 8007b7a:	f023 0303 	bic.w	r3, r3, #3
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	8b5b      	ldrh	r3, [r3, #26]
 8007b88:	f003 0308 	and.w	r3, r3, #8
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d009      	beq.n	8007ba4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	8b5b      	ldrh	r3, [r3, #26]
 8007b94:	f023 0308 	bic.w	r3, r3, #8
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f7ff f8be 	bl	8006d20 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00a      	beq.n	8007bc8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007bb2:	4b0e      	ldr	r3, [pc, #56]	; (8007bec <tcp_fasttmr+0xc4>)
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f819 	bl	8007bf0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007bbe:	4b0b      	ldr	r3, [pc, #44]	; (8007bec <tcp_fasttmr+0xc4>)
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d000      	beq.n	8007bc8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007bc6:	e7b8      	b.n	8007b3a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	607b      	str	r3, [r7, #4]
 8007bcc:	e002      	b.n	8007bd4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1b3      	bne.n	8007b42 <tcp_fasttmr+0x1a>
    }
  }
}
 8007bda:	bf00      	nop
 8007bdc:	bf00      	nop
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	200000d2 	.word	0x200000d2
 8007be8:	20006938 	.word	0x20006938
 8007bec:	20006934 	.word	0x20006934

08007bf0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007bf0:	b590      	push	{r4, r7, lr}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d109      	bne.n	8007c12 <tcp_process_refused_data+0x22>
 8007bfe:	4b37      	ldr	r3, [pc, #220]	; (8007cdc <tcp_process_refused_data+0xec>)
 8007c00:	f240 6209 	movw	r2, #1545	; 0x609
 8007c04:	4936      	ldr	r1, [pc, #216]	; (8007ce0 <tcp_process_refused_data+0xf0>)
 8007c06:	4837      	ldr	r0, [pc, #220]	; (8007ce4 <tcp_process_refused_data+0xf4>)
 8007c08:	f007 fd5a 	bl	800f6c0 <iprintf>
 8007c0c:	f06f 030f 	mvn.w	r3, #15
 8007c10:	e060      	b.n	8007cd4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c16:	7b5b      	ldrb	r3, [r3, #13]
 8007c18:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c1e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00b      	beq.n	8007c48 <tcp_process_refused_data+0x58>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6918      	ldr	r0, [r3, #16]
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	6879      	ldr	r1, [r7, #4]
 8007c40:	47a0      	blx	r4
 8007c42:	4603      	mov	r3, r0
 8007c44:	73fb      	strb	r3, [r7, #15]
 8007c46:	e007      	b.n	8007c58 <tcp_process_refused_data+0x68>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	68ba      	ldr	r2, [r7, #8]
 8007c4c:	6879      	ldr	r1, [r7, #4]
 8007c4e:	2000      	movs	r0, #0
 8007c50:	f000 f8c2 	bl	8007dd8 <tcp_recv_null>
 8007c54:	4603      	mov	r3, r0
 8007c56:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d12a      	bne.n	8007cb6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007c60:	7bbb      	ldrb	r3, [r7, #14]
 8007c62:	f003 0320 	and.w	r3, r3, #32
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d033      	beq.n	8007cd2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c6e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007c72:	d005      	beq.n	8007c80 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c78:	3301      	adds	r3, #1
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00b      	beq.n	8007ca2 <tcp_process_refused_data+0xb2>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6918      	ldr	r0, [r3, #16]
 8007c94:	2300      	movs	r3, #0
 8007c96:	2200      	movs	r2, #0
 8007c98:	6879      	ldr	r1, [r7, #4]
 8007c9a:	47a0      	blx	r4
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	73fb      	strb	r3, [r7, #15]
 8007ca0:	e001      	b.n	8007ca6 <tcp_process_refused_data+0xb6>
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007caa:	f113 0f0d 	cmn.w	r3, #13
 8007cae:	d110      	bne.n	8007cd2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007cb0:	f06f 030c 	mvn.w	r3, #12
 8007cb4:	e00e      	b.n	8007cd4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8007cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cba:	f113 0f0d 	cmn.w	r3, #13
 8007cbe:	d102      	bne.n	8007cc6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007cc0:	f06f 030c 	mvn.w	r3, #12
 8007cc4:	e006      	b.n	8007cd4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007ccc:	f06f 0304 	mvn.w	r3, #4
 8007cd0:	e000      	b.n	8007cd4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3714      	adds	r7, #20
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd90      	pop	{r4, r7, pc}
 8007cdc:	08011648 	.word	0x08011648
 8007ce0:	08011b58 	.word	0x08011b58
 8007ce4:	0801168c 	.word	0x0801168c

08007ce8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007cf0:	e007      	b.n	8007d02 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f80a 	bl	8007d12 <tcp_seg_free>
    seg = next;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d1f4      	bne.n	8007cf2 <tcp_segs_free+0xa>
  }
}
 8007d08:	bf00      	nop
 8007d0a:	bf00      	nop
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b082      	sub	sp, #8
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00c      	beq.n	8007d3a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d004      	beq.n	8007d32 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7fe fb21 	bl	8006374 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007d32:	6879      	ldr	r1, [r7, #4]
 8007d34:	2003      	movs	r0, #3
 8007d36:	f7fd fd0b 	bl	8005750 <memp_free>
  }
}
 8007d3a:	bf00      	nop
 8007d3c:	3708      	adds	r7, #8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
	...

08007d44 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d107      	bne.n	8007d66 <tcp_setprio+0x22>
 8007d56:	4b07      	ldr	r3, [pc, #28]	; (8007d74 <tcp_setprio+0x30>)
 8007d58:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8007d5c:	4906      	ldr	r1, [pc, #24]	; (8007d78 <tcp_setprio+0x34>)
 8007d5e:	4807      	ldr	r0, [pc, #28]	; (8007d7c <tcp_setprio+0x38>)
 8007d60:	f007 fcae 	bl	800f6c0 <iprintf>
 8007d64:	e002      	b.n	8007d6c <tcp_setprio+0x28>

  pcb->prio = prio;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	78fa      	ldrb	r2, [r7, #3]
 8007d6a:	755a      	strb	r2, [r3, #21]
}
 8007d6c:	3708      	adds	r7, #8
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	08011648 	.word	0x08011648
 8007d78:	08011b80 	.word	0x08011b80
 8007d7c:	0801168c 	.word	0x0801168c

08007d80 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d106      	bne.n	8007d9c <tcp_seg_copy+0x1c>
 8007d8e:	4b0f      	ldr	r3, [pc, #60]	; (8007dcc <tcp_seg_copy+0x4c>)
 8007d90:	f240 6282 	movw	r2, #1666	; 0x682
 8007d94:	490e      	ldr	r1, [pc, #56]	; (8007dd0 <tcp_seg_copy+0x50>)
 8007d96:	480f      	ldr	r0, [pc, #60]	; (8007dd4 <tcp_seg_copy+0x54>)
 8007d98:	f007 fc92 	bl	800f6c0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007d9c:	2003      	movs	r0, #3
 8007d9e:	f7fd fc8b 	bl	80056b8 <memp_malloc>
 8007da2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d101      	bne.n	8007dae <tcp_seg_copy+0x2e>
    return NULL;
 8007daa:	2300      	movs	r3, #0
 8007dac:	e00a      	b.n	8007dc4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007dae:	2210      	movs	r2, #16
 8007db0:	6879      	ldr	r1, [r7, #4]
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	f007 fc54 	bl	800f660 <memcpy>
  pbuf_ref(cseg->p);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7fe fb79 	bl	80064b4 <pbuf_ref>
  return cseg;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3710      	adds	r7, #16
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	08011648 	.word	0x08011648
 8007dd0:	08011b9c 	.word	0x08011b9c
 8007dd4:	0801168c 	.word	0x0801168c

08007dd8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	607a      	str	r2, [r7, #4]
 8007de4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d109      	bne.n	8007e00 <tcp_recv_null+0x28>
 8007dec:	4b12      	ldr	r3, [pc, #72]	; (8007e38 <tcp_recv_null+0x60>)
 8007dee:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8007df2:	4912      	ldr	r1, [pc, #72]	; (8007e3c <tcp_recv_null+0x64>)
 8007df4:	4812      	ldr	r0, [pc, #72]	; (8007e40 <tcp_recv_null+0x68>)
 8007df6:	f007 fc63 	bl	800f6c0 <iprintf>
 8007dfa:	f06f 030f 	mvn.w	r3, #15
 8007dfe:	e016      	b.n	8007e2e <tcp_recv_null+0x56>

  if (p != NULL) {
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d009      	beq.n	8007e1a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	891b      	ldrh	r3, [r3, #8]
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	68b8      	ldr	r0, [r7, #8]
 8007e0e:	f7ff fab5 	bl	800737c <tcp_recved>
    pbuf_free(p);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f7fe faae 	bl	8006374 <pbuf_free>
 8007e18:	e008      	b.n	8007e2c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007e1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d104      	bne.n	8007e2c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007e22:	68b8      	ldr	r0, [r7, #8]
 8007e24:	f7fe ffe6 	bl	8006df4 <tcp_close>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	e000      	b.n	8007e2e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	08011648 	.word	0x08011648
 8007e3c:	08011bb8 	.word	0x08011bb8
 8007e40:	0801168c 	.word	0x0801168c

08007e44 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b086      	sub	sp, #24
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	db01      	blt.n	8007e5a <tcp_kill_prio+0x16>
 8007e56:	79fb      	ldrb	r3, [r7, #7]
 8007e58:	e000      	b.n	8007e5c <tcp_kill_prio+0x18>
 8007e5a:	237f      	movs	r3, #127	; 0x7f
 8007e5c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007e5e:	7afb      	ldrb	r3, [r7, #11]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d034      	beq.n	8007ece <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007e64:	7afb      	ldrb	r3, [r7, #11]
 8007e66:	3b01      	subs	r3, #1
 8007e68:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e72:	4b19      	ldr	r3, [pc, #100]	; (8007ed8 <tcp_kill_prio+0x94>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	617b      	str	r3, [r7, #20]
 8007e78:	e01f      	b.n	8007eba <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	7d5b      	ldrb	r3, [r3, #21]
 8007e7e:	7afa      	ldrb	r2, [r7, #11]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d80c      	bhi.n	8007e9e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007e88:	7afa      	ldrb	r2, [r7, #11]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d112      	bne.n	8007eb4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007e8e:	4b13      	ldr	r3, [pc, #76]	; (8007edc <tcp_kill_prio+0x98>)
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	6a1b      	ldr	r3, [r3, #32]
 8007e96:	1ad3      	subs	r3, r2, r3
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d80a      	bhi.n	8007eb4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007e9e:	4b0f      	ldr	r3, [pc, #60]	; (8007edc <tcp_kill_prio+0x98>)
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	1ad3      	subs	r3, r2, r3
 8007ea8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	7d5b      	ldrb	r3, [r3, #21]
 8007eb2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	617b      	str	r3, [r7, #20]
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d1dc      	bne.n	8007e7a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d004      	beq.n	8007ed0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007ec6:	6938      	ldr	r0, [r7, #16]
 8007ec8:	f7ff f87e 	bl	8006fc8 <tcp_abort>
 8007ecc:	e000      	b.n	8007ed0 <tcp_kill_prio+0x8c>
    return;
 8007ece:	bf00      	nop
  }
}
 8007ed0:	3718      	adds	r7, #24
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	20006938 	.word	0x20006938
 8007edc:	2000693c 	.word	0x2000693c

08007ee0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b086      	sub	sp, #24
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007eea:	79fb      	ldrb	r3, [r7, #7]
 8007eec:	2b08      	cmp	r3, #8
 8007eee:	d009      	beq.n	8007f04 <tcp_kill_state+0x24>
 8007ef0:	79fb      	ldrb	r3, [r7, #7]
 8007ef2:	2b09      	cmp	r3, #9
 8007ef4:	d006      	beq.n	8007f04 <tcp_kill_state+0x24>
 8007ef6:	4b1a      	ldr	r3, [pc, #104]	; (8007f60 <tcp_kill_state+0x80>)
 8007ef8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007efc:	4919      	ldr	r1, [pc, #100]	; (8007f64 <tcp_kill_state+0x84>)
 8007efe:	481a      	ldr	r0, [pc, #104]	; (8007f68 <tcp_kill_state+0x88>)
 8007f00:	f007 fbde 	bl	800f6c0 <iprintf>

  inactivity = 0;
 8007f04:	2300      	movs	r3, #0
 8007f06:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f0c:	4b17      	ldr	r3, [pc, #92]	; (8007f6c <tcp_kill_state+0x8c>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	617b      	str	r3, [r7, #20]
 8007f12:	e017      	b.n	8007f44 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	7d1b      	ldrb	r3, [r3, #20]
 8007f18:	79fa      	ldrb	r2, [r7, #7]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d10f      	bne.n	8007f3e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007f1e:	4b14      	ldr	r3, [pc, #80]	; (8007f70 <tcp_kill_state+0x90>)
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	6a1b      	ldr	r3, [r3, #32]
 8007f26:	1ad3      	subs	r3, r2, r3
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d807      	bhi.n	8007f3e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007f2e:	4b10      	ldr	r3, [pc, #64]	; (8007f70 <tcp_kill_state+0x90>)
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	6a1b      	ldr	r3, [r3, #32]
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	617b      	str	r3, [r7, #20]
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1e4      	bne.n	8007f14 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d003      	beq.n	8007f58 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007f50:	2100      	movs	r1, #0
 8007f52:	6938      	ldr	r0, [r7, #16]
 8007f54:	f7fe ff7a 	bl	8006e4c <tcp_abandon>
  }
}
 8007f58:	bf00      	nop
 8007f5a:	3718      	adds	r7, #24
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	08011648 	.word	0x08011648
 8007f64:	08011bd4 	.word	0x08011bd4
 8007f68:	0801168c 	.word	0x0801168c
 8007f6c:	20006938 	.word	0x20006938
 8007f70:	2000693c 	.word	0x2000693c

08007f74 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f82:	4b12      	ldr	r3, [pc, #72]	; (8007fcc <tcp_kill_timewait+0x58>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	60fb      	str	r3, [r7, #12]
 8007f88:	e012      	b.n	8007fb0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007f8a:	4b11      	ldr	r3, [pc, #68]	; (8007fd0 <tcp_kill_timewait+0x5c>)
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6a1b      	ldr	r3, [r3, #32]
 8007f92:	1ad3      	subs	r3, r2, r3
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d807      	bhi.n	8007faa <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007f9a:	4b0d      	ldr	r3, [pc, #52]	; (8007fd0 <tcp_kill_timewait+0x5c>)
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6a1b      	ldr	r3, [r3, #32]
 8007fa2:	1ad3      	subs	r3, r2, r3
 8007fa4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	60fb      	str	r3, [r7, #12]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d1e9      	bne.n	8007f8a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d002      	beq.n	8007fc2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007fbc:	68b8      	ldr	r0, [r7, #8]
 8007fbe:	f7ff f803 	bl	8006fc8 <tcp_abort>
  }
}
 8007fc2:	bf00      	nop
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	20006948 	.word	0x20006948
 8007fd0:	2000693c 	.word	0x2000693c

08007fd4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007fda:	4b10      	ldr	r3, [pc, #64]	; (800801c <tcp_handle_closepend+0x48>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007fe0:	e014      	b.n	800800c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	8b5b      	ldrh	r3, [r3, #26]
 8007fec:	f003 0308 	and.w	r3, r3, #8
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d009      	beq.n	8008008 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	8b5b      	ldrh	r3, [r3, #26]
 8007ff8:	f023 0308 	bic.w	r3, r3, #8
 8007ffc:	b29a      	uxth	r2, r3
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f7fe fe8c 	bl	8006d20 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d1e7      	bne.n	8007fe2 <tcp_handle_closepend+0xe>
  }
}
 8008012:	bf00      	nop
 8008014:	bf00      	nop
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	20006938 	.word	0x20006938

08008020 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	4603      	mov	r3, r0
 8008028:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800802a:	2001      	movs	r0, #1
 800802c:	f7fd fb44 	bl	80056b8 <memp_malloc>
 8008030:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d126      	bne.n	8008086 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8008038:	f7ff ffcc 	bl	8007fd4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800803c:	f7ff ff9a 	bl	8007f74 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008040:	2001      	movs	r0, #1
 8008042:	f7fd fb39 	bl	80056b8 <memp_malloc>
 8008046:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d11b      	bne.n	8008086 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800804e:	2009      	movs	r0, #9
 8008050:	f7ff ff46 	bl	8007ee0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008054:	2001      	movs	r0, #1
 8008056:	f7fd fb2f 	bl	80056b8 <memp_malloc>
 800805a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d111      	bne.n	8008086 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8008062:	2008      	movs	r0, #8
 8008064:	f7ff ff3c 	bl	8007ee0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008068:	2001      	movs	r0, #1
 800806a:	f7fd fb25 	bl	80056b8 <memp_malloc>
 800806e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d107      	bne.n	8008086 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8008076:	79fb      	ldrb	r3, [r7, #7]
 8008078:	4618      	mov	r0, r3
 800807a:	f7ff fee3 	bl	8007e44 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800807e:	2001      	movs	r0, #1
 8008080:	f7fd fb1a 	bl	80056b8 <memp_malloc>
 8008084:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d03f      	beq.n	800810c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800808c:	229c      	movs	r2, #156	; 0x9c
 800808e:	2100      	movs	r1, #0
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f007 fb0d 	bl	800f6b0 <memset>
    pcb->prio = prio;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	79fa      	ldrb	r2, [r7, #7]
 800809a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80080a2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80080ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	22ff      	movs	r2, #255	; 0xff
 80080ba:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f44f 7206 	mov.w	r2, #536	; 0x218
 80080c2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2206      	movs	r2, #6
 80080c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2206      	movs	r2, #6
 80080d0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080d8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2201      	movs	r2, #1
 80080de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80080e2:	4b0d      	ldr	r3, [pc, #52]	; (8008118 <tcp_alloc+0xf8>)
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80080ea:	4b0c      	ldr	r3, [pc, #48]	; (800811c <tcp_alloc+0xfc>)
 80080ec:	781a      	ldrb	r2, [r3, #0]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80080f8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	4a08      	ldr	r2, [pc, #32]	; (8008120 <tcp_alloc+0x100>)
 8008100:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	4a07      	ldr	r2, [pc, #28]	; (8008124 <tcp_alloc+0x104>)
 8008108:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800810c:	68fb      	ldr	r3, [r7, #12]
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	2000693c 	.word	0x2000693c
 800811c:	200000d2 	.word	0x200000d2
 8008120:	08007dd9 	.word	0x08007dd9
 8008124:	006ddd00 	.word	0x006ddd00

08008128 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800812c:	2040      	movs	r0, #64	; 0x40
 800812e:	f7ff ff77 	bl	8008020 <tcp_alloc>
 8008132:	4603      	mov	r3, r0
}
 8008134:	4618      	mov	r0, r3
 8008136:	bd80      	pop	{r7, pc}

08008138 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d002      	beq.n	800814e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	683a      	ldr	r2, [r7, #0]
 800814c:	611a      	str	r2, [r3, #16]
  }
}
 800814e:	bf00      	nop
 8008150:	370c      	adds	r7, #12
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
	...

0800815c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d00e      	beq.n	800818a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	7d1b      	ldrb	r3, [r3, #20]
 8008170:	2b01      	cmp	r3, #1
 8008172:	d106      	bne.n	8008182 <tcp_recv+0x26>
 8008174:	4b07      	ldr	r3, [pc, #28]	; (8008194 <tcp_recv+0x38>)
 8008176:	f240 72df 	movw	r2, #2015	; 0x7df
 800817a:	4907      	ldr	r1, [pc, #28]	; (8008198 <tcp_recv+0x3c>)
 800817c:	4807      	ldr	r0, [pc, #28]	; (800819c <tcp_recv+0x40>)
 800817e:	f007 fa9f 	bl	800f6c0 <iprintf>
    pcb->recv = recv;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	683a      	ldr	r2, [r7, #0]
 8008186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800818a:	bf00      	nop
 800818c:	3708      	adds	r7, #8
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	08011648 	.word	0x08011648
 8008198:	08011be4 	.word	0x08011be4
 800819c:	0801168c 	.word	0x0801168c

080081a0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00e      	beq.n	80081ce <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	7d1b      	ldrb	r3, [r3, #20]
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d106      	bne.n	80081c6 <tcp_sent+0x26>
 80081b8:	4b07      	ldr	r3, [pc, #28]	; (80081d8 <tcp_sent+0x38>)
 80081ba:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80081be:	4907      	ldr	r1, [pc, #28]	; (80081dc <tcp_sent+0x3c>)
 80081c0:	4807      	ldr	r0, [pc, #28]	; (80081e0 <tcp_sent+0x40>)
 80081c2:	f007 fa7d 	bl	800f6c0 <iprintf>
    pcb->sent = sent;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	683a      	ldr	r2, [r7, #0]
 80081ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80081ce:	bf00      	nop
 80081d0:	3708      	adds	r7, #8
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	08011648 	.word	0x08011648
 80081dc:	08011c0c 	.word	0x08011c0c
 80081e0:	0801168c 	.word	0x0801168c

080081e4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00e      	beq.n	8008212 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	7d1b      	ldrb	r3, [r3, #20]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d106      	bne.n	800820a <tcp_err+0x26>
 80081fc:	4b07      	ldr	r3, [pc, #28]	; (800821c <tcp_err+0x38>)
 80081fe:	f640 020d 	movw	r2, #2061	; 0x80d
 8008202:	4907      	ldr	r1, [pc, #28]	; (8008220 <tcp_err+0x3c>)
 8008204:	4807      	ldr	r0, [pc, #28]	; (8008224 <tcp_err+0x40>)
 8008206:	f007 fa5b 	bl	800f6c0 <iprintf>
    pcb->errf = err;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	683a      	ldr	r2, [r7, #0]
 800820e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8008212:	bf00      	nop
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	08011648 	.word	0x08011648
 8008220:	08011c34 	.word	0x08011c34
 8008224:	0801168c 	.word	0x0801168c

08008228 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d008      	beq.n	800824a <tcp_accept+0x22>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	7d1b      	ldrb	r3, [r3, #20]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d104      	bne.n	800824a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	683a      	ldr	r2, [r7, #0]
 8008248:	619a      	str	r2, [r3, #24]
  }
}
 800824a:	bf00      	nop
 800824c:	3714      	adds	r7, #20
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
	...

08008258 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	4613      	mov	r3, r2
 8008264:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d107      	bne.n	800827c <tcp_poll+0x24>
 800826c:	4b0e      	ldr	r3, [pc, #56]	; (80082a8 <tcp_poll+0x50>)
 800826e:	f640 023d 	movw	r2, #2109	; 0x83d
 8008272:	490e      	ldr	r1, [pc, #56]	; (80082ac <tcp_poll+0x54>)
 8008274:	480e      	ldr	r0, [pc, #56]	; (80082b0 <tcp_poll+0x58>)
 8008276:	f007 fa23 	bl	800f6c0 <iprintf>
 800827a:	e011      	b.n	80082a0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	7d1b      	ldrb	r3, [r3, #20]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d106      	bne.n	8008292 <tcp_poll+0x3a>
 8008284:	4b08      	ldr	r3, [pc, #32]	; (80082a8 <tcp_poll+0x50>)
 8008286:	f640 023e 	movw	r2, #2110	; 0x83e
 800828a:	490a      	ldr	r1, [pc, #40]	; (80082b4 <tcp_poll+0x5c>)
 800828c:	4808      	ldr	r0, [pc, #32]	; (80082b0 <tcp_poll+0x58>)
 800828e:	f007 fa17 	bl	800f6c0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	68ba      	ldr	r2, [r7, #8]
 8008296:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	79fa      	ldrb	r2, [r7, #7]
 800829e:	775a      	strb	r2, [r3, #29]
}
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	08011648 	.word	0x08011648
 80082ac:	08011c5c 	.word	0x08011c5c
 80082b0:	0801168c 	.word	0x0801168c
 80082b4:	08011c74 	.word	0x08011c74

080082b8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d107      	bne.n	80082d6 <tcp_pcb_purge+0x1e>
 80082c6:	4b21      	ldr	r3, [pc, #132]	; (800834c <tcp_pcb_purge+0x94>)
 80082c8:	f640 0251 	movw	r2, #2129	; 0x851
 80082cc:	4920      	ldr	r1, [pc, #128]	; (8008350 <tcp_pcb_purge+0x98>)
 80082ce:	4821      	ldr	r0, [pc, #132]	; (8008354 <tcp_pcb_purge+0x9c>)
 80082d0:	f007 f9f6 	bl	800f6c0 <iprintf>
 80082d4:	e037      	b.n	8008346 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	7d1b      	ldrb	r3, [r3, #20]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d033      	beq.n	8008346 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80082e2:	2b0a      	cmp	r3, #10
 80082e4:	d02f      	beq.n	8008346 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d02b      	beq.n	8008346 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d007      	beq.n	8008306 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082fa:	4618      	mov	r0, r3
 80082fc:	f7fe f83a 	bl	8006374 <pbuf_free>
      pcb->refused_data = NULL;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800830a:	2b00      	cmp	r3, #0
 800830c:	d002      	beq.n	8008314 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f986 	bl	8008620 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800831a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008320:	4618      	mov	r0, r3
 8008322:	f7ff fce1 	bl	8007ce8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800832a:	4618      	mov	r0, r3
 800832c:	f7ff fcdc 	bl	8007ce8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	66da      	str	r2, [r3, #108]	; 0x6c
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	08011648 	.word	0x08011648
 8008350:	08011c94 	.word	0x08011c94
 8008354:	0801168c 	.word	0x0801168c

08008358 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d106      	bne.n	8008376 <tcp_pcb_remove+0x1e>
 8008368:	4b3e      	ldr	r3, [pc, #248]	; (8008464 <tcp_pcb_remove+0x10c>)
 800836a:	f640 0283 	movw	r2, #2179	; 0x883
 800836e:	493e      	ldr	r1, [pc, #248]	; (8008468 <tcp_pcb_remove+0x110>)
 8008370:	483e      	ldr	r0, [pc, #248]	; (800846c <tcp_pcb_remove+0x114>)
 8008372:	f007 f9a5 	bl	800f6c0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d106      	bne.n	800838a <tcp_pcb_remove+0x32>
 800837c:	4b39      	ldr	r3, [pc, #228]	; (8008464 <tcp_pcb_remove+0x10c>)
 800837e:	f640 0284 	movw	r2, #2180	; 0x884
 8008382:	493b      	ldr	r1, [pc, #236]	; (8008470 <tcp_pcb_remove+0x118>)
 8008384:	4839      	ldr	r0, [pc, #228]	; (800846c <tcp_pcb_remove+0x114>)
 8008386:	f007 f99b 	bl	800f6c0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	683a      	ldr	r2, [r7, #0]
 8008390:	429a      	cmp	r2, r3
 8008392:	d105      	bne.n	80083a0 <tcp_pcb_remove+0x48>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68da      	ldr	r2, [r3, #12]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	601a      	str	r2, [r3, #0]
 800839e:	e013      	b.n	80083c8 <tcp_pcb_remove+0x70>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	60fb      	str	r3, [r7, #12]
 80083a6:	e00c      	b.n	80083c2 <tcp_pcb_remove+0x6a>
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	683a      	ldr	r2, [r7, #0]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d104      	bne.n	80083bc <tcp_pcb_remove+0x64>
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	68da      	ldr	r2, [r3, #12]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	60da      	str	r2, [r3, #12]
 80083ba:	e005      	b.n	80083c8 <tcp_pcb_remove+0x70>
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	60fb      	str	r3, [r7, #12]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d1ef      	bne.n	80083a8 <tcp_pcb_remove+0x50>
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	2200      	movs	r2, #0
 80083cc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80083ce:	6838      	ldr	r0, [r7, #0]
 80083d0:	f7ff ff72 	bl	80082b8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	7d1b      	ldrb	r3, [r3, #20]
 80083d8:	2b0a      	cmp	r3, #10
 80083da:	d013      	beq.n	8008404 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d00f      	beq.n	8008404 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	8b5b      	ldrh	r3, [r3, #26]
 80083e8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d009      	beq.n	8008404 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	8b5b      	ldrh	r3, [r3, #26]
 80083f4:	f043 0302 	orr.w	r3, r3, #2
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80083fe:	6838      	ldr	r0, [r7, #0]
 8008400:	f003 fbc2 	bl	800bb88 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	7d1b      	ldrb	r3, [r3, #20]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d020      	beq.n	800844e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008410:	2b00      	cmp	r3, #0
 8008412:	d006      	beq.n	8008422 <tcp_pcb_remove+0xca>
 8008414:	4b13      	ldr	r3, [pc, #76]	; (8008464 <tcp_pcb_remove+0x10c>)
 8008416:	f640 0293 	movw	r2, #2195	; 0x893
 800841a:	4916      	ldr	r1, [pc, #88]	; (8008474 <tcp_pcb_remove+0x11c>)
 800841c:	4813      	ldr	r0, [pc, #76]	; (800846c <tcp_pcb_remove+0x114>)
 800841e:	f007 f94f 	bl	800f6c0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008426:	2b00      	cmp	r3, #0
 8008428:	d006      	beq.n	8008438 <tcp_pcb_remove+0xe0>
 800842a:	4b0e      	ldr	r3, [pc, #56]	; (8008464 <tcp_pcb_remove+0x10c>)
 800842c:	f640 0294 	movw	r2, #2196	; 0x894
 8008430:	4911      	ldr	r1, [pc, #68]	; (8008478 <tcp_pcb_remove+0x120>)
 8008432:	480e      	ldr	r0, [pc, #56]	; (800846c <tcp_pcb_remove+0x114>)
 8008434:	f007 f944 	bl	800f6c0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800843c:	2b00      	cmp	r3, #0
 800843e:	d006      	beq.n	800844e <tcp_pcb_remove+0xf6>
 8008440:	4b08      	ldr	r3, [pc, #32]	; (8008464 <tcp_pcb_remove+0x10c>)
 8008442:	f640 0296 	movw	r2, #2198	; 0x896
 8008446:	490d      	ldr	r1, [pc, #52]	; (800847c <tcp_pcb_remove+0x124>)
 8008448:	4808      	ldr	r0, [pc, #32]	; (800846c <tcp_pcb_remove+0x114>)
 800844a:	f007 f939 	bl	800f6c0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	2200      	movs	r2, #0
 8008452:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	2200      	movs	r2, #0
 8008458:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800845a:	bf00      	nop
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	08011648 	.word	0x08011648
 8008468:	08011cb0 	.word	0x08011cb0
 800846c:	0801168c 	.word	0x0801168c
 8008470:	08011ccc 	.word	0x08011ccc
 8008474:	08011cec 	.word	0x08011cec
 8008478:	08011d04 	.word	0x08011d04
 800847c:	08011d20 	.word	0x08011d20

08008480 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d106      	bne.n	800849c <tcp_next_iss+0x1c>
 800848e:	4b0a      	ldr	r3, [pc, #40]	; (80084b8 <tcp_next_iss+0x38>)
 8008490:	f640 02af 	movw	r2, #2223	; 0x8af
 8008494:	4909      	ldr	r1, [pc, #36]	; (80084bc <tcp_next_iss+0x3c>)
 8008496:	480a      	ldr	r0, [pc, #40]	; (80084c0 <tcp_next_iss+0x40>)
 8008498:	f007 f912 	bl	800f6c0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800849c:	4b09      	ldr	r3, [pc, #36]	; (80084c4 <tcp_next_iss+0x44>)
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	4b09      	ldr	r3, [pc, #36]	; (80084c8 <tcp_next_iss+0x48>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4413      	add	r3, r2
 80084a6:	4a07      	ldr	r2, [pc, #28]	; (80084c4 <tcp_next_iss+0x44>)
 80084a8:	6013      	str	r3, [r2, #0]
  return iss;
 80084aa:	4b06      	ldr	r3, [pc, #24]	; (80084c4 <tcp_next_iss+0x44>)
 80084ac:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	08011648 	.word	0x08011648
 80084bc:	08011d38 	.word	0x08011d38
 80084c0:	0801168c 	.word	0x0801168c
 80084c4:	2000000c 	.word	0x2000000c
 80084c8:	2000693c 	.word	0x2000693c

080084cc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b086      	sub	sp, #24
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	4603      	mov	r3, r0
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]
 80084d8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d106      	bne.n	80084ee <tcp_eff_send_mss_netif+0x22>
 80084e0:	4b14      	ldr	r3, [pc, #80]	; (8008534 <tcp_eff_send_mss_netif+0x68>)
 80084e2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80084e6:	4914      	ldr	r1, [pc, #80]	; (8008538 <tcp_eff_send_mss_netif+0x6c>)
 80084e8:	4814      	ldr	r0, [pc, #80]	; (800853c <tcp_eff_send_mss_netif+0x70>)
 80084ea:	f007 f8e9 	bl	800f6c0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d101      	bne.n	80084f8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80084f4:	89fb      	ldrh	r3, [r7, #14]
 80084f6:	e019      	b.n	800852c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80084fc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80084fe:	8afb      	ldrh	r3, [r7, #22]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d012      	beq.n	800852a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008504:	2328      	movs	r3, #40	; 0x28
 8008506:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008508:	8afa      	ldrh	r2, [r7, #22]
 800850a:	8abb      	ldrh	r3, [r7, #20]
 800850c:	429a      	cmp	r2, r3
 800850e:	d904      	bls.n	800851a <tcp_eff_send_mss_netif+0x4e>
 8008510:	8afa      	ldrh	r2, [r7, #22]
 8008512:	8abb      	ldrh	r3, [r7, #20]
 8008514:	1ad3      	subs	r3, r2, r3
 8008516:	b29b      	uxth	r3, r3
 8008518:	e000      	b.n	800851c <tcp_eff_send_mss_netif+0x50>
 800851a:	2300      	movs	r3, #0
 800851c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800851e:	8a7a      	ldrh	r2, [r7, #18]
 8008520:	89fb      	ldrh	r3, [r7, #14]
 8008522:	4293      	cmp	r3, r2
 8008524:	bf28      	it	cs
 8008526:	4613      	movcs	r3, r2
 8008528:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800852a:	89fb      	ldrh	r3, [r7, #14]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3718      	adds	r7, #24
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	08011648 	.word	0x08011648
 8008538:	08011d54 	.word	0x08011d54
 800853c:	0801168c 	.word	0x0801168c

08008540 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d119      	bne.n	8008588 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8008554:	4b10      	ldr	r3, [pc, #64]	; (8008598 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8008556:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800855a:	4910      	ldr	r1, [pc, #64]	; (800859c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800855c:	4810      	ldr	r0, [pc, #64]	; (80085a0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800855e:	f007 f8af 	bl	800f6c0 <iprintf>

  while (pcb != NULL) {
 8008562:	e011      	b.n	8008588 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	429a      	cmp	r2, r3
 800856e:	d108      	bne.n	8008582 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	f7fe fd26 	bl	8006fc8 <tcp_abort>
      pcb = next;
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	60fb      	str	r3, [r7, #12]
 8008580:	e002      	b.n	8008588 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d1ea      	bne.n	8008564 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800858e:	bf00      	nop
 8008590:	bf00      	nop
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	08011648 	.word	0x08011648
 800859c:	08011d7c 	.word	0x08011d7c
 80085a0:	0801168c 	.word	0x0801168c

080085a4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d02a      	beq.n	800860a <tcp_netif_ip_addr_changed+0x66>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d026      	beq.n	800860a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80085bc:	4b15      	ldr	r3, [pc, #84]	; (8008614 <tcp_netif_ip_addr_changed+0x70>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4619      	mov	r1, r3
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f7ff ffbc 	bl	8008540 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80085c8:	4b13      	ldr	r3, [pc, #76]	; (8008618 <tcp_netif_ip_addr_changed+0x74>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4619      	mov	r1, r3
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f7ff ffb6 	bl	8008540 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d017      	beq.n	800860a <tcp_netif_ip_addr_changed+0x66>
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d013      	beq.n	800860a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80085e2:	4b0e      	ldr	r3, [pc, #56]	; (800861c <tcp_netif_ip_addr_changed+0x78>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	60fb      	str	r3, [r7, #12]
 80085e8:	e00c      	b.n	8008604 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d103      	bne.n	80085fe <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	60fb      	str	r3, [r7, #12]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1ef      	bne.n	80085ea <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800860a:	bf00      	nop
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	20006938 	.word	0x20006938
 8008618:	20006944 	.word	0x20006944
 800861c:	20006940 	.word	0x20006940

08008620 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800862c:	2b00      	cmp	r3, #0
 800862e:	d007      	beq.n	8008640 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008634:	4618      	mov	r0, r3
 8008636:	f7ff fb57 	bl	8007ce8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008640:	bf00      	nop
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008648:	b590      	push	{r4, r7, lr}
 800864a:	b08d      	sub	sp, #52	; 0x34
 800864c:	af04      	add	r7, sp, #16
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d105      	bne.n	8008664 <tcp_input+0x1c>
 8008658:	4b9b      	ldr	r3, [pc, #620]	; (80088c8 <tcp_input+0x280>)
 800865a:	2283      	movs	r2, #131	; 0x83
 800865c:	499b      	ldr	r1, [pc, #620]	; (80088cc <tcp_input+0x284>)
 800865e:	489c      	ldr	r0, [pc, #624]	; (80088d0 <tcp_input+0x288>)
 8008660:	f007 f82e 	bl	800f6c0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	4a9a      	ldr	r2, [pc, #616]	; (80088d4 <tcp_input+0x28c>)
 800866a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	895b      	ldrh	r3, [r3, #10]
 8008670:	2b13      	cmp	r3, #19
 8008672:	f240 83c4 	bls.w	8008dfe <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008676:	4b98      	ldr	r3, [pc, #608]	; (80088d8 <tcp_input+0x290>)
 8008678:	695b      	ldr	r3, [r3, #20]
 800867a:	4a97      	ldr	r2, [pc, #604]	; (80088d8 <tcp_input+0x290>)
 800867c:	6812      	ldr	r2, [r2, #0]
 800867e:	4611      	mov	r1, r2
 8008680:	4618      	mov	r0, r3
 8008682:	f006 f86b 	bl	800e75c <ip4_addr_isbroadcast_u32>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	f040 83ba 	bne.w	8008e02 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800868e:	4b92      	ldr	r3, [pc, #584]	; (80088d8 <tcp_input+0x290>)
 8008690:	695b      	ldr	r3, [r3, #20]
 8008692:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008696:	2be0      	cmp	r3, #224	; 0xe0
 8008698:	f000 83b3 	beq.w	8008e02 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800869c:	4b8d      	ldr	r3, [pc, #564]	; (80088d4 <tcp_input+0x28c>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	899b      	ldrh	r3, [r3, #12]
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7fc fbb1 	bl	8004e0c <lwip_htons>
 80086aa:	4603      	mov	r3, r0
 80086ac:	0b1b      	lsrs	r3, r3, #12
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80086b6:	7cbb      	ldrb	r3, [r7, #18]
 80086b8:	2b13      	cmp	r3, #19
 80086ba:	f240 83a4 	bls.w	8008e06 <tcp_input+0x7be>
 80086be:	7cbb      	ldrb	r3, [r7, #18]
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	891b      	ldrh	r3, [r3, #8]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	f200 839d 	bhi.w	8008e06 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80086cc:	7cbb      	ldrb	r3, [r7, #18]
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	3b14      	subs	r3, #20
 80086d2:	b29a      	uxth	r2, r3
 80086d4:	4b81      	ldr	r3, [pc, #516]	; (80088dc <tcp_input+0x294>)
 80086d6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80086d8:	4b81      	ldr	r3, [pc, #516]	; (80088e0 <tcp_input+0x298>)
 80086da:	2200      	movs	r2, #0
 80086dc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	895a      	ldrh	r2, [r3, #10]
 80086e2:	7cbb      	ldrb	r3, [r7, #18]
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d309      	bcc.n	80086fe <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80086ea:	4b7c      	ldr	r3, [pc, #496]	; (80088dc <tcp_input+0x294>)
 80086ec:	881a      	ldrh	r2, [r3, #0]
 80086ee:	4b7d      	ldr	r3, [pc, #500]	; (80088e4 <tcp_input+0x29c>)
 80086f0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80086f2:	7cbb      	ldrb	r3, [r7, #18]
 80086f4:	4619      	mov	r1, r3
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f7fd fdb6 	bl	8006268 <pbuf_remove_header>
 80086fc:	e04e      	b.n	800879c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d105      	bne.n	8008712 <tcp_input+0xca>
 8008706:	4b70      	ldr	r3, [pc, #448]	; (80088c8 <tcp_input+0x280>)
 8008708:	22c2      	movs	r2, #194	; 0xc2
 800870a:	4977      	ldr	r1, [pc, #476]	; (80088e8 <tcp_input+0x2a0>)
 800870c:	4870      	ldr	r0, [pc, #448]	; (80088d0 <tcp_input+0x288>)
 800870e:	f006 ffd7 	bl	800f6c0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008712:	2114      	movs	r1, #20
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f7fd fda7 	bl	8006268 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	895a      	ldrh	r2, [r3, #10]
 800871e:	4b71      	ldr	r3, [pc, #452]	; (80088e4 <tcp_input+0x29c>)
 8008720:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008722:	4b6e      	ldr	r3, [pc, #440]	; (80088dc <tcp_input+0x294>)
 8008724:	881a      	ldrh	r2, [r3, #0]
 8008726:	4b6f      	ldr	r3, [pc, #444]	; (80088e4 <tcp_input+0x29c>)
 8008728:	881b      	ldrh	r3, [r3, #0]
 800872a:	1ad3      	subs	r3, r2, r3
 800872c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800872e:	4b6d      	ldr	r3, [pc, #436]	; (80088e4 <tcp_input+0x29c>)
 8008730:	881b      	ldrh	r3, [r3, #0]
 8008732:	4619      	mov	r1, r3
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f7fd fd97 	bl	8006268 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	895b      	ldrh	r3, [r3, #10]
 8008740:	8a3a      	ldrh	r2, [r7, #16]
 8008742:	429a      	cmp	r2, r3
 8008744:	f200 8361 	bhi.w	8008e0a <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	4a64      	ldr	r2, [pc, #400]	; (80088e0 <tcp_input+0x298>)
 8008750:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	8a3a      	ldrh	r2, [r7, #16]
 8008758:	4611      	mov	r1, r2
 800875a:	4618      	mov	r0, r3
 800875c:	f7fd fd84 	bl	8006268 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	891a      	ldrh	r2, [r3, #8]
 8008764:	8a3b      	ldrh	r3, [r7, #16]
 8008766:	1ad3      	subs	r3, r2, r3
 8008768:	b29a      	uxth	r2, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	895b      	ldrh	r3, [r3, #10]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d005      	beq.n	8008782 <tcp_input+0x13a>
 8008776:	4b54      	ldr	r3, [pc, #336]	; (80088c8 <tcp_input+0x280>)
 8008778:	22df      	movs	r2, #223	; 0xdf
 800877a:	495c      	ldr	r1, [pc, #368]	; (80088ec <tcp_input+0x2a4>)
 800877c:	4854      	ldr	r0, [pc, #336]	; (80088d0 <tcp_input+0x288>)
 800877e:	f006 ff9f 	bl	800f6c0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	891a      	ldrh	r2, [r3, #8]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	891b      	ldrh	r3, [r3, #8]
 800878c:	429a      	cmp	r2, r3
 800878e:	d005      	beq.n	800879c <tcp_input+0x154>
 8008790:	4b4d      	ldr	r3, [pc, #308]	; (80088c8 <tcp_input+0x280>)
 8008792:	22e0      	movs	r2, #224	; 0xe0
 8008794:	4956      	ldr	r1, [pc, #344]	; (80088f0 <tcp_input+0x2a8>)
 8008796:	484e      	ldr	r0, [pc, #312]	; (80088d0 <tcp_input+0x288>)
 8008798:	f006 ff92 	bl	800f6c0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800879c:	4b4d      	ldr	r3, [pc, #308]	; (80088d4 <tcp_input+0x28c>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	881b      	ldrh	r3, [r3, #0]
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	4a4b      	ldr	r2, [pc, #300]	; (80088d4 <tcp_input+0x28c>)
 80087a6:	6814      	ldr	r4, [r2, #0]
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7fc fb2f 	bl	8004e0c <lwip_htons>
 80087ae:	4603      	mov	r3, r0
 80087b0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80087b2:	4b48      	ldr	r3, [pc, #288]	; (80088d4 <tcp_input+0x28c>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	885b      	ldrh	r3, [r3, #2]
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	4a46      	ldr	r2, [pc, #280]	; (80088d4 <tcp_input+0x28c>)
 80087bc:	6814      	ldr	r4, [r2, #0]
 80087be:	4618      	mov	r0, r3
 80087c0:	f7fc fb24 	bl	8004e0c <lwip_htons>
 80087c4:	4603      	mov	r3, r0
 80087c6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80087c8:	4b42      	ldr	r3, [pc, #264]	; (80088d4 <tcp_input+0x28c>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	4a41      	ldr	r2, [pc, #260]	; (80088d4 <tcp_input+0x28c>)
 80087d0:	6814      	ldr	r4, [r2, #0]
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7fc fb2f 	bl	8004e36 <lwip_htonl>
 80087d8:	4603      	mov	r3, r0
 80087da:	6063      	str	r3, [r4, #4]
 80087dc:	6863      	ldr	r3, [r4, #4]
 80087de:	4a45      	ldr	r2, [pc, #276]	; (80088f4 <tcp_input+0x2ac>)
 80087e0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80087e2:	4b3c      	ldr	r3, [pc, #240]	; (80088d4 <tcp_input+0x28c>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	4a3a      	ldr	r2, [pc, #232]	; (80088d4 <tcp_input+0x28c>)
 80087ea:	6814      	ldr	r4, [r2, #0]
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7fc fb22 	bl	8004e36 <lwip_htonl>
 80087f2:	4603      	mov	r3, r0
 80087f4:	60a3      	str	r3, [r4, #8]
 80087f6:	68a3      	ldr	r3, [r4, #8]
 80087f8:	4a3f      	ldr	r2, [pc, #252]	; (80088f8 <tcp_input+0x2b0>)
 80087fa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80087fc:	4b35      	ldr	r3, [pc, #212]	; (80088d4 <tcp_input+0x28c>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	89db      	ldrh	r3, [r3, #14]
 8008802:	b29b      	uxth	r3, r3
 8008804:	4a33      	ldr	r2, [pc, #204]	; (80088d4 <tcp_input+0x28c>)
 8008806:	6814      	ldr	r4, [r2, #0]
 8008808:	4618      	mov	r0, r3
 800880a:	f7fc faff 	bl	8004e0c <lwip_htons>
 800880e:	4603      	mov	r3, r0
 8008810:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008812:	4b30      	ldr	r3, [pc, #192]	; (80088d4 <tcp_input+0x28c>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	899b      	ldrh	r3, [r3, #12]
 8008818:	b29b      	uxth	r3, r3
 800881a:	4618      	mov	r0, r3
 800881c:	f7fc faf6 	bl	8004e0c <lwip_htons>
 8008820:	4603      	mov	r3, r0
 8008822:	b2db      	uxtb	r3, r3
 8008824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008828:	b2da      	uxtb	r2, r3
 800882a:	4b34      	ldr	r3, [pc, #208]	; (80088fc <tcp_input+0x2b4>)
 800882c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	891a      	ldrh	r2, [r3, #8]
 8008832:	4b33      	ldr	r3, [pc, #204]	; (8008900 <tcp_input+0x2b8>)
 8008834:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008836:	4b31      	ldr	r3, [pc, #196]	; (80088fc <tcp_input+0x2b4>)
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	f003 0303 	and.w	r3, r3, #3
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00c      	beq.n	800885c <tcp_input+0x214>
    tcplen++;
 8008842:	4b2f      	ldr	r3, [pc, #188]	; (8008900 <tcp_input+0x2b8>)
 8008844:	881b      	ldrh	r3, [r3, #0]
 8008846:	3301      	adds	r3, #1
 8008848:	b29a      	uxth	r2, r3
 800884a:	4b2d      	ldr	r3, [pc, #180]	; (8008900 <tcp_input+0x2b8>)
 800884c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	891a      	ldrh	r2, [r3, #8]
 8008852:	4b2b      	ldr	r3, [pc, #172]	; (8008900 <tcp_input+0x2b8>)
 8008854:	881b      	ldrh	r3, [r3, #0]
 8008856:	429a      	cmp	r2, r3
 8008858:	f200 82d9 	bhi.w	8008e0e <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800885c:	2300      	movs	r3, #0
 800885e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008860:	4b28      	ldr	r3, [pc, #160]	; (8008904 <tcp_input+0x2bc>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	61fb      	str	r3, [r7, #28]
 8008866:	e09d      	b.n	80089a4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	7d1b      	ldrb	r3, [r3, #20]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d105      	bne.n	800887c <tcp_input+0x234>
 8008870:	4b15      	ldr	r3, [pc, #84]	; (80088c8 <tcp_input+0x280>)
 8008872:	22fb      	movs	r2, #251	; 0xfb
 8008874:	4924      	ldr	r1, [pc, #144]	; (8008908 <tcp_input+0x2c0>)
 8008876:	4816      	ldr	r0, [pc, #88]	; (80088d0 <tcp_input+0x288>)
 8008878:	f006 ff22 	bl	800f6c0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	7d1b      	ldrb	r3, [r3, #20]
 8008880:	2b0a      	cmp	r3, #10
 8008882:	d105      	bne.n	8008890 <tcp_input+0x248>
 8008884:	4b10      	ldr	r3, [pc, #64]	; (80088c8 <tcp_input+0x280>)
 8008886:	22fc      	movs	r2, #252	; 0xfc
 8008888:	4920      	ldr	r1, [pc, #128]	; (800890c <tcp_input+0x2c4>)
 800888a:	4811      	ldr	r0, [pc, #68]	; (80088d0 <tcp_input+0x288>)
 800888c:	f006 ff18 	bl	800f6c0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	7d1b      	ldrb	r3, [r3, #20]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d105      	bne.n	80088a4 <tcp_input+0x25c>
 8008898:	4b0b      	ldr	r3, [pc, #44]	; (80088c8 <tcp_input+0x280>)
 800889a:	22fd      	movs	r2, #253	; 0xfd
 800889c:	491c      	ldr	r1, [pc, #112]	; (8008910 <tcp_input+0x2c8>)
 800889e:	480c      	ldr	r0, [pc, #48]	; (80088d0 <tcp_input+0x288>)
 80088a0:	f006 ff0e 	bl	800f6c0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	7a1b      	ldrb	r3, [r3, #8]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d033      	beq.n	8008914 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	7a1a      	ldrb	r2, [r3, #8]
 80088b0:	4b09      	ldr	r3, [pc, #36]	; (80088d8 <tcp_input+0x290>)
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80088b8:	3301      	adds	r3, #1
 80088ba:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80088bc:	429a      	cmp	r2, r3
 80088be:	d029      	beq.n	8008914 <tcp_input+0x2cc>
      prev = pcb;
 80088c0:	69fb      	ldr	r3, [r7, #28]
 80088c2:	61bb      	str	r3, [r7, #24]
      continue;
 80088c4:	e06b      	b.n	800899e <tcp_input+0x356>
 80088c6:	bf00      	nop
 80088c8:	08011db0 	.word	0x08011db0
 80088cc:	08011de4 	.word	0x08011de4
 80088d0:	08011dfc 	.word	0x08011dfc
 80088d4:	200000e4 	.word	0x200000e4
 80088d8:	200033f4 	.word	0x200033f4
 80088dc:	200000e8 	.word	0x200000e8
 80088e0:	200000ec 	.word	0x200000ec
 80088e4:	200000ea 	.word	0x200000ea
 80088e8:	08011e24 	.word	0x08011e24
 80088ec:	08011e34 	.word	0x08011e34
 80088f0:	08011e40 	.word	0x08011e40
 80088f4:	200000f4 	.word	0x200000f4
 80088f8:	200000f8 	.word	0x200000f8
 80088fc:	20000100 	.word	0x20000100
 8008900:	200000fe 	.word	0x200000fe
 8008904:	20006938 	.word	0x20006938
 8008908:	08011e60 	.word	0x08011e60
 800890c:	08011e88 	.word	0x08011e88
 8008910:	08011eb4 	.word	0x08011eb4
    }

    if (pcb->remote_port == tcphdr->src &&
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	8b1a      	ldrh	r2, [r3, #24]
 8008918:	4b94      	ldr	r3, [pc, #592]	; (8008b6c <tcp_input+0x524>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	881b      	ldrh	r3, [r3, #0]
 800891e:	b29b      	uxth	r3, r3
 8008920:	429a      	cmp	r2, r3
 8008922:	d13a      	bne.n	800899a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	8ada      	ldrh	r2, [r3, #22]
 8008928:	4b90      	ldr	r3, [pc, #576]	; (8008b6c <tcp_input+0x524>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	885b      	ldrh	r3, [r3, #2]
 800892e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008930:	429a      	cmp	r2, r3
 8008932:	d132      	bne.n	800899a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	685a      	ldr	r2, [r3, #4]
 8008938:	4b8d      	ldr	r3, [pc, #564]	; (8008b70 <tcp_input+0x528>)
 800893a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800893c:	429a      	cmp	r2, r3
 800893e:	d12c      	bne.n	800899a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	4b8a      	ldr	r3, [pc, #552]	; (8008b70 <tcp_input+0x528>)
 8008946:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008948:	429a      	cmp	r2, r3
 800894a:	d126      	bne.n	800899a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800894c:	69fb      	ldr	r3, [r7, #28]
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	69fa      	ldr	r2, [r7, #28]
 8008952:	429a      	cmp	r2, r3
 8008954:	d106      	bne.n	8008964 <tcp_input+0x31c>
 8008956:	4b87      	ldr	r3, [pc, #540]	; (8008b74 <tcp_input+0x52c>)
 8008958:	f240 120d 	movw	r2, #269	; 0x10d
 800895c:	4986      	ldr	r1, [pc, #536]	; (8008b78 <tcp_input+0x530>)
 800895e:	4887      	ldr	r0, [pc, #540]	; (8008b7c <tcp_input+0x534>)
 8008960:	f006 feae 	bl	800f6c0 <iprintf>
      if (prev != NULL) {
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d00a      	beq.n	8008980 <tcp_input+0x338>
        prev->next = pcb->next;
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	68da      	ldr	r2, [r3, #12]
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008972:	4b83      	ldr	r3, [pc, #524]	; (8008b80 <tcp_input+0x538>)
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800897a:	4a81      	ldr	r2, [pc, #516]	; (8008b80 <tcp_input+0x538>)
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	69fa      	ldr	r2, [r7, #28]
 8008986:	429a      	cmp	r2, r3
 8008988:	d111      	bne.n	80089ae <tcp_input+0x366>
 800898a:	4b7a      	ldr	r3, [pc, #488]	; (8008b74 <tcp_input+0x52c>)
 800898c:	f240 1215 	movw	r2, #277	; 0x115
 8008990:	497c      	ldr	r1, [pc, #496]	; (8008b84 <tcp_input+0x53c>)
 8008992:	487a      	ldr	r0, [pc, #488]	; (8008b7c <tcp_input+0x534>)
 8008994:	f006 fe94 	bl	800f6c0 <iprintf>
      break;
 8008998:	e009      	b.n	80089ae <tcp_input+0x366>
    }
    prev = pcb;
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	68db      	ldr	r3, [r3, #12]
 80089a2:	61fb      	str	r3, [r7, #28]
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f47f af5e 	bne.w	8008868 <tcp_input+0x220>
 80089ac:	e000      	b.n	80089b0 <tcp_input+0x368>
      break;
 80089ae:	bf00      	nop
  }

  if (pcb == NULL) {
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	f040 8095 	bne.w	8008ae2 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80089b8:	4b73      	ldr	r3, [pc, #460]	; (8008b88 <tcp_input+0x540>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	61fb      	str	r3, [r7, #28]
 80089be:	e03f      	b.n	8008a40 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	7d1b      	ldrb	r3, [r3, #20]
 80089c4:	2b0a      	cmp	r3, #10
 80089c6:	d006      	beq.n	80089d6 <tcp_input+0x38e>
 80089c8:	4b6a      	ldr	r3, [pc, #424]	; (8008b74 <tcp_input+0x52c>)
 80089ca:	f240 121f 	movw	r2, #287	; 0x11f
 80089ce:	496f      	ldr	r1, [pc, #444]	; (8008b8c <tcp_input+0x544>)
 80089d0:	486a      	ldr	r0, [pc, #424]	; (8008b7c <tcp_input+0x534>)
 80089d2:	f006 fe75 	bl	800f6c0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	7a1b      	ldrb	r3, [r3, #8]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d009      	beq.n	80089f2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	7a1a      	ldrb	r2, [r3, #8]
 80089e2:	4b63      	ldr	r3, [pc, #396]	; (8008b70 <tcp_input+0x528>)
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80089ea:	3301      	adds	r3, #1
 80089ec:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d122      	bne.n	8008a38 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	8b1a      	ldrh	r2, [r3, #24]
 80089f6:	4b5d      	ldr	r3, [pc, #372]	; (8008b6c <tcp_input+0x524>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	881b      	ldrh	r3, [r3, #0]
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d11b      	bne.n	8008a3a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	8ada      	ldrh	r2, [r3, #22]
 8008a06:	4b59      	ldr	r3, [pc, #356]	; (8008b6c <tcp_input+0x524>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	885b      	ldrh	r3, [r3, #2]
 8008a0c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d113      	bne.n	8008a3a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	685a      	ldr	r2, [r3, #4]
 8008a16:	4b56      	ldr	r3, [pc, #344]	; (8008b70 <tcp_input+0x528>)
 8008a18:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d10d      	bne.n	8008a3a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	4b53      	ldr	r3, [pc, #332]	; (8008b70 <tcp_input+0x528>)
 8008a24:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d107      	bne.n	8008a3a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008a2a:	69f8      	ldr	r0, [r7, #28]
 8008a2c:	f000 fb54 	bl	80090d8 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f7fd fc9f 	bl	8006374 <pbuf_free>
        return;
 8008a36:	e1f0      	b.n	8008e1a <tcp_input+0x7d2>
        continue;
 8008a38:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	61fb      	str	r3, [r7, #28]
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1bc      	bne.n	80089c0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008a46:	2300      	movs	r3, #0
 8008a48:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008a4a:	4b51      	ldr	r3, [pc, #324]	; (8008b90 <tcp_input+0x548>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	617b      	str	r3, [r7, #20]
 8008a50:	e02a      	b.n	8008aa8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	7a1b      	ldrb	r3, [r3, #8]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00c      	beq.n	8008a74 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	7a1a      	ldrb	r2, [r3, #8]
 8008a5e:	4b44      	ldr	r3, [pc, #272]	; (8008b70 <tcp_input+0x528>)
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008a66:	3301      	adds	r3, #1
 8008a68:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d002      	beq.n	8008a74 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	61bb      	str	r3, [r7, #24]
        continue;
 8008a72:	e016      	b.n	8008aa2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	8ada      	ldrh	r2, [r3, #22]
 8008a78:	4b3c      	ldr	r3, [pc, #240]	; (8008b6c <tcp_input+0x524>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	885b      	ldrh	r3, [r3, #2]
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d10c      	bne.n	8008a9e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	4b39      	ldr	r3, [pc, #228]	; (8008b70 <tcp_input+0x528>)
 8008a8a:	695b      	ldr	r3, [r3, #20]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d00f      	beq.n	8008ab0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00d      	beq.n	8008ab2 <tcp_input+0x46a>
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d009      	beq.n	8008ab2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	617b      	str	r3, [r7, #20]
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1d1      	bne.n	8008a52 <tcp_input+0x40a>
 8008aae:	e000      	b.n	8008ab2 <tcp_input+0x46a>
            break;
 8008ab0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d014      	beq.n	8008ae2 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00a      	beq.n	8008ad4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	68da      	ldr	r2, [r3, #12]
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008ac6:	4b32      	ldr	r3, [pc, #200]	; (8008b90 <tcp_input+0x548>)
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008ace:	4a30      	ldr	r2, [pc, #192]	; (8008b90 <tcp_input+0x548>)
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008ad4:	6978      	ldr	r0, [r7, #20]
 8008ad6:	f000 fa01 	bl	8008edc <tcp_listen_input>
      }
      pbuf_free(p);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f7fd fc4a 	bl	8006374 <pbuf_free>
      return;
 8008ae0:	e19b      	b.n	8008e1a <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f000 8160 	beq.w	8008daa <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008aea:	4b2a      	ldr	r3, [pc, #168]	; (8008b94 <tcp_input+0x54c>)
 8008aec:	2200      	movs	r2, #0
 8008aee:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	891a      	ldrh	r2, [r3, #8]
 8008af4:	4b27      	ldr	r3, [pc, #156]	; (8008b94 <tcp_input+0x54c>)
 8008af6:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008af8:	4a26      	ldr	r2, [pc, #152]	; (8008b94 <tcp_input+0x54c>)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008afe:	4b1b      	ldr	r3, [pc, #108]	; (8008b6c <tcp_input+0x524>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a24      	ldr	r2, [pc, #144]	; (8008b94 <tcp_input+0x54c>)
 8008b04:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008b06:	4b24      	ldr	r3, [pc, #144]	; (8008b98 <tcp_input+0x550>)
 8008b08:	2200      	movs	r2, #0
 8008b0a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008b0c:	4b23      	ldr	r3, [pc, #140]	; (8008b9c <tcp_input+0x554>)
 8008b0e:	2200      	movs	r2, #0
 8008b10:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008b12:	4b23      	ldr	r3, [pc, #140]	; (8008ba0 <tcp_input+0x558>)
 8008b14:	2200      	movs	r2, #0
 8008b16:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008b18:	4b22      	ldr	r3, [pc, #136]	; (8008ba4 <tcp_input+0x55c>)
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	f003 0308 	and.w	r3, r3, #8
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d006      	beq.n	8008b32 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	7b5b      	ldrb	r3, [r3, #13]
 8008b28:	f043 0301 	orr.w	r3, r3, #1
 8008b2c:	b2da      	uxtb	r2, r3
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d038      	beq.n	8008bac <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008b3a:	69f8      	ldr	r0, [r7, #28]
 8008b3c:	f7ff f858 	bl	8007bf0 <tcp_process_refused_data>
 8008b40:	4603      	mov	r3, r0
 8008b42:	f113 0f0d 	cmn.w	r3, #13
 8008b46:	d007      	beq.n	8008b58 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d02d      	beq.n	8008bac <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008b50:	4b15      	ldr	r3, [pc, #84]	; (8008ba8 <tcp_input+0x560>)
 8008b52:	881b      	ldrh	r3, [r3, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d029      	beq.n	8008bac <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f040 8104 	bne.w	8008d6a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008b62:	69f8      	ldr	r0, [r7, #28]
 8008b64:	f003 fe16 	bl	800c794 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008b68:	e0ff      	b.n	8008d6a <tcp_input+0x722>
 8008b6a:	bf00      	nop
 8008b6c:	200000e4 	.word	0x200000e4
 8008b70:	200033f4 	.word	0x200033f4
 8008b74:	08011db0 	.word	0x08011db0
 8008b78:	08011edc 	.word	0x08011edc
 8008b7c:	08011dfc 	.word	0x08011dfc
 8008b80:	20006938 	.word	0x20006938
 8008b84:	08011f08 	.word	0x08011f08
 8008b88:	20006948 	.word	0x20006948
 8008b8c:	08011f34 	.word	0x08011f34
 8008b90:	20006940 	.word	0x20006940
 8008b94:	200000d4 	.word	0x200000d4
 8008b98:	20000104 	.word	0x20000104
 8008b9c:	20000101 	.word	0x20000101
 8008ba0:	200000fc 	.word	0x200000fc
 8008ba4:	20000100 	.word	0x20000100
 8008ba8:	200000fe 	.word	0x200000fe
      }
    }
    tcp_input_pcb = pcb;
 8008bac:	4a9c      	ldr	r2, [pc, #624]	; (8008e20 <tcp_input+0x7d8>)
 8008bae:	69fb      	ldr	r3, [r7, #28]
 8008bb0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8008bb2:	69f8      	ldr	r0, [r7, #28]
 8008bb4:	f000 fb0a 	bl	80091cc <tcp_process>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008bbc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008bc0:	f113 0f0d 	cmn.w	r3, #13
 8008bc4:	f000 80d3 	beq.w	8008d6e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8008bc8:	4b96      	ldr	r3, [pc, #600]	; (8008e24 <tcp_input+0x7dc>)
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	f003 0308 	and.w	r3, r3, #8
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d015      	beq.n	8008c00 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d008      	beq.n	8008bf0 <tcp_input+0x5a8>
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008be4:	69fa      	ldr	r2, [r7, #28]
 8008be6:	6912      	ldr	r2, [r2, #16]
 8008be8:	f06f 010d 	mvn.w	r1, #13
 8008bec:	4610      	mov	r0, r2
 8008bee:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008bf0:	69f9      	ldr	r1, [r7, #28]
 8008bf2:	488d      	ldr	r0, [pc, #564]	; (8008e28 <tcp_input+0x7e0>)
 8008bf4:	f7ff fbb0 	bl	8008358 <tcp_pcb_remove>
        tcp_free(pcb);
 8008bf8:	69f8      	ldr	r0, [r7, #28]
 8008bfa:	f7fd fefd 	bl	80069f8 <tcp_free>
 8008bfe:	e0c1      	b.n	8008d84 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8008c00:	2300      	movs	r3, #0
 8008c02:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008c04:	4b89      	ldr	r3, [pc, #548]	; (8008e2c <tcp_input+0x7e4>)
 8008c06:	881b      	ldrh	r3, [r3, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d01d      	beq.n	8008c48 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008c0c:	4b87      	ldr	r3, [pc, #540]	; (8008e2c <tcp_input+0x7e4>)
 8008c0e:	881b      	ldrh	r3, [r3, #0]
 8008c10:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d00a      	beq.n	8008c32 <tcp_input+0x5ea>
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c22:	69fa      	ldr	r2, [r7, #28]
 8008c24:	6910      	ldr	r0, [r2, #16]
 8008c26:	89fa      	ldrh	r2, [r7, #14]
 8008c28:	69f9      	ldr	r1, [r7, #28]
 8008c2a:	4798      	blx	r3
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	74fb      	strb	r3, [r7, #19]
 8008c30:	e001      	b.n	8008c36 <tcp_input+0x5ee>
 8008c32:	2300      	movs	r3, #0
 8008c34:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008c36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008c3a:	f113 0f0d 	cmn.w	r3, #13
 8008c3e:	f000 8098 	beq.w	8008d72 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008c42:	4b7a      	ldr	r3, [pc, #488]	; (8008e2c <tcp_input+0x7e4>)
 8008c44:	2200      	movs	r2, #0
 8008c46:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008c48:	69f8      	ldr	r0, [r7, #28]
 8008c4a:	f000 f907 	bl	8008e5c <tcp_input_delayed_close>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f040 8090 	bne.w	8008d76 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008c56:	4b76      	ldr	r3, [pc, #472]	; (8008e30 <tcp_input+0x7e8>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d041      	beq.n	8008ce2 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d006      	beq.n	8008c74 <tcp_input+0x62c>
 8008c66:	4b73      	ldr	r3, [pc, #460]	; (8008e34 <tcp_input+0x7ec>)
 8008c68:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008c6c:	4972      	ldr	r1, [pc, #456]	; (8008e38 <tcp_input+0x7f0>)
 8008c6e:	4873      	ldr	r0, [pc, #460]	; (8008e3c <tcp_input+0x7f4>)
 8008c70:	f006 fd26 	bl	800f6c0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	8b5b      	ldrh	r3, [r3, #26]
 8008c78:	f003 0310 	and.w	r3, r3, #16
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d008      	beq.n	8008c92 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008c80:	4b6b      	ldr	r3, [pc, #428]	; (8008e30 <tcp_input+0x7e8>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7fd fb75 	bl	8006374 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008c8a:	69f8      	ldr	r0, [r7, #28]
 8008c8c:	f7fe f99c 	bl	8006fc8 <tcp_abort>
            goto aborted;
 8008c90:	e078      	b.n	8008d84 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00c      	beq.n	8008cb6 <tcp_input+0x66e>
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	6918      	ldr	r0, [r3, #16]
 8008ca6:	4b62      	ldr	r3, [pc, #392]	; (8008e30 <tcp_input+0x7e8>)
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	2300      	movs	r3, #0
 8008cac:	69f9      	ldr	r1, [r7, #28]
 8008cae:	47a0      	blx	r4
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	74fb      	strb	r3, [r7, #19]
 8008cb4:	e008      	b.n	8008cc8 <tcp_input+0x680>
 8008cb6:	4b5e      	ldr	r3, [pc, #376]	; (8008e30 <tcp_input+0x7e8>)
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	2300      	movs	r3, #0
 8008cbc:	69f9      	ldr	r1, [r7, #28]
 8008cbe:	2000      	movs	r0, #0
 8008cc0:	f7ff f88a 	bl	8007dd8 <tcp_recv_null>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008cc8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008ccc:	f113 0f0d 	cmn.w	r3, #13
 8008cd0:	d053      	beq.n	8008d7a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8008cd2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d003      	beq.n	8008ce2 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8008cda:	4b55      	ldr	r3, [pc, #340]	; (8008e30 <tcp_input+0x7e8>)
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	69fb      	ldr	r3, [r7, #28]
 8008ce0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008ce2:	4b50      	ldr	r3, [pc, #320]	; (8008e24 <tcp_input+0x7dc>)
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	f003 0320 	and.w	r3, r3, #32
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d030      	beq.n	8008d50 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d009      	beq.n	8008d0a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cfa:	7b5a      	ldrb	r2, [r3, #13]
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d00:	f042 0220 	orr.w	r2, r2, #32
 8008d04:	b2d2      	uxtb	r2, r2
 8008d06:	735a      	strb	r2, [r3, #13]
 8008d08:	e022      	b.n	8008d50 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d0e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008d12:	d005      	beq.n	8008d20 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d18:	3301      	adds	r3, #1
 8008d1a:	b29a      	uxth	r2, r3
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00b      	beq.n	8008d42 <tcp_input+0x6fa>
 8008d2a:	69fb      	ldr	r3, [r7, #28]
 8008d2c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	6918      	ldr	r0, [r3, #16]
 8008d34:	2300      	movs	r3, #0
 8008d36:	2200      	movs	r2, #0
 8008d38:	69f9      	ldr	r1, [r7, #28]
 8008d3a:	47a0      	blx	r4
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	74fb      	strb	r3, [r7, #19]
 8008d40:	e001      	b.n	8008d46 <tcp_input+0x6fe>
 8008d42:	2300      	movs	r3, #0
 8008d44:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008d46:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008d4a:	f113 0f0d 	cmn.w	r3, #13
 8008d4e:	d016      	beq.n	8008d7e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008d50:	4b33      	ldr	r3, [pc, #204]	; (8008e20 <tcp_input+0x7d8>)
 8008d52:	2200      	movs	r2, #0
 8008d54:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008d56:	69f8      	ldr	r0, [r7, #28]
 8008d58:	f000 f880 	bl	8008e5c <tcp_input_delayed_close>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d10f      	bne.n	8008d82 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008d62:	69f8      	ldr	r0, [r7, #28]
 8008d64:	f002 ff10 	bl	800bb88 <tcp_output>
 8008d68:	e00c      	b.n	8008d84 <tcp_input+0x73c>
        goto aborted;
 8008d6a:	bf00      	nop
 8008d6c:	e00a      	b.n	8008d84 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008d6e:	bf00      	nop
 8008d70:	e008      	b.n	8008d84 <tcp_input+0x73c>
              goto aborted;
 8008d72:	bf00      	nop
 8008d74:	e006      	b.n	8008d84 <tcp_input+0x73c>
          goto aborted;
 8008d76:	bf00      	nop
 8008d78:	e004      	b.n	8008d84 <tcp_input+0x73c>
            goto aborted;
 8008d7a:	bf00      	nop
 8008d7c:	e002      	b.n	8008d84 <tcp_input+0x73c>
              goto aborted;
 8008d7e:	bf00      	nop
 8008d80:	e000      	b.n	8008d84 <tcp_input+0x73c>
          goto aborted;
 8008d82:	bf00      	nop
    tcp_input_pcb = NULL;
 8008d84:	4b26      	ldr	r3, [pc, #152]	; (8008e20 <tcp_input+0x7d8>)
 8008d86:	2200      	movs	r2, #0
 8008d88:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008d8a:	4b29      	ldr	r3, [pc, #164]	; (8008e30 <tcp_input+0x7e8>)
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8008d90:	4b2b      	ldr	r3, [pc, #172]	; (8008e40 <tcp_input+0x7f8>)
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d03f      	beq.n	8008e18 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8008d98:	4b29      	ldr	r3, [pc, #164]	; (8008e40 <tcp_input+0x7f8>)
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7fd fae9 	bl	8006374 <pbuf_free>
      inseg.p = NULL;
 8008da2:	4b27      	ldr	r3, [pc, #156]	; (8008e40 <tcp_input+0x7f8>)
 8008da4:	2200      	movs	r2, #0
 8008da6:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008da8:	e036      	b.n	8008e18 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008daa:	4b26      	ldr	r3, [pc, #152]	; (8008e44 <tcp_input+0x7fc>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	899b      	ldrh	r3, [r3, #12]
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7fc f82a 	bl	8004e0c <lwip_htons>
 8008db8:	4603      	mov	r3, r0
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	f003 0304 	and.w	r3, r3, #4
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d118      	bne.n	8008df6 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008dc4:	4b20      	ldr	r3, [pc, #128]	; (8008e48 <tcp_input+0x800>)
 8008dc6:	6819      	ldr	r1, [r3, #0]
 8008dc8:	4b20      	ldr	r3, [pc, #128]	; (8008e4c <tcp_input+0x804>)
 8008dca:	881b      	ldrh	r3, [r3, #0]
 8008dcc:	461a      	mov	r2, r3
 8008dce:	4b20      	ldr	r3, [pc, #128]	; (8008e50 <tcp_input+0x808>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008dd4:	4b1b      	ldr	r3, [pc, #108]	; (8008e44 <tcp_input+0x7fc>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008dd8:	885b      	ldrh	r3, [r3, #2]
 8008dda:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008ddc:	4a19      	ldr	r2, [pc, #100]	; (8008e44 <tcp_input+0x7fc>)
 8008dde:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008de0:	8812      	ldrh	r2, [r2, #0]
 8008de2:	b292      	uxth	r2, r2
 8008de4:	9202      	str	r2, [sp, #8]
 8008de6:	9301      	str	r3, [sp, #4]
 8008de8:	4b1a      	ldr	r3, [pc, #104]	; (8008e54 <tcp_input+0x80c>)
 8008dea:	9300      	str	r3, [sp, #0]
 8008dec:	4b1a      	ldr	r3, [pc, #104]	; (8008e58 <tcp_input+0x810>)
 8008dee:	4602      	mov	r2, r0
 8008df0:	2000      	movs	r0, #0
 8008df2:	f003 fc7d 	bl	800c6f0 <tcp_rst>
    pbuf_free(p);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f7fd fabc 	bl	8006374 <pbuf_free>
  return;
 8008dfc:	e00c      	b.n	8008e18 <tcp_input+0x7d0>
    goto dropped;
 8008dfe:	bf00      	nop
 8008e00:	e006      	b.n	8008e10 <tcp_input+0x7c8>
    goto dropped;
 8008e02:	bf00      	nop
 8008e04:	e004      	b.n	8008e10 <tcp_input+0x7c8>
    goto dropped;
 8008e06:	bf00      	nop
 8008e08:	e002      	b.n	8008e10 <tcp_input+0x7c8>
      goto dropped;
 8008e0a:	bf00      	nop
 8008e0c:	e000      	b.n	8008e10 <tcp_input+0x7c8>
      goto dropped;
 8008e0e:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f7fd faaf 	bl	8006374 <pbuf_free>
 8008e16:	e000      	b.n	8008e1a <tcp_input+0x7d2>
  return;
 8008e18:	bf00      	nop
}
 8008e1a:	3724      	adds	r7, #36	; 0x24
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd90      	pop	{r4, r7, pc}
 8008e20:	2000694c 	.word	0x2000694c
 8008e24:	20000101 	.word	0x20000101
 8008e28:	20006938 	.word	0x20006938
 8008e2c:	200000fc 	.word	0x200000fc
 8008e30:	20000104 	.word	0x20000104
 8008e34:	08011db0 	.word	0x08011db0
 8008e38:	08011f64 	.word	0x08011f64
 8008e3c:	08011dfc 	.word	0x08011dfc
 8008e40:	200000d4 	.word	0x200000d4
 8008e44:	200000e4 	.word	0x200000e4
 8008e48:	200000f8 	.word	0x200000f8
 8008e4c:	200000fe 	.word	0x200000fe
 8008e50:	200000f4 	.word	0x200000f4
 8008e54:	20003404 	.word	0x20003404
 8008e58:	20003408 	.word	0x20003408

08008e5c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d106      	bne.n	8008e78 <tcp_input_delayed_close+0x1c>
 8008e6a:	4b17      	ldr	r3, [pc, #92]	; (8008ec8 <tcp_input_delayed_close+0x6c>)
 8008e6c:	f240 225a 	movw	r2, #602	; 0x25a
 8008e70:	4916      	ldr	r1, [pc, #88]	; (8008ecc <tcp_input_delayed_close+0x70>)
 8008e72:	4817      	ldr	r0, [pc, #92]	; (8008ed0 <tcp_input_delayed_close+0x74>)
 8008e74:	f006 fc24 	bl	800f6c0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008e78:	4b16      	ldr	r3, [pc, #88]	; (8008ed4 <tcp_input_delayed_close+0x78>)
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	f003 0310 	and.w	r3, r3, #16
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d01c      	beq.n	8008ebe <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	8b5b      	ldrh	r3, [r3, #26]
 8008e88:	f003 0310 	and.w	r3, r3, #16
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d10d      	bne.n	8008eac <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d008      	beq.n	8008eac <tcp_input_delayed_close+0x50>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	6912      	ldr	r2, [r2, #16]
 8008ea4:	f06f 010e 	mvn.w	r1, #14
 8008ea8:	4610      	mov	r0, r2
 8008eaa:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008eac:	6879      	ldr	r1, [r7, #4]
 8008eae:	480a      	ldr	r0, [pc, #40]	; (8008ed8 <tcp_input_delayed_close+0x7c>)
 8008eb0:	f7ff fa52 	bl	8008358 <tcp_pcb_remove>
    tcp_free(pcb);
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f7fd fd9f 	bl	80069f8 <tcp_free>
    return 1;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e000      	b.n	8008ec0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3708      	adds	r7, #8
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	08011db0 	.word	0x08011db0
 8008ecc:	08011f80 	.word	0x08011f80
 8008ed0:	08011dfc 	.word	0x08011dfc
 8008ed4:	20000101 	.word	0x20000101
 8008ed8:	20006938 	.word	0x20006938

08008edc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008edc:	b590      	push	{r4, r7, lr}
 8008ede:	b08b      	sub	sp, #44	; 0x2c
 8008ee0:	af04      	add	r7, sp, #16
 8008ee2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008ee4:	4b6f      	ldr	r3, [pc, #444]	; (80090a4 <tcp_listen_input+0x1c8>)
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	f003 0304 	and.w	r3, r3, #4
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f040 80d2 	bne.w	8009096 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d106      	bne.n	8008f06 <tcp_listen_input+0x2a>
 8008ef8:	4b6b      	ldr	r3, [pc, #428]	; (80090a8 <tcp_listen_input+0x1cc>)
 8008efa:	f240 2281 	movw	r2, #641	; 0x281
 8008efe:	496b      	ldr	r1, [pc, #428]	; (80090ac <tcp_listen_input+0x1d0>)
 8008f00:	486b      	ldr	r0, [pc, #428]	; (80090b0 <tcp_listen_input+0x1d4>)
 8008f02:	f006 fbdd 	bl	800f6c0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008f06:	4b67      	ldr	r3, [pc, #412]	; (80090a4 <tcp_listen_input+0x1c8>)
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	f003 0310 	and.w	r3, r3, #16
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d019      	beq.n	8008f46 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f12:	4b68      	ldr	r3, [pc, #416]	; (80090b4 <tcp_listen_input+0x1d8>)
 8008f14:	6819      	ldr	r1, [r3, #0]
 8008f16:	4b68      	ldr	r3, [pc, #416]	; (80090b8 <tcp_listen_input+0x1dc>)
 8008f18:	881b      	ldrh	r3, [r3, #0]
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	4b67      	ldr	r3, [pc, #412]	; (80090bc <tcp_listen_input+0x1e0>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008f22:	4b67      	ldr	r3, [pc, #412]	; (80090c0 <tcp_listen_input+0x1e4>)
 8008f24:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f26:	885b      	ldrh	r3, [r3, #2]
 8008f28:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008f2a:	4a65      	ldr	r2, [pc, #404]	; (80090c0 <tcp_listen_input+0x1e4>)
 8008f2c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f2e:	8812      	ldrh	r2, [r2, #0]
 8008f30:	b292      	uxth	r2, r2
 8008f32:	9202      	str	r2, [sp, #8]
 8008f34:	9301      	str	r3, [sp, #4]
 8008f36:	4b63      	ldr	r3, [pc, #396]	; (80090c4 <tcp_listen_input+0x1e8>)
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	4b63      	ldr	r3, [pc, #396]	; (80090c8 <tcp_listen_input+0x1ec>)
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f003 fbd6 	bl	800c6f0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008f44:	e0a9      	b.n	800909a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8008f46:	4b57      	ldr	r3, [pc, #348]	; (80090a4 <tcp_listen_input+0x1c8>)
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	f003 0302 	and.w	r3, r3, #2
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	f000 80a3 	beq.w	800909a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	7d5b      	ldrb	r3, [r3, #21]
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7ff f861 	bl	8008020 <tcp_alloc>
 8008f5e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d111      	bne.n	8008f8a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	699b      	ldr	r3, [r3, #24]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00a      	beq.n	8008f84 <tcp_listen_input+0xa8>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	699b      	ldr	r3, [r3, #24]
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	6910      	ldr	r0, [r2, #16]
 8008f76:	f04f 32ff 	mov.w	r2, #4294967295
 8008f7a:	2100      	movs	r1, #0
 8008f7c:	4798      	blx	r3
 8008f7e:	4603      	mov	r3, r0
 8008f80:	73bb      	strb	r3, [r7, #14]
      return;
 8008f82:	e08b      	b.n	800909c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008f84:	23f0      	movs	r3, #240	; 0xf0
 8008f86:	73bb      	strb	r3, [r7, #14]
      return;
 8008f88:	e088      	b.n	800909c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008f8a:	4b50      	ldr	r3, [pc, #320]	; (80090cc <tcp_listen_input+0x1f0>)
 8008f8c:	695a      	ldr	r2, [r3, #20]
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008f92:	4b4e      	ldr	r3, [pc, #312]	; (80090cc <tcp_listen_input+0x1f0>)
 8008f94:	691a      	ldr	r2, [r3, #16]
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	8ada      	ldrh	r2, [r3, #22]
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008fa2:	4b47      	ldr	r3, [pc, #284]	; (80090c0 <tcp_listen_input+0x1e4>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	881b      	ldrh	r3, [r3, #0]
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	2203      	movs	r2, #3
 8008fb2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008fb4:	4b41      	ldr	r3, [pc, #260]	; (80090bc <tcp_listen_input+0x1e0>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	1c5a      	adds	r2, r3, #1
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008fc6:	6978      	ldr	r0, [r7, #20]
 8008fc8:	f7ff fa5a 	bl	8008480 <tcp_next_iss>
 8008fcc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	693a      	ldr	r2, [r7, #16]
 8008fd2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	693a      	ldr	r2, [r7, #16]
 8008fde:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	693a      	ldr	r2, [r7, #16]
 8008fe4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008fe6:	4b35      	ldr	r3, [pc, #212]	; (80090bc <tcp_listen_input+0x1e0>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	1e5a      	subs	r2, r3, #1
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	691a      	ldr	r2, [r3, #16]
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	7a5b      	ldrb	r3, [r3, #9]
 8009002:	f003 030c 	and.w	r3, r3, #12
 8009006:	b2da      	uxtb	r2, r3
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	7a1a      	ldrb	r2, [r3, #8]
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009014:	4b2e      	ldr	r3, [pc, #184]	; (80090d0 <tcp_listen_input+0x1f4>)
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	60da      	str	r2, [r3, #12]
 800901c:	4a2c      	ldr	r2, [pc, #176]	; (80090d0 <tcp_listen_input+0x1f4>)
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	6013      	str	r3, [r2, #0]
 8009022:	f003 fd27 	bl	800ca74 <tcp_timer_needed>
 8009026:	4b2b      	ldr	r3, [pc, #172]	; (80090d4 <tcp_listen_input+0x1f8>)
 8009028:	2201      	movs	r2, #1
 800902a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800902c:	6978      	ldr	r0, [r7, #20]
 800902e:	f001 fd8d 	bl	800ab4c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8009032:	4b23      	ldr	r3, [pc, #140]	; (80090c0 <tcp_listen_input+0x1e4>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	89db      	ldrh	r3, [r3, #14]
 8009038:	b29a      	uxth	r2, r3
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	3304      	adds	r3, #4
 8009054:	4618      	mov	r0, r3
 8009056:	f005 f8eb 	bl	800e230 <ip4_route>
 800905a:	4601      	mov	r1, r0
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	3304      	adds	r3, #4
 8009060:	461a      	mov	r2, r3
 8009062:	4620      	mov	r0, r4
 8009064:	f7ff fa32 	bl	80084cc <tcp_eff_send_mss_netif>
 8009068:	4603      	mov	r3, r0
 800906a:	461a      	mov	r2, r3
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009070:	2112      	movs	r1, #18
 8009072:	6978      	ldr	r0, [r7, #20]
 8009074:	f002 fc9a 	bl	800b9ac <tcp_enqueue_flags>
 8009078:	4603      	mov	r3, r0
 800907a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800907c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d004      	beq.n	800908e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8009084:	2100      	movs	r1, #0
 8009086:	6978      	ldr	r0, [r7, #20]
 8009088:	f7fd fee0 	bl	8006e4c <tcp_abandon>
      return;
 800908c:	e006      	b.n	800909c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800908e:	6978      	ldr	r0, [r7, #20]
 8009090:	f002 fd7a 	bl	800bb88 <tcp_output>
  return;
 8009094:	e001      	b.n	800909a <tcp_listen_input+0x1be>
    return;
 8009096:	bf00      	nop
 8009098:	e000      	b.n	800909c <tcp_listen_input+0x1c0>
  return;
 800909a:	bf00      	nop
}
 800909c:	371c      	adds	r7, #28
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd90      	pop	{r4, r7, pc}
 80090a2:	bf00      	nop
 80090a4:	20000100 	.word	0x20000100
 80090a8:	08011db0 	.word	0x08011db0
 80090ac:	08011fa8 	.word	0x08011fa8
 80090b0:	08011dfc 	.word	0x08011dfc
 80090b4:	200000f8 	.word	0x200000f8
 80090b8:	200000fe 	.word	0x200000fe
 80090bc:	200000f4 	.word	0x200000f4
 80090c0:	200000e4 	.word	0x200000e4
 80090c4:	20003404 	.word	0x20003404
 80090c8:	20003408 	.word	0x20003408
 80090cc:	200033f4 	.word	0x200033f4
 80090d0:	20006938 	.word	0x20006938
 80090d4:	20006934 	.word	0x20006934

080090d8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b086      	sub	sp, #24
 80090dc:	af04      	add	r7, sp, #16
 80090de:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80090e0:	4b2f      	ldr	r3, [pc, #188]	; (80091a0 <tcp_timewait_input+0xc8>)
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	f003 0304 	and.w	r3, r3, #4
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d153      	bne.n	8009194 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d106      	bne.n	8009100 <tcp_timewait_input+0x28>
 80090f2:	4b2c      	ldr	r3, [pc, #176]	; (80091a4 <tcp_timewait_input+0xcc>)
 80090f4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80090f8:	492b      	ldr	r1, [pc, #172]	; (80091a8 <tcp_timewait_input+0xd0>)
 80090fa:	482c      	ldr	r0, [pc, #176]	; (80091ac <tcp_timewait_input+0xd4>)
 80090fc:	f006 fae0 	bl	800f6c0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009100:	4b27      	ldr	r3, [pc, #156]	; (80091a0 <tcp_timewait_input+0xc8>)
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	f003 0302 	and.w	r3, r3, #2
 8009108:	2b00      	cmp	r3, #0
 800910a:	d02a      	beq.n	8009162 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800910c:	4b28      	ldr	r3, [pc, #160]	; (80091b0 <tcp_timewait_input+0xd8>)
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009114:	1ad3      	subs	r3, r2, r3
 8009116:	2b00      	cmp	r3, #0
 8009118:	db2d      	blt.n	8009176 <tcp_timewait_input+0x9e>
 800911a:	4b25      	ldr	r3, [pc, #148]	; (80091b0 <tcp_timewait_input+0xd8>)
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009122:	6879      	ldr	r1, [r7, #4]
 8009124:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009126:	440b      	add	r3, r1
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	2b00      	cmp	r3, #0
 800912c:	dc23      	bgt.n	8009176 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800912e:	4b21      	ldr	r3, [pc, #132]	; (80091b4 <tcp_timewait_input+0xdc>)
 8009130:	6819      	ldr	r1, [r3, #0]
 8009132:	4b21      	ldr	r3, [pc, #132]	; (80091b8 <tcp_timewait_input+0xe0>)
 8009134:	881b      	ldrh	r3, [r3, #0]
 8009136:	461a      	mov	r2, r3
 8009138:	4b1d      	ldr	r3, [pc, #116]	; (80091b0 <tcp_timewait_input+0xd8>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800913e:	4b1f      	ldr	r3, [pc, #124]	; (80091bc <tcp_timewait_input+0xe4>)
 8009140:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009142:	885b      	ldrh	r3, [r3, #2]
 8009144:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009146:	4a1d      	ldr	r2, [pc, #116]	; (80091bc <tcp_timewait_input+0xe4>)
 8009148:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800914a:	8812      	ldrh	r2, [r2, #0]
 800914c:	b292      	uxth	r2, r2
 800914e:	9202      	str	r2, [sp, #8]
 8009150:	9301      	str	r3, [sp, #4]
 8009152:	4b1b      	ldr	r3, [pc, #108]	; (80091c0 <tcp_timewait_input+0xe8>)
 8009154:	9300      	str	r3, [sp, #0]
 8009156:	4b1b      	ldr	r3, [pc, #108]	; (80091c4 <tcp_timewait_input+0xec>)
 8009158:	4602      	mov	r2, r0
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f003 fac8 	bl	800c6f0 <tcp_rst>
      return;
 8009160:	e01b      	b.n	800919a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8009162:	4b0f      	ldr	r3, [pc, #60]	; (80091a0 <tcp_timewait_input+0xc8>)
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	f003 0301 	and.w	r3, r3, #1
 800916a:	2b00      	cmp	r3, #0
 800916c:	d003      	beq.n	8009176 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800916e:	4b16      	ldr	r3, [pc, #88]	; (80091c8 <tcp_timewait_input+0xf0>)
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8009176:	4b10      	ldr	r3, [pc, #64]	; (80091b8 <tcp_timewait_input+0xe0>)
 8009178:	881b      	ldrh	r3, [r3, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00c      	beq.n	8009198 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	8b5b      	ldrh	r3, [r3, #26]
 8009182:	f043 0302 	orr.w	r3, r3, #2
 8009186:	b29a      	uxth	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f002 fcfb 	bl	800bb88 <tcp_output>
  }
  return;
 8009192:	e001      	b.n	8009198 <tcp_timewait_input+0xc0>
    return;
 8009194:	bf00      	nop
 8009196:	e000      	b.n	800919a <tcp_timewait_input+0xc2>
  return;
 8009198:	bf00      	nop
}
 800919a:	3708      	adds	r7, #8
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	20000100 	.word	0x20000100
 80091a4:	08011db0 	.word	0x08011db0
 80091a8:	08011fc8 	.word	0x08011fc8
 80091ac:	08011dfc 	.word	0x08011dfc
 80091b0:	200000f4 	.word	0x200000f4
 80091b4:	200000f8 	.word	0x200000f8
 80091b8:	200000fe 	.word	0x200000fe
 80091bc:	200000e4 	.word	0x200000e4
 80091c0:	20003404 	.word	0x20003404
 80091c4:	20003408 	.word	0x20003408
 80091c8:	2000693c 	.word	0x2000693c

080091cc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80091cc:	b590      	push	{r4, r7, lr}
 80091ce:	b08d      	sub	sp, #52	; 0x34
 80091d0:	af04      	add	r7, sp, #16
 80091d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80091d4:	2300      	movs	r3, #0
 80091d6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80091d8:	2300      	movs	r3, #0
 80091da:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d106      	bne.n	80091f0 <tcp_process+0x24>
 80091e2:	4ba5      	ldr	r3, [pc, #660]	; (8009478 <tcp_process+0x2ac>)
 80091e4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80091e8:	49a4      	ldr	r1, [pc, #656]	; (800947c <tcp_process+0x2b0>)
 80091ea:	48a5      	ldr	r0, [pc, #660]	; (8009480 <tcp_process+0x2b4>)
 80091ec:	f006 fa68 	bl	800f6c0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80091f0:	4ba4      	ldr	r3, [pc, #656]	; (8009484 <tcp_process+0x2b8>)
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	f003 0304 	and.w	r3, r3, #4
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d04e      	beq.n	800929a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	7d1b      	ldrb	r3, [r3, #20]
 8009200:	2b02      	cmp	r3, #2
 8009202:	d108      	bne.n	8009216 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009208:	4b9f      	ldr	r3, [pc, #636]	; (8009488 <tcp_process+0x2bc>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	429a      	cmp	r2, r3
 800920e:	d123      	bne.n	8009258 <tcp_process+0x8c>
        acceptable = 1;
 8009210:	2301      	movs	r3, #1
 8009212:	76fb      	strb	r3, [r7, #27]
 8009214:	e020      	b.n	8009258 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800921a:	4b9c      	ldr	r3, [pc, #624]	; (800948c <tcp_process+0x2c0>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	429a      	cmp	r2, r3
 8009220:	d102      	bne.n	8009228 <tcp_process+0x5c>
        acceptable = 1;
 8009222:	2301      	movs	r3, #1
 8009224:	76fb      	strb	r3, [r7, #27]
 8009226:	e017      	b.n	8009258 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009228:	4b98      	ldr	r3, [pc, #608]	; (800948c <tcp_process+0x2c0>)
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009230:	1ad3      	subs	r3, r2, r3
 8009232:	2b00      	cmp	r3, #0
 8009234:	db10      	blt.n	8009258 <tcp_process+0x8c>
 8009236:	4b95      	ldr	r3, [pc, #596]	; (800948c <tcp_process+0x2c0>)
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923e:	6879      	ldr	r1, [r7, #4]
 8009240:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009242:	440b      	add	r3, r1
 8009244:	1ad3      	subs	r3, r2, r3
 8009246:	2b00      	cmp	r3, #0
 8009248:	dc06      	bgt.n	8009258 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	8b5b      	ldrh	r3, [r3, #26]
 800924e:	f043 0302 	orr.w	r3, r3, #2
 8009252:	b29a      	uxth	r2, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8009258:	7efb      	ldrb	r3, [r7, #27]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d01b      	beq.n	8009296 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	7d1b      	ldrb	r3, [r3, #20]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d106      	bne.n	8009274 <tcp_process+0xa8>
 8009266:	4b84      	ldr	r3, [pc, #528]	; (8009478 <tcp_process+0x2ac>)
 8009268:	f44f 724e 	mov.w	r2, #824	; 0x338
 800926c:	4988      	ldr	r1, [pc, #544]	; (8009490 <tcp_process+0x2c4>)
 800926e:	4884      	ldr	r0, [pc, #528]	; (8009480 <tcp_process+0x2b4>)
 8009270:	f006 fa26 	bl	800f6c0 <iprintf>
      recv_flags |= TF_RESET;
 8009274:	4b87      	ldr	r3, [pc, #540]	; (8009494 <tcp_process+0x2c8>)
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	f043 0308 	orr.w	r3, r3, #8
 800927c:	b2da      	uxtb	r2, r3
 800927e:	4b85      	ldr	r3, [pc, #532]	; (8009494 <tcp_process+0x2c8>)
 8009280:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	8b5b      	ldrh	r3, [r3, #26]
 8009286:	f023 0301 	bic.w	r3, r3, #1
 800928a:	b29a      	uxth	r2, r3
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8009290:	f06f 030d 	mvn.w	r3, #13
 8009294:	e37a      	b.n	800998c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8009296:	2300      	movs	r3, #0
 8009298:	e378      	b.n	800998c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800929a:	4b7a      	ldr	r3, [pc, #488]	; (8009484 <tcp_process+0x2b8>)
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	f003 0302 	and.w	r3, r3, #2
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d010      	beq.n	80092c8 <tcp_process+0xfc>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	7d1b      	ldrb	r3, [r3, #20]
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d00c      	beq.n	80092c8 <tcp_process+0xfc>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	7d1b      	ldrb	r3, [r3, #20]
 80092b2:	2b03      	cmp	r3, #3
 80092b4:	d008      	beq.n	80092c8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	8b5b      	ldrh	r3, [r3, #26]
 80092ba:	f043 0302 	orr.w	r3, r3, #2
 80092be:	b29a      	uxth	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80092c4:	2300      	movs	r3, #0
 80092c6:	e361      	b.n	800998c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	8b5b      	ldrh	r3, [r3, #26]
 80092cc:	f003 0310 	and.w	r3, r3, #16
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d103      	bne.n	80092dc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80092d4:	4b70      	ldr	r3, [pc, #448]	; (8009498 <tcp_process+0x2cc>)
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f001 fc2d 	bl	800ab4c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	7d1b      	ldrb	r3, [r3, #20]
 80092f6:	3b02      	subs	r3, #2
 80092f8:	2b07      	cmp	r3, #7
 80092fa:	f200 8337 	bhi.w	800996c <tcp_process+0x7a0>
 80092fe:	a201      	add	r2, pc, #4	; (adr r2, 8009304 <tcp_process+0x138>)
 8009300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009304:	08009325 	.word	0x08009325
 8009308:	08009555 	.word	0x08009555
 800930c:	080096cd 	.word	0x080096cd
 8009310:	080096f7 	.word	0x080096f7
 8009314:	0800981b 	.word	0x0800981b
 8009318:	080096cd 	.word	0x080096cd
 800931c:	080098a7 	.word	0x080098a7
 8009320:	08009937 	.word	0x08009937
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009324:	4b57      	ldr	r3, [pc, #348]	; (8009484 <tcp_process+0x2b8>)
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	f003 0310 	and.w	r3, r3, #16
 800932c:	2b00      	cmp	r3, #0
 800932e:	f000 80e4 	beq.w	80094fa <tcp_process+0x32e>
 8009332:	4b54      	ldr	r3, [pc, #336]	; (8009484 <tcp_process+0x2b8>)
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	f003 0302 	and.w	r3, r3, #2
 800933a:	2b00      	cmp	r3, #0
 800933c:	f000 80dd 	beq.w	80094fa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009344:	1c5a      	adds	r2, r3, #1
 8009346:	4b50      	ldr	r3, [pc, #320]	; (8009488 <tcp_process+0x2bc>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	429a      	cmp	r2, r3
 800934c:	f040 80d5 	bne.w	80094fa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8009350:	4b4e      	ldr	r3, [pc, #312]	; (800948c <tcp_process+0x2c0>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	1c5a      	adds	r2, r3, #1
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8009362:	4b49      	ldr	r3, [pc, #292]	; (8009488 <tcp_process+0x2bc>)
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800936a:	4b4c      	ldr	r3, [pc, #304]	; (800949c <tcp_process+0x2d0>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	89db      	ldrh	r3, [r3, #14]
 8009370:	b29a      	uxth	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009384:	4b41      	ldr	r3, [pc, #260]	; (800948c <tcp_process+0x2c0>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	1e5a      	subs	r2, r3, #1
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2204      	movs	r2, #4
 8009392:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	3304      	adds	r3, #4
 800939c:	4618      	mov	r0, r3
 800939e:	f004 ff47 	bl	800e230 <ip4_route>
 80093a2:	4601      	mov	r1, r0
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	3304      	adds	r3, #4
 80093a8:	461a      	mov	r2, r3
 80093aa:	4620      	mov	r0, r4
 80093ac:	f7ff f88e 	bl	80084cc <tcp_eff_send_mss_netif>
 80093b0:	4603      	mov	r3, r0
 80093b2:	461a      	mov	r2, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80093bc:	009a      	lsls	r2, r3, #2
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80093c2:	005b      	lsls	r3, r3, #1
 80093c4:	f241 111c 	movw	r1, #4380	; 0x111c
 80093c8:	428b      	cmp	r3, r1
 80093ca:	bf38      	it	cc
 80093cc:	460b      	movcc	r3, r1
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d204      	bcs.n	80093dc <tcp_process+0x210>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	b29b      	uxth	r3, r3
 80093da:	e00d      	b.n	80093f8 <tcp_process+0x22c>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80093e0:	005b      	lsls	r3, r3, #1
 80093e2:	f241 121c 	movw	r2, #4380	; 0x111c
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d904      	bls.n	80093f4 <tcp_process+0x228>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80093ee:	005b      	lsls	r3, r3, #1
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	e001      	b.n	80093f8 <tcp_process+0x22c>
 80093f4:	f241 131c 	movw	r3, #4380	; 0x111c
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009404:	2b00      	cmp	r3, #0
 8009406:	d106      	bne.n	8009416 <tcp_process+0x24a>
 8009408:	4b1b      	ldr	r3, [pc, #108]	; (8009478 <tcp_process+0x2ac>)
 800940a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800940e:	4924      	ldr	r1, [pc, #144]	; (80094a0 <tcp_process+0x2d4>)
 8009410:	481b      	ldr	r0, [pc, #108]	; (8009480 <tcp_process+0x2b4>)
 8009412:	f006 f955 	bl	800f6c0 <iprintf>
        --pcb->snd_queuelen;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800941c:	3b01      	subs	r3, #1
 800941e:	b29a      	uxth	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800942a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d111      	bne.n	8009456 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009436:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d106      	bne.n	800944c <tcp_process+0x280>
 800943e:	4b0e      	ldr	r3, [pc, #56]	; (8009478 <tcp_process+0x2ac>)
 8009440:	f44f 725d 	mov.w	r2, #884	; 0x374
 8009444:	4917      	ldr	r1, [pc, #92]	; (80094a4 <tcp_process+0x2d8>)
 8009446:	480e      	ldr	r0, [pc, #56]	; (8009480 <tcp_process+0x2b4>)
 8009448:	f006 f93a 	bl	800f6c0 <iprintf>
          pcb->unsent = rseg->next;
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	66da      	str	r2, [r3, #108]	; 0x6c
 8009454:	e003      	b.n	800945e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800945e:	69f8      	ldr	r0, [r7, #28]
 8009460:	f7fe fc57 	bl	8007d12 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009468:	2b00      	cmp	r3, #0
 800946a:	d11d      	bne.n	80094a8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009472:	861a      	strh	r2, [r3, #48]	; 0x30
 8009474:	e01f      	b.n	80094b6 <tcp_process+0x2ea>
 8009476:	bf00      	nop
 8009478:	08011db0 	.word	0x08011db0
 800947c:	08011fe8 	.word	0x08011fe8
 8009480:	08011dfc 	.word	0x08011dfc
 8009484:	20000100 	.word	0x20000100
 8009488:	200000f8 	.word	0x200000f8
 800948c:	200000f4 	.word	0x200000f4
 8009490:	08012004 	.word	0x08012004
 8009494:	20000101 	.word	0x20000101
 8009498:	2000693c 	.word	0x2000693c
 800949c:	200000e4 	.word	0x200000e4
 80094a0:	08012024 	.word	0x08012024
 80094a4:	0801203c 	.word	0x0801203c
        } else {
          pcb->rtime = 0;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d00a      	beq.n	80094d6 <tcp_process+0x30a>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	6910      	ldr	r0, [r2, #16]
 80094ca:	2200      	movs	r2, #0
 80094cc:	6879      	ldr	r1, [r7, #4]
 80094ce:	4798      	blx	r3
 80094d0:	4603      	mov	r3, r0
 80094d2:	76bb      	strb	r3, [r7, #26]
 80094d4:	e001      	b.n	80094da <tcp_process+0x30e>
 80094d6:	2300      	movs	r3, #0
 80094d8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80094da:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80094de:	f113 0f0d 	cmn.w	r3, #13
 80094e2:	d102      	bne.n	80094ea <tcp_process+0x31e>
          return ERR_ABRT;
 80094e4:	f06f 030c 	mvn.w	r3, #12
 80094e8:	e250      	b.n	800998c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	8b5b      	ldrh	r3, [r3, #26]
 80094ee:	f043 0302 	orr.w	r3, r3, #2
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80094f8:	e23a      	b.n	8009970 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80094fa:	4b9d      	ldr	r3, [pc, #628]	; (8009770 <tcp_process+0x5a4>)
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	f003 0310 	and.w	r3, r3, #16
 8009502:	2b00      	cmp	r3, #0
 8009504:	f000 8234 	beq.w	8009970 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009508:	4b9a      	ldr	r3, [pc, #616]	; (8009774 <tcp_process+0x5a8>)
 800950a:	6819      	ldr	r1, [r3, #0]
 800950c:	4b9a      	ldr	r3, [pc, #616]	; (8009778 <tcp_process+0x5ac>)
 800950e:	881b      	ldrh	r3, [r3, #0]
 8009510:	461a      	mov	r2, r3
 8009512:	4b9a      	ldr	r3, [pc, #616]	; (800977c <tcp_process+0x5b0>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009518:	4b99      	ldr	r3, [pc, #612]	; (8009780 <tcp_process+0x5b4>)
 800951a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800951c:	885b      	ldrh	r3, [r3, #2]
 800951e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009520:	4a97      	ldr	r2, [pc, #604]	; (8009780 <tcp_process+0x5b4>)
 8009522:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009524:	8812      	ldrh	r2, [r2, #0]
 8009526:	b292      	uxth	r2, r2
 8009528:	9202      	str	r2, [sp, #8]
 800952a:	9301      	str	r3, [sp, #4]
 800952c:	4b95      	ldr	r3, [pc, #596]	; (8009784 <tcp_process+0x5b8>)
 800952e:	9300      	str	r3, [sp, #0]
 8009530:	4b95      	ldr	r3, [pc, #596]	; (8009788 <tcp_process+0x5bc>)
 8009532:	4602      	mov	r2, r0
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f003 f8db 	bl	800c6f0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009540:	2b05      	cmp	r3, #5
 8009542:	f200 8215 	bhi.w	8009970 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f002 fea5 	bl	800c29c <tcp_rexmit_rto>
      break;
 8009552:	e20d      	b.n	8009970 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8009554:	4b86      	ldr	r3, [pc, #536]	; (8009770 <tcp_process+0x5a4>)
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	f003 0310 	and.w	r3, r3, #16
 800955c:	2b00      	cmp	r3, #0
 800955e:	f000 80a1 	beq.w	80096a4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009562:	4b84      	ldr	r3, [pc, #528]	; (8009774 <tcp_process+0x5a8>)
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800956a:	1ad3      	subs	r3, r2, r3
 800956c:	3b01      	subs	r3, #1
 800956e:	2b00      	cmp	r3, #0
 8009570:	db7e      	blt.n	8009670 <tcp_process+0x4a4>
 8009572:	4b80      	ldr	r3, [pc, #512]	; (8009774 <tcp_process+0x5a8>)
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800957a:	1ad3      	subs	r3, r2, r3
 800957c:	2b00      	cmp	r3, #0
 800957e:	dc77      	bgt.n	8009670 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2204      	movs	r2, #4
 8009584:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800958a:	2b00      	cmp	r3, #0
 800958c:	d102      	bne.n	8009594 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800958e:	23fa      	movs	r3, #250	; 0xfa
 8009590:	76bb      	strb	r3, [r7, #26]
 8009592:	e01d      	b.n	80095d0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009598:	699b      	ldr	r3, [r3, #24]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d106      	bne.n	80095ac <tcp_process+0x3e0>
 800959e:	4b7b      	ldr	r3, [pc, #492]	; (800978c <tcp_process+0x5c0>)
 80095a0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80095a4:	497a      	ldr	r1, [pc, #488]	; (8009790 <tcp_process+0x5c4>)
 80095a6:	487b      	ldr	r0, [pc, #492]	; (8009794 <tcp_process+0x5c8>)
 80095a8:	f006 f88a 	bl	800f6c0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095b0:	699b      	ldr	r3, [r3, #24]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00a      	beq.n	80095cc <tcp_process+0x400>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095ba:	699b      	ldr	r3, [r3, #24]
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	6910      	ldr	r0, [r2, #16]
 80095c0:	2200      	movs	r2, #0
 80095c2:	6879      	ldr	r1, [r7, #4]
 80095c4:	4798      	blx	r3
 80095c6:	4603      	mov	r3, r0
 80095c8:	76bb      	strb	r3, [r7, #26]
 80095ca:	e001      	b.n	80095d0 <tcp_process+0x404>
 80095cc:	23f0      	movs	r3, #240	; 0xf0
 80095ce:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80095d0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00a      	beq.n	80095ee <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80095d8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80095dc:	f113 0f0d 	cmn.w	r3, #13
 80095e0:	d002      	beq.n	80095e8 <tcp_process+0x41c>
              tcp_abort(pcb);
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f7fd fcf0 	bl	8006fc8 <tcp_abort>
            }
            return ERR_ABRT;
 80095e8:	f06f 030c 	mvn.w	r3, #12
 80095ec:	e1ce      	b.n	800998c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 fae0 	bl	8009bb4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80095f4:	4b68      	ldr	r3, [pc, #416]	; (8009798 <tcp_process+0x5cc>)
 80095f6:	881b      	ldrh	r3, [r3, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d005      	beq.n	8009608 <tcp_process+0x43c>
            recv_acked--;
 80095fc:	4b66      	ldr	r3, [pc, #408]	; (8009798 <tcp_process+0x5cc>)
 80095fe:	881b      	ldrh	r3, [r3, #0]
 8009600:	3b01      	subs	r3, #1
 8009602:	b29a      	uxth	r2, r3
 8009604:	4b64      	ldr	r3, [pc, #400]	; (8009798 <tcp_process+0x5cc>)
 8009606:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800960c:	009a      	lsls	r2, r3, #2
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009612:	005b      	lsls	r3, r3, #1
 8009614:	f241 111c 	movw	r1, #4380	; 0x111c
 8009618:	428b      	cmp	r3, r1
 800961a:	bf38      	it	cc
 800961c:	460b      	movcc	r3, r1
 800961e:	429a      	cmp	r2, r3
 8009620:	d204      	bcs.n	800962c <tcp_process+0x460>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	b29b      	uxth	r3, r3
 800962a:	e00d      	b.n	8009648 <tcp_process+0x47c>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009630:	005b      	lsls	r3, r3, #1
 8009632:	f241 121c 	movw	r2, #4380	; 0x111c
 8009636:	4293      	cmp	r3, r2
 8009638:	d904      	bls.n	8009644 <tcp_process+0x478>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800963e:	005b      	lsls	r3, r3, #1
 8009640:	b29b      	uxth	r3, r3
 8009642:	e001      	b.n	8009648 <tcp_process+0x47c>
 8009644:	f241 131c 	movw	r3, #4380	; 0x111c
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800964e:	4b53      	ldr	r3, [pc, #332]	; (800979c <tcp_process+0x5d0>)
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	f003 0320 	and.w	r3, r3, #32
 8009656:	2b00      	cmp	r3, #0
 8009658:	d037      	beq.n	80096ca <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	8b5b      	ldrh	r3, [r3, #26]
 800965e:	f043 0302 	orr.w	r3, r3, #2
 8009662:	b29a      	uxth	r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2207      	movs	r2, #7
 800966c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800966e:	e02c      	b.n	80096ca <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009670:	4b40      	ldr	r3, [pc, #256]	; (8009774 <tcp_process+0x5a8>)
 8009672:	6819      	ldr	r1, [r3, #0]
 8009674:	4b40      	ldr	r3, [pc, #256]	; (8009778 <tcp_process+0x5ac>)
 8009676:	881b      	ldrh	r3, [r3, #0]
 8009678:	461a      	mov	r2, r3
 800967a:	4b40      	ldr	r3, [pc, #256]	; (800977c <tcp_process+0x5b0>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009680:	4b3f      	ldr	r3, [pc, #252]	; (8009780 <tcp_process+0x5b4>)
 8009682:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009684:	885b      	ldrh	r3, [r3, #2]
 8009686:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009688:	4a3d      	ldr	r2, [pc, #244]	; (8009780 <tcp_process+0x5b4>)
 800968a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800968c:	8812      	ldrh	r2, [r2, #0]
 800968e:	b292      	uxth	r2, r2
 8009690:	9202      	str	r2, [sp, #8]
 8009692:	9301      	str	r3, [sp, #4]
 8009694:	4b3b      	ldr	r3, [pc, #236]	; (8009784 <tcp_process+0x5b8>)
 8009696:	9300      	str	r3, [sp, #0]
 8009698:	4b3b      	ldr	r3, [pc, #236]	; (8009788 <tcp_process+0x5bc>)
 800969a:	4602      	mov	r2, r0
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f003 f827 	bl	800c6f0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80096a2:	e167      	b.n	8009974 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80096a4:	4b32      	ldr	r3, [pc, #200]	; (8009770 <tcp_process+0x5a4>)
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	f003 0302 	and.w	r3, r3, #2
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f000 8161 	beq.w	8009974 <tcp_process+0x7a8>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b6:	1e5a      	subs	r2, r3, #1
 80096b8:	4b30      	ldr	r3, [pc, #192]	; (800977c <tcp_process+0x5b0>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	429a      	cmp	r2, r3
 80096be:	f040 8159 	bne.w	8009974 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f002 fe0c 	bl	800c2e0 <tcp_rexmit>
      break;
 80096c8:	e154      	b.n	8009974 <tcp_process+0x7a8>
 80096ca:	e153      	b.n	8009974 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 fa71 	bl	8009bb4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80096d2:	4b32      	ldr	r3, [pc, #200]	; (800979c <tcp_process+0x5d0>)
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	f003 0320 	and.w	r3, r3, #32
 80096da:	2b00      	cmp	r3, #0
 80096dc:	f000 814c 	beq.w	8009978 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	8b5b      	ldrh	r3, [r3, #26]
 80096e4:	f043 0302 	orr.w	r3, r3, #2
 80096e8:	b29a      	uxth	r2, r3
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2207      	movs	r2, #7
 80096f2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80096f4:	e140      	b.n	8009978 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 fa5c 	bl	8009bb4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80096fc:	4b27      	ldr	r3, [pc, #156]	; (800979c <tcp_process+0x5d0>)
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	f003 0320 	and.w	r3, r3, #32
 8009704:	2b00      	cmp	r3, #0
 8009706:	d071      	beq.n	80097ec <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009708:	4b19      	ldr	r3, [pc, #100]	; (8009770 <tcp_process+0x5a4>)
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	f003 0310 	and.w	r3, r3, #16
 8009710:	2b00      	cmp	r3, #0
 8009712:	d060      	beq.n	80097d6 <tcp_process+0x60a>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009718:	4b16      	ldr	r3, [pc, #88]	; (8009774 <tcp_process+0x5a8>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	429a      	cmp	r2, r3
 800971e:	d15a      	bne.n	80097d6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009724:	2b00      	cmp	r3, #0
 8009726:	d156      	bne.n	80097d6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	8b5b      	ldrh	r3, [r3, #26]
 800972c:	f043 0302 	orr.w	r3, r3, #2
 8009730:	b29a      	uxth	r2, r3
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f7fe fdbe 	bl	80082b8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800973c:	4b18      	ldr	r3, [pc, #96]	; (80097a0 <tcp_process+0x5d4>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	429a      	cmp	r2, r3
 8009744:	d105      	bne.n	8009752 <tcp_process+0x586>
 8009746:	4b16      	ldr	r3, [pc, #88]	; (80097a0 <tcp_process+0x5d4>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	4a14      	ldr	r2, [pc, #80]	; (80097a0 <tcp_process+0x5d4>)
 800974e:	6013      	str	r3, [r2, #0]
 8009750:	e02e      	b.n	80097b0 <tcp_process+0x5e4>
 8009752:	4b13      	ldr	r3, [pc, #76]	; (80097a0 <tcp_process+0x5d4>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	617b      	str	r3, [r7, #20]
 8009758:	e027      	b.n	80097aa <tcp_process+0x5de>
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	429a      	cmp	r2, r3
 8009762:	d11f      	bne.n	80097a4 <tcp_process+0x5d8>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	68da      	ldr	r2, [r3, #12]
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	60da      	str	r2, [r3, #12]
 800976c:	e020      	b.n	80097b0 <tcp_process+0x5e4>
 800976e:	bf00      	nop
 8009770:	20000100 	.word	0x20000100
 8009774:	200000f8 	.word	0x200000f8
 8009778:	200000fe 	.word	0x200000fe
 800977c:	200000f4 	.word	0x200000f4
 8009780:	200000e4 	.word	0x200000e4
 8009784:	20003404 	.word	0x20003404
 8009788:	20003408 	.word	0x20003408
 800978c:	08011db0 	.word	0x08011db0
 8009790:	08012050 	.word	0x08012050
 8009794:	08011dfc 	.word	0x08011dfc
 8009798:	200000fc 	.word	0x200000fc
 800979c:	20000101 	.word	0x20000101
 80097a0:	20006938 	.word	0x20006938
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	617b      	str	r3, [r7, #20]
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d1d4      	bne.n	800975a <tcp_process+0x58e>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2200      	movs	r2, #0
 80097b4:	60da      	str	r2, [r3, #12]
 80097b6:	4b77      	ldr	r3, [pc, #476]	; (8009994 <tcp_process+0x7c8>)
 80097b8:	2201      	movs	r2, #1
 80097ba:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	220a      	movs	r2, #10
 80097c0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80097c2:	4b75      	ldr	r3, [pc, #468]	; (8009998 <tcp_process+0x7cc>)
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	60da      	str	r2, [r3, #12]
 80097ca:	4a73      	ldr	r2, [pc, #460]	; (8009998 <tcp_process+0x7cc>)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6013      	str	r3, [r2, #0]
 80097d0:	f003 f950 	bl	800ca74 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80097d4:	e0d2      	b.n	800997c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	8b5b      	ldrh	r3, [r3, #26]
 80097da:	f043 0302 	orr.w	r3, r3, #2
 80097de:	b29a      	uxth	r2, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2208      	movs	r2, #8
 80097e8:	751a      	strb	r2, [r3, #20]
      break;
 80097ea:	e0c7      	b.n	800997c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80097ec:	4b6b      	ldr	r3, [pc, #428]	; (800999c <tcp_process+0x7d0>)
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	f003 0310 	and.w	r3, r3, #16
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	f000 80c1 	beq.w	800997c <tcp_process+0x7b0>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80097fe:	4b68      	ldr	r3, [pc, #416]	; (80099a0 <tcp_process+0x7d4>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	429a      	cmp	r2, r3
 8009804:	f040 80ba 	bne.w	800997c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800980c:	2b00      	cmp	r3, #0
 800980e:	f040 80b5 	bne.w	800997c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2206      	movs	r2, #6
 8009816:	751a      	strb	r2, [r3, #20]
      break;
 8009818:	e0b0      	b.n	800997c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 f9ca 	bl	8009bb4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009820:	4b60      	ldr	r3, [pc, #384]	; (80099a4 <tcp_process+0x7d8>)
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	f003 0320 	and.w	r3, r3, #32
 8009828:	2b00      	cmp	r3, #0
 800982a:	f000 80a9 	beq.w	8009980 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	8b5b      	ldrh	r3, [r3, #26]
 8009832:	f043 0302 	orr.w	r3, r3, #2
 8009836:	b29a      	uxth	r2, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f7fe fd3b 	bl	80082b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009842:	4b59      	ldr	r3, [pc, #356]	; (80099a8 <tcp_process+0x7dc>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	429a      	cmp	r2, r3
 800984a:	d105      	bne.n	8009858 <tcp_process+0x68c>
 800984c:	4b56      	ldr	r3, [pc, #344]	; (80099a8 <tcp_process+0x7dc>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	68db      	ldr	r3, [r3, #12]
 8009852:	4a55      	ldr	r2, [pc, #340]	; (80099a8 <tcp_process+0x7dc>)
 8009854:	6013      	str	r3, [r2, #0]
 8009856:	e013      	b.n	8009880 <tcp_process+0x6b4>
 8009858:	4b53      	ldr	r3, [pc, #332]	; (80099a8 <tcp_process+0x7dc>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	613b      	str	r3, [r7, #16]
 800985e:	e00c      	b.n	800987a <tcp_process+0x6ae>
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	429a      	cmp	r2, r3
 8009868:	d104      	bne.n	8009874 <tcp_process+0x6a8>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	68da      	ldr	r2, [r3, #12]
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	60da      	str	r2, [r3, #12]
 8009872:	e005      	b.n	8009880 <tcp_process+0x6b4>
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	613b      	str	r3, [r7, #16]
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d1ef      	bne.n	8009860 <tcp_process+0x694>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	60da      	str	r2, [r3, #12]
 8009886:	4b43      	ldr	r3, [pc, #268]	; (8009994 <tcp_process+0x7c8>)
 8009888:	2201      	movs	r2, #1
 800988a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	220a      	movs	r2, #10
 8009890:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009892:	4b41      	ldr	r3, [pc, #260]	; (8009998 <tcp_process+0x7cc>)
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	60da      	str	r2, [r3, #12]
 800989a:	4a3f      	ldr	r2, [pc, #252]	; (8009998 <tcp_process+0x7cc>)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6013      	str	r3, [r2, #0]
 80098a0:	f003 f8e8 	bl	800ca74 <tcp_timer_needed>
      }
      break;
 80098a4:	e06c      	b.n	8009980 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 f984 	bl	8009bb4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80098ac:	4b3b      	ldr	r3, [pc, #236]	; (800999c <tcp_process+0x7d0>)
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	f003 0310 	and.w	r3, r3, #16
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d065      	beq.n	8009984 <tcp_process+0x7b8>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80098bc:	4b38      	ldr	r3, [pc, #224]	; (80099a0 <tcp_process+0x7d4>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d15f      	bne.n	8009984 <tcp_process+0x7b8>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d15b      	bne.n	8009984 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f7fe fcf3 	bl	80082b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80098d2:	4b35      	ldr	r3, [pc, #212]	; (80099a8 <tcp_process+0x7dc>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d105      	bne.n	80098e8 <tcp_process+0x71c>
 80098dc:	4b32      	ldr	r3, [pc, #200]	; (80099a8 <tcp_process+0x7dc>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	4a31      	ldr	r2, [pc, #196]	; (80099a8 <tcp_process+0x7dc>)
 80098e4:	6013      	str	r3, [r2, #0]
 80098e6:	e013      	b.n	8009910 <tcp_process+0x744>
 80098e8:	4b2f      	ldr	r3, [pc, #188]	; (80099a8 <tcp_process+0x7dc>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	60fb      	str	r3, [r7, #12]
 80098ee:	e00c      	b.n	800990a <tcp_process+0x73e>
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d104      	bne.n	8009904 <tcp_process+0x738>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	68da      	ldr	r2, [r3, #12]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	60da      	str	r2, [r3, #12]
 8009902:	e005      	b.n	8009910 <tcp_process+0x744>
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	60fb      	str	r3, [r7, #12]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d1ef      	bne.n	80098f0 <tcp_process+0x724>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	60da      	str	r2, [r3, #12]
 8009916:	4b1f      	ldr	r3, [pc, #124]	; (8009994 <tcp_process+0x7c8>)
 8009918:	2201      	movs	r2, #1
 800991a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	220a      	movs	r2, #10
 8009920:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009922:	4b1d      	ldr	r3, [pc, #116]	; (8009998 <tcp_process+0x7cc>)
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	60da      	str	r2, [r3, #12]
 800992a:	4a1b      	ldr	r2, [pc, #108]	; (8009998 <tcp_process+0x7cc>)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6013      	str	r3, [r2, #0]
 8009930:	f003 f8a0 	bl	800ca74 <tcp_timer_needed>
      }
      break;
 8009934:	e026      	b.n	8009984 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 f93c 	bl	8009bb4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800993c:	4b17      	ldr	r3, [pc, #92]	; (800999c <tcp_process+0x7d0>)
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	f003 0310 	and.w	r3, r3, #16
 8009944:	2b00      	cmp	r3, #0
 8009946:	d01f      	beq.n	8009988 <tcp_process+0x7bc>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800994c:	4b14      	ldr	r3, [pc, #80]	; (80099a0 <tcp_process+0x7d4>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	429a      	cmp	r2, r3
 8009952:	d119      	bne.n	8009988 <tcp_process+0x7bc>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009958:	2b00      	cmp	r3, #0
 800995a:	d115      	bne.n	8009988 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800995c:	4b11      	ldr	r3, [pc, #68]	; (80099a4 <tcp_process+0x7d8>)
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	f043 0310 	orr.w	r3, r3, #16
 8009964:	b2da      	uxtb	r2, r3
 8009966:	4b0f      	ldr	r3, [pc, #60]	; (80099a4 <tcp_process+0x7d8>)
 8009968:	701a      	strb	r2, [r3, #0]
      }
      break;
 800996a:	e00d      	b.n	8009988 <tcp_process+0x7bc>
    default:
      break;
 800996c:	bf00      	nop
 800996e:	e00c      	b.n	800998a <tcp_process+0x7be>
      break;
 8009970:	bf00      	nop
 8009972:	e00a      	b.n	800998a <tcp_process+0x7be>
      break;
 8009974:	bf00      	nop
 8009976:	e008      	b.n	800998a <tcp_process+0x7be>
      break;
 8009978:	bf00      	nop
 800997a:	e006      	b.n	800998a <tcp_process+0x7be>
      break;
 800997c:	bf00      	nop
 800997e:	e004      	b.n	800998a <tcp_process+0x7be>
      break;
 8009980:	bf00      	nop
 8009982:	e002      	b.n	800998a <tcp_process+0x7be>
      break;
 8009984:	bf00      	nop
 8009986:	e000      	b.n	800998a <tcp_process+0x7be>
      break;
 8009988:	bf00      	nop
  }
  return ERR_OK;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	3724      	adds	r7, #36	; 0x24
 8009990:	46bd      	mov	sp, r7
 8009992:	bd90      	pop	{r4, r7, pc}
 8009994:	20006934 	.word	0x20006934
 8009998:	20006948 	.word	0x20006948
 800999c:	20000100 	.word	0x20000100
 80099a0:	200000f8 	.word	0x200000f8
 80099a4:	20000101 	.word	0x20000101
 80099a8:	20006938 	.word	0x20006938

080099ac <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80099ac:	b590      	push	{r4, r7, lr}
 80099ae:	b085      	sub	sp, #20
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d106      	bne.n	80099ca <tcp_oos_insert_segment+0x1e>
 80099bc:	4b3b      	ldr	r3, [pc, #236]	; (8009aac <tcp_oos_insert_segment+0x100>)
 80099be:	f240 421f 	movw	r2, #1055	; 0x41f
 80099c2:	493b      	ldr	r1, [pc, #236]	; (8009ab0 <tcp_oos_insert_segment+0x104>)
 80099c4:	483b      	ldr	r0, [pc, #236]	; (8009ab4 <tcp_oos_insert_segment+0x108>)
 80099c6:	f005 fe7b 	bl	800f6c0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	899b      	ldrh	r3, [r3, #12]
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7fb fa1a 	bl	8004e0c <lwip_htons>
 80099d8:	4603      	mov	r3, r0
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	f003 0301 	and.w	r3, r3, #1
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d028      	beq.n	8009a36 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80099e4:	6838      	ldr	r0, [r7, #0]
 80099e6:	f7fe f97f 	bl	8007ce8 <tcp_segs_free>
    next = NULL;
 80099ea:	2300      	movs	r3, #0
 80099ec:	603b      	str	r3, [r7, #0]
 80099ee:	e056      	b.n	8009a9e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	899b      	ldrh	r3, [r3, #12]
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	4618      	mov	r0, r3
 80099fa:	f7fb fa07 	bl	8004e0c <lwip_htons>
 80099fe:	4603      	mov	r3, r0
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	f003 0301 	and.w	r3, r3, #1
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00d      	beq.n	8009a26 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	899b      	ldrh	r3, [r3, #12]
 8009a10:	b29c      	uxth	r4, r3
 8009a12:	2001      	movs	r0, #1
 8009a14:	f7fb f9fa 	bl	8004e0c <lwip_htons>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	4322      	orrs	r2, r4
 8009a22:	b292      	uxth	r2, r2
 8009a24:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009a30:	68f8      	ldr	r0, [r7, #12]
 8009a32:	f7fe f96e 	bl	8007d12 <tcp_seg_free>
    while (next &&
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d00e      	beq.n	8009a5a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	891b      	ldrh	r3, [r3, #8]
 8009a40:	461a      	mov	r2, r3
 8009a42:	4b1d      	ldr	r3, [pc, #116]	; (8009ab8 <tcp_oos_insert_segment+0x10c>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	441a      	add	r2, r3
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	6839      	ldr	r1, [r7, #0]
 8009a50:	8909      	ldrh	r1, [r1, #8]
 8009a52:	440b      	add	r3, r1
 8009a54:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	daca      	bge.n	80099f0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d01e      	beq.n	8009a9e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	891b      	ldrh	r3, [r3, #8]
 8009a64:	461a      	mov	r2, r3
 8009a66:	4b14      	ldr	r3, [pc, #80]	; (8009ab8 <tcp_oos_insert_segment+0x10c>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	441a      	add	r2, r3
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	dd12      	ble.n	8009a9e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	b29a      	uxth	r2, r3
 8009a80:	4b0d      	ldr	r3, [pc, #52]	; (8009ab8 <tcp_oos_insert_segment+0x10c>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	1ad3      	subs	r3, r2, r3
 8009a88:	b29a      	uxth	r2, r3
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	685a      	ldr	r2, [r3, #4]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	891b      	ldrh	r3, [r3, #8]
 8009a96:	4619      	mov	r1, r3
 8009a98:	4610      	mov	r0, r2
 8009a9a:	f7fc fae5 	bl	8006068 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	683a      	ldr	r2, [r7, #0]
 8009aa2:	601a      	str	r2, [r3, #0]
}
 8009aa4:	bf00      	nop
 8009aa6:	3714      	adds	r7, #20
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd90      	pop	{r4, r7, pc}
 8009aac:	08011db0 	.word	0x08011db0
 8009ab0:	08012070 	.word	0x08012070
 8009ab4:	08011dfc 	.word	0x08011dfc
 8009ab8:	200000f4 	.word	0x200000f4

08009abc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009abc:	b5b0      	push	{r4, r5, r7, lr}
 8009abe:	b086      	sub	sp, #24
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	607a      	str	r2, [r7, #4]
 8009ac8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009aca:	e03e      	b.n	8009b4a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7fc fcd2 	bl	8006484 <pbuf_clen>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009aea:	8a7a      	ldrh	r2, [r7, #18]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d906      	bls.n	8009afe <tcp_free_acked_segments+0x42>
 8009af0:	4b2a      	ldr	r3, [pc, #168]	; (8009b9c <tcp_free_acked_segments+0xe0>)
 8009af2:	f240 4257 	movw	r2, #1111	; 0x457
 8009af6:	492a      	ldr	r1, [pc, #168]	; (8009ba0 <tcp_free_acked_segments+0xe4>)
 8009af8:	482a      	ldr	r0, [pc, #168]	; (8009ba4 <tcp_free_acked_segments+0xe8>)
 8009afa:	f005 fde1 	bl	800f6c0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8009b04:	8a7b      	ldrh	r3, [r7, #18]
 8009b06:	1ad3      	subs	r3, r2, r3
 8009b08:	b29a      	uxth	r2, r3
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	891a      	ldrh	r2, [r3, #8]
 8009b14:	4b24      	ldr	r3, [pc, #144]	; (8009ba8 <tcp_free_acked_segments+0xec>)
 8009b16:	881b      	ldrh	r3, [r3, #0]
 8009b18:	4413      	add	r3, r2
 8009b1a:	b29a      	uxth	r2, r3
 8009b1c:	4b22      	ldr	r3, [pc, #136]	; (8009ba8 <tcp_free_acked_segments+0xec>)
 8009b1e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009b20:	6978      	ldr	r0, [r7, #20]
 8009b22:	f7fe f8f6 	bl	8007d12 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d00c      	beq.n	8009b4a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d109      	bne.n	8009b4a <tcp_free_acked_segments+0x8e>
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d106      	bne.n	8009b4a <tcp_free_acked_segments+0x8e>
 8009b3c:	4b17      	ldr	r3, [pc, #92]	; (8009b9c <tcp_free_acked_segments+0xe0>)
 8009b3e:	f240 4261 	movw	r2, #1121	; 0x461
 8009b42:	491a      	ldr	r1, [pc, #104]	; (8009bac <tcp_free_acked_segments+0xf0>)
 8009b44:	4817      	ldr	r0, [pc, #92]	; (8009ba4 <tcp_free_acked_segments+0xe8>)
 8009b46:	f005 fdbb 	bl	800f6c0 <iprintf>
  while (seg_list != NULL &&
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d020      	beq.n	8009b92 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7fb f96d 	bl	8004e36 <lwip_htonl>
 8009b5c:	4604      	mov	r4, r0
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	891b      	ldrh	r3, [r3, #8]
 8009b62:	461d      	mov	r5, r3
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	68db      	ldr	r3, [r3, #12]
 8009b68:	899b      	ldrh	r3, [r3, #12]
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f7fb f94d 	bl	8004e0c <lwip_htons>
 8009b72:	4603      	mov	r3, r0
 8009b74:	b2db      	uxtb	r3, r3
 8009b76:	f003 0303 	and.w	r3, r3, #3
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d001      	beq.n	8009b82 <tcp_free_acked_segments+0xc6>
 8009b7e:	2301      	movs	r3, #1
 8009b80:	e000      	b.n	8009b84 <tcp_free_acked_segments+0xc8>
 8009b82:	2300      	movs	r3, #0
 8009b84:	442b      	add	r3, r5
 8009b86:	18e2      	adds	r2, r4, r3
 8009b88:	4b09      	ldr	r3, [pc, #36]	; (8009bb0 <tcp_free_acked_segments+0xf4>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	dd9c      	ble.n	8009acc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009b92:	68bb      	ldr	r3, [r7, #8]
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3718      	adds	r7, #24
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bdb0      	pop	{r4, r5, r7, pc}
 8009b9c:	08011db0 	.word	0x08011db0
 8009ba0:	08012098 	.word	0x08012098
 8009ba4:	08011dfc 	.word	0x08011dfc
 8009ba8:	200000fc 	.word	0x200000fc
 8009bac:	080120c0 	.word	0x080120c0
 8009bb0:	200000f8 	.word	0x200000f8

08009bb4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009bb4:	b5b0      	push	{r4, r5, r7, lr}
 8009bb6:	b094      	sub	sp, #80	; 0x50
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d106      	bne.n	8009bd4 <tcp_receive+0x20>
 8009bc6:	4ba6      	ldr	r3, [pc, #664]	; (8009e60 <tcp_receive+0x2ac>)
 8009bc8:	f240 427b 	movw	r2, #1147	; 0x47b
 8009bcc:	49a5      	ldr	r1, [pc, #660]	; (8009e64 <tcp_receive+0x2b0>)
 8009bce:	48a6      	ldr	r0, [pc, #664]	; (8009e68 <tcp_receive+0x2b4>)
 8009bd0:	f005 fd76 	bl	800f6c0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	7d1b      	ldrb	r3, [r3, #20]
 8009bd8:	2b03      	cmp	r3, #3
 8009bda:	d806      	bhi.n	8009bea <tcp_receive+0x36>
 8009bdc:	4ba0      	ldr	r3, [pc, #640]	; (8009e60 <tcp_receive+0x2ac>)
 8009bde:	f240 427c 	movw	r2, #1148	; 0x47c
 8009be2:	49a2      	ldr	r1, [pc, #648]	; (8009e6c <tcp_receive+0x2b8>)
 8009be4:	48a0      	ldr	r0, [pc, #640]	; (8009e68 <tcp_receive+0x2b4>)
 8009be6:	f005 fd6b 	bl	800f6c0 <iprintf>

  if (flags & TCP_ACK) {
 8009bea:	4ba1      	ldr	r3, [pc, #644]	; (8009e70 <tcp_receive+0x2bc>)
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	f003 0310 	and.w	r3, r3, #16
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	f000 8263 	beq.w	800a0be <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009bfe:	461a      	mov	r2, r3
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c04:	4413      	add	r3, r2
 8009c06:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c0c:	4b99      	ldr	r3, [pc, #612]	; (8009e74 <tcp_receive+0x2c0>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	1ad3      	subs	r3, r2, r3
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	db1b      	blt.n	8009c4e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c1a:	4b96      	ldr	r3, [pc, #600]	; (8009e74 <tcp_receive+0x2c0>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d106      	bne.n	8009c30 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009c26:	4b94      	ldr	r3, [pc, #592]	; (8009e78 <tcp_receive+0x2c4>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	1ad3      	subs	r3, r2, r3
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	db0e      	blt.n	8009c4e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009c34:	4b90      	ldr	r3, [pc, #576]	; (8009e78 <tcp_receive+0x2c4>)
 8009c36:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d125      	bne.n	8009c88 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009c3c:	4b8f      	ldr	r3, [pc, #572]	; (8009e7c <tcp_receive+0x2c8>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	89db      	ldrh	r3, [r3, #14]
 8009c42:	b29a      	uxth	r2, r3
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d91c      	bls.n	8009c88 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009c4e:	4b8b      	ldr	r3, [pc, #556]	; (8009e7c <tcp_receive+0x2c8>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	89db      	ldrh	r3, [r3, #14]
 8009c54:	b29a      	uxth	r2, r3
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d205      	bcs.n	8009c78 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8009c78:	4b7e      	ldr	r3, [pc, #504]	; (8009e74 <tcp_receive+0x2c0>)
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009c80:	4b7d      	ldr	r3, [pc, #500]	; (8009e78 <tcp_receive+0x2c4>)
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009c88:	4b7b      	ldr	r3, [pc, #492]	; (8009e78 <tcp_receive+0x2c4>)
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c90:	1ad3      	subs	r3, r2, r3
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	dc58      	bgt.n	8009d48 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8009c96:	4b7a      	ldr	r3, [pc, #488]	; (8009e80 <tcp_receive+0x2cc>)
 8009c98:	881b      	ldrh	r3, [r3, #0]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d14b      	bne.n	8009d36 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8009ca8:	4413      	add	r3, r2
 8009caa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d142      	bne.n	8009d36 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	db3d      	blt.n	8009d36 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cbe:	4b6e      	ldr	r3, [pc, #440]	; (8009e78 <tcp_receive+0x2c4>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d137      	bne.n	8009d36 <tcp_receive+0x182>
              found_dupack = 1;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009cd0:	2bff      	cmp	r3, #255	; 0xff
 8009cd2:	d007      	beq.n	8009ce4 <tcp_receive+0x130>
                ++pcb->dupacks;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009cda:	3301      	adds	r3, #1
 8009cdc:	b2da      	uxtb	r2, r3
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009cea:	2b03      	cmp	r3, #3
 8009cec:	d91b      	bls.n	8009d26 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009cf8:	4413      	add	r3, r2
 8009cfa:	b29a      	uxth	r2, r3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d30a      	bcc.n	8009d1c <tcp_receive+0x168>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009d10:	4413      	add	r3, r2
 8009d12:	b29a      	uxth	r2, r3
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009d1a:	e004      	b.n	8009d26 <tcp_receive+0x172>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d22:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	d902      	bls.n	8009d36 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f002 fb41 	bl	800c3b8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8009d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	f040 8160 	bne.w	8009ffe <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d46:	e15a      	b.n	8009ffe <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009d48:	4b4b      	ldr	r3, [pc, #300]	; (8009e78 <tcp_receive+0x2c4>)
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d50:	1ad3      	subs	r3, r2, r3
 8009d52:	3b01      	subs	r3, #1
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	f2c0 814d 	blt.w	8009ff4 <tcp_receive+0x440>
 8009d5a:	4b47      	ldr	r3, [pc, #284]	; (8009e78 <tcp_receive+0x2c4>)
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d62:	1ad3      	subs	r3, r2, r3
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f300 8145 	bgt.w	8009ff4 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	8b5b      	ldrh	r3, [r3, #26]
 8009d6e:	f003 0304 	and.w	r3, r3, #4
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d010      	beq.n	8009d98 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	8b5b      	ldrh	r3, [r3, #26]
 8009d7a:	f023 0304 	bic.w	r3, r3, #4
 8009d7e:	b29a      	uxth	r2, r3
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009da6:	10db      	asrs	r3, r3, #3
 8009da8:	b21b      	sxth	r3, r3
 8009daa:	b29a      	uxth	r2, r3
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	4413      	add	r3, r2
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	b21a      	sxth	r2, r3
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009dc0:	4b2d      	ldr	r3, [pc, #180]	; (8009e78 <tcp_receive+0x2c4>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	b29a      	uxth	r2, r3
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	1ad3      	subs	r3, r2, r3
 8009dce:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8009dd8:	4b27      	ldr	r3, [pc, #156]	; (8009e78 <tcp_receive+0x2c4>)
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	7d1b      	ldrb	r3, [r3, #20]
 8009de4:	2b03      	cmp	r3, #3
 8009de6:	f240 8096 	bls.w	8009f16 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d244      	bcs.n	8009e84 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	8b5b      	ldrh	r3, [r3, #26]
 8009dfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d001      	beq.n	8009e0a <tcp_receive+0x256>
 8009e06:	2301      	movs	r3, #1
 8009e08:	e000      	b.n	8009e0c <tcp_receive+0x258>
 8009e0a:	2302      	movs	r3, #2
 8009e0c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009e10:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009e14:	b29a      	uxth	r2, r3
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e1a:	fb12 f303 	smulbb	r3, r2, r3
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009e22:	4293      	cmp	r3, r2
 8009e24:	bf28      	it	cs
 8009e26:	4613      	movcs	r3, r2
 8009e28:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009e30:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009e32:	4413      	add	r3, r2
 8009e34:	b29a      	uxth	r2, r3
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d309      	bcc.n	8009e54 <tcp_receive+0x2a0>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009e46:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009e48:	4413      	add	r3, r2
 8009e4a:	b29a      	uxth	r2, r3
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009e52:	e060      	b.n	8009f16 <tcp_receive+0x362>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009e5e:	e05a      	b.n	8009f16 <tcp_receive+0x362>
 8009e60:	08011db0 	.word	0x08011db0
 8009e64:	080120e0 	.word	0x080120e0
 8009e68:	08011dfc 	.word	0x08011dfc
 8009e6c:	080120fc 	.word	0x080120fc
 8009e70:	20000100 	.word	0x20000100
 8009e74:	200000f4 	.word	0x200000f4
 8009e78:	200000f8 	.word	0x200000f8
 8009e7c:	200000e4 	.word	0x200000e4
 8009e80:	200000fe 	.word	0x200000fe
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009e8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009e8c:	4413      	add	r3, r2
 8009e8e:	b29a      	uxth	r2, r3
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d309      	bcc.n	8009eae <tcp_receive+0x2fa>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009ea0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009ea2:	4413      	add	r3, r2
 8009ea4:	b29a      	uxth	r2, r3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009eac:	e004      	b.n	8009eb8 <tcp_receive+0x304>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009eb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d326      	bcc.n	8009f16 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009ed4:	1ad3      	subs	r3, r2, r3
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009ee8:	4413      	add	r3, r2
 8009eea:	b29a      	uxth	r2, r3
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d30a      	bcc.n	8009f0c <tcp_receive+0x358>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009f00:	4413      	add	r3, r2
 8009f02:	b29a      	uxth	r2, r3
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009f0a:	e004      	b.n	8009f16 <tcp_receive+0x362>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f12:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f1e:	4a98      	ldr	r2, [pc, #608]	; (800a180 <tcp_receive+0x5cc>)
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f7ff fdcb 	bl	8009abc <tcp_free_acked_segments>
 8009f26:	4602      	mov	r2, r0
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f34:	4a93      	ldr	r2, [pc, #588]	; (800a184 <tcp_receive+0x5d0>)
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f7ff fdc0 	bl	8009abc <tcp_free_acked_segments>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d104      	bne.n	8009f54 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f50:	861a      	strh	r2, [r3, #48]	; 0x30
 8009f52:	e002      	b.n	8009f5a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d103      	bne.n	8009f70 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009f76:	4b84      	ldr	r3, [pc, #528]	; (800a188 <tcp_receive+0x5d4>)
 8009f78:	881b      	ldrh	r3, [r3, #0]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	b29a      	uxth	r2, r3
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	8b5b      	ldrh	r3, [r3, #26]
 8009f88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d035      	beq.n	8009ffc <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d118      	bne.n	8009fca <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d00c      	beq.n	8009fba <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fa8:	68db      	ldr	r3, [r3, #12]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	4618      	mov	r0, r3
 8009fae:	f7fa ff42 	bl	8004e36 <lwip_htonl>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	dc20      	bgt.n	8009ffc <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	8b5b      	ldrh	r3, [r3, #26]
 8009fbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009fc2:	b29a      	uxth	r2, r3
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009fc8:	e018      	b.n	8009ffc <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7fa ff2d 	bl	8004e36 <lwip_htonl>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	1ae3      	subs	r3, r4, r3
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	dc0b      	bgt.n	8009ffc <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	8b5b      	ldrh	r3, [r3, #26]
 8009fe8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009fec:	b29a      	uxth	r2, r3
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009ff2:	e003      	b.n	8009ffc <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f002 fbcd 	bl	800c794 <tcp_send_empty_ack>
 8009ffa:	e000      	b.n	8009ffe <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009ffc:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a002:	2b00      	cmp	r3, #0
 800a004:	d05b      	beq.n	800a0be <tcp_receive+0x50a>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a00a:	4b60      	ldr	r3, [pc, #384]	; (800a18c <tcp_receive+0x5d8>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	1ad3      	subs	r3, r2, r3
 800a010:	2b00      	cmp	r3, #0
 800a012:	da54      	bge.n	800a0be <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a014:	4b5e      	ldr	r3, [pc, #376]	; (800a190 <tcp_receive+0x5dc>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	b29a      	uxth	r2, r3
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a01e:	b29b      	uxth	r3, r3
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	b29b      	uxth	r3, r3
 800a024:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a028:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a032:	10db      	asrs	r3, r3, #3
 800a034:	b21b      	sxth	r3, r3
 800a036:	b29b      	uxth	r3, r3
 800a038:	1ad3      	subs	r3, r2, r3
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a046:	b29a      	uxth	r2, r3
 800a048:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a04c:	4413      	add	r3, r2
 800a04e:	b29b      	uxth	r3, r3
 800a050:	b21a      	sxth	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800a056:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	da05      	bge.n	800a06a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800a05e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a062:	425b      	negs	r3, r3
 800a064:	b29b      	uxth	r3, r3
 800a066:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a06a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a074:	109b      	asrs	r3, r3, #2
 800a076:	b21b      	sxth	r3, r3
 800a078:	b29b      	uxth	r3, r3
 800a07a:	1ad3      	subs	r3, r2, r3
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a088:	b29a      	uxth	r2, r3
 800a08a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a08e:	4413      	add	r3, r2
 800a090:	b29b      	uxth	r3, r3
 800a092:	b21a      	sxth	r2, r3
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a09e:	10db      	asrs	r3, r3, #3
 800a0a0:	b21b      	sxth	r3, r3
 800a0a2:	b29a      	uxth	r2, r3
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	4413      	add	r3, r2
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	b21a      	sxth	r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a0be:	4b35      	ldr	r3, [pc, #212]	; (800a194 <tcp_receive+0x5e0>)
 800a0c0:	881b      	ldrh	r3, [r3, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	f000 84e1 	beq.w	800aa8a <tcp_receive+0xed6>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	7d1b      	ldrb	r3, [r3, #20]
 800a0cc:	2b06      	cmp	r3, #6
 800a0ce:	f200 84dc 	bhi.w	800aa8a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0d6:	4b30      	ldr	r3, [pc, #192]	; (800a198 <tcp_receive+0x5e4>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	1ad3      	subs	r3, r2, r3
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	f2c0 808e 	blt.w	800a200 <tcp_receive+0x64c>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0e8:	4b2a      	ldr	r3, [pc, #168]	; (800a194 <tcp_receive+0x5e0>)
 800a0ea:	881b      	ldrh	r3, [r3, #0]
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	4b2a      	ldr	r3, [pc, #168]	; (800a198 <tcp_receive+0x5e4>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	440b      	add	r3, r1
 800a0f4:	1ad3      	subs	r3, r2, r3
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	f300 8081 	bgt.w	800a200 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a0fe:	4b27      	ldr	r3, [pc, #156]	; (800a19c <tcp_receive+0x5e8>)
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a108:	4b23      	ldr	r3, [pc, #140]	; (800a198 <tcp_receive+0x5e4>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	1ad3      	subs	r3, r2, r3
 800a10e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a110:	4b22      	ldr	r3, [pc, #136]	; (800a19c <tcp_receive+0x5e8>)
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d106      	bne.n	800a126 <tcp_receive+0x572>
 800a118:	4b21      	ldr	r3, [pc, #132]	; (800a1a0 <tcp_receive+0x5ec>)
 800a11a:	f240 5294 	movw	r2, #1428	; 0x594
 800a11e:	4921      	ldr	r1, [pc, #132]	; (800a1a4 <tcp_receive+0x5f0>)
 800a120:	4821      	ldr	r0, [pc, #132]	; (800a1a8 <tcp_receive+0x5f4>)
 800a122:	f005 facd 	bl	800f6c0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a128:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d906      	bls.n	800a13e <tcp_receive+0x58a>
 800a130:	4b1b      	ldr	r3, [pc, #108]	; (800a1a0 <tcp_receive+0x5ec>)
 800a132:	f240 5295 	movw	r2, #1429	; 0x595
 800a136:	491d      	ldr	r1, [pc, #116]	; (800a1ac <tcp_receive+0x5f8>)
 800a138:	481b      	ldr	r0, [pc, #108]	; (800a1a8 <tcp_receive+0x5f4>)
 800a13a:	f005 fac1 	bl	800f6c0 <iprintf>
      off = (u16_t)off32;
 800a13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a140:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a144:	4b15      	ldr	r3, [pc, #84]	; (800a19c <tcp_receive+0x5e8>)
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	891b      	ldrh	r3, [r3, #8]
 800a14a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a14e:	429a      	cmp	r2, r3
 800a150:	d906      	bls.n	800a160 <tcp_receive+0x5ac>
 800a152:	4b13      	ldr	r3, [pc, #76]	; (800a1a0 <tcp_receive+0x5ec>)
 800a154:	f240 5297 	movw	r2, #1431	; 0x597
 800a158:	4915      	ldr	r1, [pc, #84]	; (800a1b0 <tcp_receive+0x5fc>)
 800a15a:	4813      	ldr	r0, [pc, #76]	; (800a1a8 <tcp_receive+0x5f4>)
 800a15c:	f005 fab0 	bl	800f6c0 <iprintf>
      inseg.len -= off;
 800a160:	4b0e      	ldr	r3, [pc, #56]	; (800a19c <tcp_receive+0x5e8>)
 800a162:	891a      	ldrh	r2, [r3, #8]
 800a164:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a168:	1ad3      	subs	r3, r2, r3
 800a16a:	b29a      	uxth	r2, r3
 800a16c:	4b0b      	ldr	r3, [pc, #44]	; (800a19c <tcp_receive+0x5e8>)
 800a16e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a170:	4b0a      	ldr	r3, [pc, #40]	; (800a19c <tcp_receive+0x5e8>)
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	891a      	ldrh	r2, [r3, #8]
 800a176:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a17a:	1ad3      	subs	r3, r2, r3
 800a17c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800a17e:	e029      	b.n	800a1d4 <tcp_receive+0x620>
 800a180:	08012118 	.word	0x08012118
 800a184:	08012120 	.word	0x08012120
 800a188:	200000fc 	.word	0x200000fc
 800a18c:	200000f8 	.word	0x200000f8
 800a190:	2000693c 	.word	0x2000693c
 800a194:	200000fe 	.word	0x200000fe
 800a198:	200000f4 	.word	0x200000f4
 800a19c:	200000d4 	.word	0x200000d4
 800a1a0:	08011db0 	.word	0x08011db0
 800a1a4:	08012128 	.word	0x08012128
 800a1a8:	08011dfc 	.word	0x08011dfc
 800a1ac:	08012138 	.word	0x08012138
 800a1b0:	08012148 	.word	0x08012148
        off -= p->len;
 800a1b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1b6:	895b      	ldrh	r3, [r3, #10]
 800a1b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a1bc:	1ad3      	subs	r3, r2, r3
 800a1be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a1c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1c4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a1c6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a1c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a1ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800a1d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1d6:	895b      	ldrh	r3, [r3, #10]
 800a1d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d8e9      	bhi.n	800a1b4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a1e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a1e8:	f7fc f83e 	bl	8006268 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f0:	4a91      	ldr	r2, [pc, #580]	; (800a438 <tcp_receive+0x884>)
 800a1f2:	6013      	str	r3, [r2, #0]
 800a1f4:	4b91      	ldr	r3, [pc, #580]	; (800a43c <tcp_receive+0x888>)
 800a1f6:	68db      	ldr	r3, [r3, #12]
 800a1f8:	4a8f      	ldr	r2, [pc, #572]	; (800a438 <tcp_receive+0x884>)
 800a1fa:	6812      	ldr	r2, [r2, #0]
 800a1fc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a1fe:	e00d      	b.n	800a21c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a200:	4b8d      	ldr	r3, [pc, #564]	; (800a438 <tcp_receive+0x884>)
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a208:	1ad3      	subs	r3, r2, r3
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	da06      	bge.n	800a21c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	8b5b      	ldrh	r3, [r3, #26]
 800a212:	f043 0302 	orr.w	r3, r3, #2
 800a216:	b29a      	uxth	r2, r3
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a21c:	4b86      	ldr	r3, [pc, #536]	; (800a438 <tcp_receive+0x884>)
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a224:	1ad3      	subs	r3, r2, r3
 800a226:	2b00      	cmp	r3, #0
 800a228:	f2c0 842a 	blt.w	800aa80 <tcp_receive+0xecc>
 800a22c:	4b82      	ldr	r3, [pc, #520]	; (800a438 <tcp_receive+0x884>)
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a234:	6879      	ldr	r1, [r7, #4]
 800a236:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a238:	440b      	add	r3, r1
 800a23a:	1ad3      	subs	r3, r2, r3
 800a23c:	3301      	adds	r3, #1
 800a23e:	2b00      	cmp	r3, #0
 800a240:	f300 841e 	bgt.w	800aa80 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a248:	4b7b      	ldr	r3, [pc, #492]	; (800a438 <tcp_receive+0x884>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	f040 829a 	bne.w	800a786 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a252:	4b7a      	ldr	r3, [pc, #488]	; (800a43c <tcp_receive+0x888>)
 800a254:	891c      	ldrh	r4, [r3, #8]
 800a256:	4b79      	ldr	r3, [pc, #484]	; (800a43c <tcp_receive+0x888>)
 800a258:	68db      	ldr	r3, [r3, #12]
 800a25a:	899b      	ldrh	r3, [r3, #12]
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	4618      	mov	r0, r3
 800a260:	f7fa fdd4 	bl	8004e0c <lwip_htons>
 800a264:	4603      	mov	r3, r0
 800a266:	b2db      	uxtb	r3, r3
 800a268:	f003 0303 	and.w	r3, r3, #3
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d001      	beq.n	800a274 <tcp_receive+0x6c0>
 800a270:	2301      	movs	r3, #1
 800a272:	e000      	b.n	800a276 <tcp_receive+0x6c2>
 800a274:	2300      	movs	r3, #0
 800a276:	4423      	add	r3, r4
 800a278:	b29a      	uxth	r2, r3
 800a27a:	4b71      	ldr	r3, [pc, #452]	; (800a440 <tcp_receive+0x88c>)
 800a27c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a282:	4b6f      	ldr	r3, [pc, #444]	; (800a440 <tcp_receive+0x88c>)
 800a284:	881b      	ldrh	r3, [r3, #0]
 800a286:	429a      	cmp	r2, r3
 800a288:	d275      	bcs.n	800a376 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a28a:	4b6c      	ldr	r3, [pc, #432]	; (800a43c <tcp_receive+0x888>)
 800a28c:	68db      	ldr	r3, [r3, #12]
 800a28e:	899b      	ldrh	r3, [r3, #12]
 800a290:	b29b      	uxth	r3, r3
 800a292:	4618      	mov	r0, r3
 800a294:	f7fa fdba 	bl	8004e0c <lwip_htons>
 800a298:	4603      	mov	r3, r0
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	f003 0301 	and.w	r3, r3, #1
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d01f      	beq.n	800a2e4 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a2a4:	4b65      	ldr	r3, [pc, #404]	; (800a43c <tcp_receive+0x888>)
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	899b      	ldrh	r3, [r3, #12]
 800a2aa:	b29b      	uxth	r3, r3
 800a2ac:	b21b      	sxth	r3, r3
 800a2ae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a2b2:	b21c      	sxth	r4, r3
 800a2b4:	4b61      	ldr	r3, [pc, #388]	; (800a43c <tcp_receive+0x888>)
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	899b      	ldrh	r3, [r3, #12]
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f7fa fda5 	bl	8004e0c <lwip_htons>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7fa fd9c 	bl	8004e0c <lwip_htons>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	b21b      	sxth	r3, r3
 800a2d8:	4323      	orrs	r3, r4
 800a2da:	b21a      	sxth	r2, r3
 800a2dc:	4b57      	ldr	r3, [pc, #348]	; (800a43c <tcp_receive+0x888>)
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	b292      	uxth	r2, r2
 800a2e2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a2e8:	4b54      	ldr	r3, [pc, #336]	; (800a43c <tcp_receive+0x888>)
 800a2ea:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a2ec:	4b53      	ldr	r3, [pc, #332]	; (800a43c <tcp_receive+0x888>)
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	899b      	ldrh	r3, [r3, #12]
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f7fa fd89 	bl	8004e0c <lwip_htons>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	f003 0302 	and.w	r3, r3, #2
 800a302:	2b00      	cmp	r3, #0
 800a304:	d005      	beq.n	800a312 <tcp_receive+0x75e>
            inseg.len -= 1;
 800a306:	4b4d      	ldr	r3, [pc, #308]	; (800a43c <tcp_receive+0x888>)
 800a308:	891b      	ldrh	r3, [r3, #8]
 800a30a:	3b01      	subs	r3, #1
 800a30c:	b29a      	uxth	r2, r3
 800a30e:	4b4b      	ldr	r3, [pc, #300]	; (800a43c <tcp_receive+0x888>)
 800a310:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a312:	4b4a      	ldr	r3, [pc, #296]	; (800a43c <tcp_receive+0x888>)
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	4a49      	ldr	r2, [pc, #292]	; (800a43c <tcp_receive+0x888>)
 800a318:	8912      	ldrh	r2, [r2, #8]
 800a31a:	4611      	mov	r1, r2
 800a31c:	4618      	mov	r0, r3
 800a31e:	f7fb fea3 	bl	8006068 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a322:	4b46      	ldr	r3, [pc, #280]	; (800a43c <tcp_receive+0x888>)
 800a324:	891c      	ldrh	r4, [r3, #8]
 800a326:	4b45      	ldr	r3, [pc, #276]	; (800a43c <tcp_receive+0x888>)
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	899b      	ldrh	r3, [r3, #12]
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	4618      	mov	r0, r3
 800a330:	f7fa fd6c 	bl	8004e0c <lwip_htons>
 800a334:	4603      	mov	r3, r0
 800a336:	b2db      	uxtb	r3, r3
 800a338:	f003 0303 	and.w	r3, r3, #3
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d001      	beq.n	800a344 <tcp_receive+0x790>
 800a340:	2301      	movs	r3, #1
 800a342:	e000      	b.n	800a346 <tcp_receive+0x792>
 800a344:	2300      	movs	r3, #0
 800a346:	4423      	add	r3, r4
 800a348:	b29a      	uxth	r2, r3
 800a34a:	4b3d      	ldr	r3, [pc, #244]	; (800a440 <tcp_receive+0x88c>)
 800a34c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a34e:	4b3c      	ldr	r3, [pc, #240]	; (800a440 <tcp_receive+0x88c>)
 800a350:	881b      	ldrh	r3, [r3, #0]
 800a352:	461a      	mov	r2, r3
 800a354:	4b38      	ldr	r3, [pc, #224]	; (800a438 <tcp_receive+0x884>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	441a      	add	r2, r3
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a35e:	6879      	ldr	r1, [r7, #4]
 800a360:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a362:	440b      	add	r3, r1
 800a364:	429a      	cmp	r2, r3
 800a366:	d006      	beq.n	800a376 <tcp_receive+0x7c2>
 800a368:	4b36      	ldr	r3, [pc, #216]	; (800a444 <tcp_receive+0x890>)
 800a36a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800a36e:	4936      	ldr	r1, [pc, #216]	; (800a448 <tcp_receive+0x894>)
 800a370:	4836      	ldr	r0, [pc, #216]	; (800a44c <tcp_receive+0x898>)
 800a372:	f005 f9a5 	bl	800f6c0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	f000 80e7 	beq.w	800a54e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a380:	4b2e      	ldr	r3, [pc, #184]	; (800a43c <tcp_receive+0x888>)
 800a382:	68db      	ldr	r3, [r3, #12]
 800a384:	899b      	ldrh	r3, [r3, #12]
 800a386:	b29b      	uxth	r3, r3
 800a388:	4618      	mov	r0, r3
 800a38a:	f7fa fd3f 	bl	8004e0c <lwip_htons>
 800a38e:	4603      	mov	r3, r0
 800a390:	b2db      	uxtb	r3, r3
 800a392:	f003 0301 	and.w	r3, r3, #1
 800a396:	2b00      	cmp	r3, #0
 800a398:	d010      	beq.n	800a3bc <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a39a:	e00a      	b.n	800a3b2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3a0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a3ac:	68f8      	ldr	r0, [r7, #12]
 800a3ae:	f7fd fcb0 	bl	8007d12 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d1f0      	bne.n	800a39c <tcp_receive+0x7e8>
 800a3ba:	e0c8      	b.n	800a54e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3c0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a3c2:	e052      	b.n	800a46a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a3c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	899b      	ldrh	r3, [r3, #12]
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7fa fd1d 	bl	8004e0c <lwip_htons>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	f003 0301 	and.w	r3, r3, #1
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d03d      	beq.n	800a45a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a3de:	4b17      	ldr	r3, [pc, #92]	; (800a43c <tcp_receive+0x888>)
 800a3e0:	68db      	ldr	r3, [r3, #12]
 800a3e2:	899b      	ldrh	r3, [r3, #12]
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f7fa fd10 	bl	8004e0c <lwip_htons>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d130      	bne.n	800a45a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a3f8:	4b10      	ldr	r3, [pc, #64]	; (800a43c <tcp_receive+0x888>)
 800a3fa:	68db      	ldr	r3, [r3, #12]
 800a3fc:	899b      	ldrh	r3, [r3, #12]
 800a3fe:	b29c      	uxth	r4, r3
 800a400:	2001      	movs	r0, #1
 800a402:	f7fa fd03 	bl	8004e0c <lwip_htons>
 800a406:	4603      	mov	r3, r0
 800a408:	461a      	mov	r2, r3
 800a40a:	4b0c      	ldr	r3, [pc, #48]	; (800a43c <tcp_receive+0x888>)
 800a40c:	68db      	ldr	r3, [r3, #12]
 800a40e:	4322      	orrs	r2, r4
 800a410:	b292      	uxth	r2, r2
 800a412:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a414:	4b09      	ldr	r3, [pc, #36]	; (800a43c <tcp_receive+0x888>)
 800a416:	891c      	ldrh	r4, [r3, #8]
 800a418:	4b08      	ldr	r3, [pc, #32]	; (800a43c <tcp_receive+0x888>)
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	899b      	ldrh	r3, [r3, #12]
 800a41e:	b29b      	uxth	r3, r3
 800a420:	4618      	mov	r0, r3
 800a422:	f7fa fcf3 	bl	8004e0c <lwip_htons>
 800a426:	4603      	mov	r3, r0
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	f003 0303 	and.w	r3, r3, #3
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d00e      	beq.n	800a450 <tcp_receive+0x89c>
 800a432:	2301      	movs	r3, #1
 800a434:	e00d      	b.n	800a452 <tcp_receive+0x89e>
 800a436:	bf00      	nop
 800a438:	200000f4 	.word	0x200000f4
 800a43c:	200000d4 	.word	0x200000d4
 800a440:	200000fe 	.word	0x200000fe
 800a444:	08011db0 	.word	0x08011db0
 800a448:	08012158 	.word	0x08012158
 800a44c:	08011dfc 	.word	0x08011dfc
 800a450:	2300      	movs	r3, #0
 800a452:	4423      	add	r3, r4
 800a454:	b29a      	uxth	r2, r3
 800a456:	4b98      	ldr	r3, [pc, #608]	; (800a6b8 <tcp_receive+0xb04>)
 800a458:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a45a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a45c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a45e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800a464:	6938      	ldr	r0, [r7, #16]
 800a466:	f7fd fc54 	bl	8007d12 <tcp_seg_free>
            while (next &&
 800a46a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d00e      	beq.n	800a48e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a470:	4b91      	ldr	r3, [pc, #580]	; (800a6b8 <tcp_receive+0xb04>)
 800a472:	881b      	ldrh	r3, [r3, #0]
 800a474:	461a      	mov	r2, r3
 800a476:	4b91      	ldr	r3, [pc, #580]	; (800a6bc <tcp_receive+0xb08>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	441a      	add	r2, r3
 800a47c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a484:	8909      	ldrh	r1, [r1, #8]
 800a486:	440b      	add	r3, r1
 800a488:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	da9a      	bge.n	800a3c4 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a48e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a490:	2b00      	cmp	r3, #0
 800a492:	d059      	beq.n	800a548 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800a494:	4b88      	ldr	r3, [pc, #544]	; (800a6b8 <tcp_receive+0xb04>)
 800a496:	881b      	ldrh	r3, [r3, #0]
 800a498:	461a      	mov	r2, r3
 800a49a:	4b88      	ldr	r3, [pc, #544]	; (800a6bc <tcp_receive+0xb08>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	441a      	add	r2, r3
 800a4a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	dd4d      	ble.n	800a548 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a4ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	b29a      	uxth	r2, r3
 800a4b4:	4b81      	ldr	r3, [pc, #516]	; (800a6bc <tcp_receive+0xb08>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	1ad3      	subs	r3, r2, r3
 800a4bc:	b29a      	uxth	r2, r3
 800a4be:	4b80      	ldr	r3, [pc, #512]	; (800a6c0 <tcp_receive+0xb0c>)
 800a4c0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a4c2:	4b7f      	ldr	r3, [pc, #508]	; (800a6c0 <tcp_receive+0xb0c>)
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	899b      	ldrh	r3, [r3, #12]
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f7fa fc9e 	bl	8004e0c <lwip_htons>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	f003 0302 	and.w	r3, r3, #2
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d005      	beq.n	800a4e8 <tcp_receive+0x934>
                inseg.len -= 1;
 800a4dc:	4b78      	ldr	r3, [pc, #480]	; (800a6c0 <tcp_receive+0xb0c>)
 800a4de:	891b      	ldrh	r3, [r3, #8]
 800a4e0:	3b01      	subs	r3, #1
 800a4e2:	b29a      	uxth	r2, r3
 800a4e4:	4b76      	ldr	r3, [pc, #472]	; (800a6c0 <tcp_receive+0xb0c>)
 800a4e6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a4e8:	4b75      	ldr	r3, [pc, #468]	; (800a6c0 <tcp_receive+0xb0c>)
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	4a74      	ldr	r2, [pc, #464]	; (800a6c0 <tcp_receive+0xb0c>)
 800a4ee:	8912      	ldrh	r2, [r2, #8]
 800a4f0:	4611      	mov	r1, r2
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7fb fdb8 	bl	8006068 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a4f8:	4b71      	ldr	r3, [pc, #452]	; (800a6c0 <tcp_receive+0xb0c>)
 800a4fa:	891c      	ldrh	r4, [r3, #8]
 800a4fc:	4b70      	ldr	r3, [pc, #448]	; (800a6c0 <tcp_receive+0xb0c>)
 800a4fe:	68db      	ldr	r3, [r3, #12]
 800a500:	899b      	ldrh	r3, [r3, #12]
 800a502:	b29b      	uxth	r3, r3
 800a504:	4618      	mov	r0, r3
 800a506:	f7fa fc81 	bl	8004e0c <lwip_htons>
 800a50a:	4603      	mov	r3, r0
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	f003 0303 	and.w	r3, r3, #3
 800a512:	2b00      	cmp	r3, #0
 800a514:	d001      	beq.n	800a51a <tcp_receive+0x966>
 800a516:	2301      	movs	r3, #1
 800a518:	e000      	b.n	800a51c <tcp_receive+0x968>
 800a51a:	2300      	movs	r3, #0
 800a51c:	4423      	add	r3, r4
 800a51e:	b29a      	uxth	r2, r3
 800a520:	4b65      	ldr	r3, [pc, #404]	; (800a6b8 <tcp_receive+0xb04>)
 800a522:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a524:	4b64      	ldr	r3, [pc, #400]	; (800a6b8 <tcp_receive+0xb04>)
 800a526:	881b      	ldrh	r3, [r3, #0]
 800a528:	461a      	mov	r2, r3
 800a52a:	4b64      	ldr	r3, [pc, #400]	; (800a6bc <tcp_receive+0xb08>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	441a      	add	r2, r3
 800a530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	429a      	cmp	r2, r3
 800a538:	d006      	beq.n	800a548 <tcp_receive+0x994>
 800a53a:	4b62      	ldr	r3, [pc, #392]	; (800a6c4 <tcp_receive+0xb10>)
 800a53c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800a540:	4961      	ldr	r1, [pc, #388]	; (800a6c8 <tcp_receive+0xb14>)
 800a542:	4862      	ldr	r0, [pc, #392]	; (800a6cc <tcp_receive+0xb18>)
 800a544:	f005 f8bc 	bl	800f6c0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a54c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a54e:	4b5a      	ldr	r3, [pc, #360]	; (800a6b8 <tcp_receive+0xb04>)
 800a550:	881b      	ldrh	r3, [r3, #0]
 800a552:	461a      	mov	r2, r3
 800a554:	4b59      	ldr	r3, [pc, #356]	; (800a6bc <tcp_receive+0xb08>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	441a      	add	r2, r3
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a562:	4b55      	ldr	r3, [pc, #340]	; (800a6b8 <tcp_receive+0xb04>)
 800a564:	881b      	ldrh	r3, [r3, #0]
 800a566:	429a      	cmp	r2, r3
 800a568:	d206      	bcs.n	800a578 <tcp_receive+0x9c4>
 800a56a:	4b56      	ldr	r3, [pc, #344]	; (800a6c4 <tcp_receive+0xb10>)
 800a56c:	f240 6207 	movw	r2, #1543	; 0x607
 800a570:	4957      	ldr	r1, [pc, #348]	; (800a6d0 <tcp_receive+0xb1c>)
 800a572:	4856      	ldr	r0, [pc, #344]	; (800a6cc <tcp_receive+0xb18>)
 800a574:	f005 f8a4 	bl	800f6c0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a57c:	4b4e      	ldr	r3, [pc, #312]	; (800a6b8 <tcp_receive+0xb04>)
 800a57e:	881b      	ldrh	r3, [r3, #0]
 800a580:	1ad3      	subs	r3, r2, r3
 800a582:	b29a      	uxth	r2, r3
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f7fc fe9d 	bl	80072c8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a58e:	4b4c      	ldr	r3, [pc, #304]	; (800a6c0 <tcp_receive+0xb0c>)
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	891b      	ldrh	r3, [r3, #8]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d006      	beq.n	800a5a6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800a598:	4b49      	ldr	r3, [pc, #292]	; (800a6c0 <tcp_receive+0xb0c>)
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	4a4d      	ldr	r2, [pc, #308]	; (800a6d4 <tcp_receive+0xb20>)
 800a59e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a5a0:	4b47      	ldr	r3, [pc, #284]	; (800a6c0 <tcp_receive+0xb0c>)
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a5a6:	4b46      	ldr	r3, [pc, #280]	; (800a6c0 <tcp_receive+0xb0c>)
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	899b      	ldrh	r3, [r3, #12]
 800a5ac:	b29b      	uxth	r3, r3
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7fa fc2c 	bl	8004e0c <lwip_htons>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	b2db      	uxtb	r3, r3
 800a5b8:	f003 0301 	and.w	r3, r3, #1
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	f000 80b8 	beq.w	800a732 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a5c2:	4b45      	ldr	r3, [pc, #276]	; (800a6d8 <tcp_receive+0xb24>)
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	f043 0320 	orr.w	r3, r3, #32
 800a5ca:	b2da      	uxtb	r2, r3
 800a5cc:	4b42      	ldr	r3, [pc, #264]	; (800a6d8 <tcp_receive+0xb24>)
 800a5ce:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a5d0:	e0af      	b.n	800a732 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5d6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5dc:	68db      	ldr	r3, [r3, #12]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	4a36      	ldr	r2, [pc, #216]	; (800a6bc <tcp_receive+0xb08>)
 800a5e2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	891b      	ldrh	r3, [r3, #8]
 800a5e8:	461c      	mov	r4, r3
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	68db      	ldr	r3, [r3, #12]
 800a5ee:	899b      	ldrh	r3, [r3, #12]
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7fa fc0a 	bl	8004e0c <lwip_htons>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	f003 0303 	and.w	r3, r3, #3
 800a600:	2b00      	cmp	r3, #0
 800a602:	d001      	beq.n	800a608 <tcp_receive+0xa54>
 800a604:	2301      	movs	r3, #1
 800a606:	e000      	b.n	800a60a <tcp_receive+0xa56>
 800a608:	2300      	movs	r3, #0
 800a60a:	191a      	adds	r2, r3, r4
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a610:	441a      	add	r2, r3
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a61a:	461c      	mov	r4, r3
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	891b      	ldrh	r3, [r3, #8]
 800a620:	461d      	mov	r5, r3
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	68db      	ldr	r3, [r3, #12]
 800a626:	899b      	ldrh	r3, [r3, #12]
 800a628:	b29b      	uxth	r3, r3
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7fa fbee 	bl	8004e0c <lwip_htons>
 800a630:	4603      	mov	r3, r0
 800a632:	b2db      	uxtb	r3, r3
 800a634:	f003 0303 	and.w	r3, r3, #3
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d001      	beq.n	800a640 <tcp_receive+0xa8c>
 800a63c:	2301      	movs	r3, #1
 800a63e:	e000      	b.n	800a642 <tcp_receive+0xa8e>
 800a640:	2300      	movs	r3, #0
 800a642:	442b      	add	r3, r5
 800a644:	429c      	cmp	r4, r3
 800a646:	d206      	bcs.n	800a656 <tcp_receive+0xaa2>
 800a648:	4b1e      	ldr	r3, [pc, #120]	; (800a6c4 <tcp_receive+0xb10>)
 800a64a:	f240 622b 	movw	r2, #1579	; 0x62b
 800a64e:	4923      	ldr	r1, [pc, #140]	; (800a6dc <tcp_receive+0xb28>)
 800a650:	481e      	ldr	r0, [pc, #120]	; (800a6cc <tcp_receive+0xb18>)
 800a652:	f005 f835 	bl	800f6c0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	891b      	ldrh	r3, [r3, #8]
 800a65a:	461c      	mov	r4, r3
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	899b      	ldrh	r3, [r3, #12]
 800a662:	b29b      	uxth	r3, r3
 800a664:	4618      	mov	r0, r3
 800a666:	f7fa fbd1 	bl	8004e0c <lwip_htons>
 800a66a:	4603      	mov	r3, r0
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	f003 0303 	and.w	r3, r3, #3
 800a672:	2b00      	cmp	r3, #0
 800a674:	d001      	beq.n	800a67a <tcp_receive+0xac6>
 800a676:	2301      	movs	r3, #1
 800a678:	e000      	b.n	800a67c <tcp_receive+0xac8>
 800a67a:	2300      	movs	r3, #0
 800a67c:	1919      	adds	r1, r3, r4
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a682:	b28b      	uxth	r3, r1
 800a684:	1ad3      	subs	r3, r2, r3
 800a686:	b29a      	uxth	r2, r3
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f7fc fe1b 	bl	80072c8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	891b      	ldrh	r3, [r3, #8]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d028      	beq.n	800a6ee <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a69c:	4b0d      	ldr	r3, [pc, #52]	; (800a6d4 <tcp_receive+0xb20>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d01d      	beq.n	800a6e0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800a6a4:	4b0b      	ldr	r3, [pc, #44]	; (800a6d4 <tcp_receive+0xb20>)
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	4610      	mov	r0, r2
 800a6b0:	f7fb ff22 	bl	80064f8 <pbuf_cat>
 800a6b4:	e018      	b.n	800a6e8 <tcp_receive+0xb34>
 800a6b6:	bf00      	nop
 800a6b8:	200000fe 	.word	0x200000fe
 800a6bc:	200000f4 	.word	0x200000f4
 800a6c0:	200000d4 	.word	0x200000d4
 800a6c4:	08011db0 	.word	0x08011db0
 800a6c8:	08012190 	.word	0x08012190
 800a6cc:	08011dfc 	.word	0x08011dfc
 800a6d0:	080121cc 	.word	0x080121cc
 800a6d4:	20000104 	.word	0x20000104
 800a6d8:	20000101 	.word	0x20000101
 800a6dc:	080121ec 	.word	0x080121ec
            } else {
              recv_data = cseg->p;
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	4a70      	ldr	r2, [pc, #448]	; (800a8a8 <tcp_receive+0xcf4>)
 800a6e6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	68db      	ldr	r3, [r3, #12]
 800a6f2:	899b      	ldrh	r3, [r3, #12]
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f7fa fb88 	bl	8004e0c <lwip_htons>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	f003 0301 	and.w	r3, r3, #1
 800a704:	2b00      	cmp	r3, #0
 800a706:	d00d      	beq.n	800a724 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a708:	4b68      	ldr	r3, [pc, #416]	; (800a8ac <tcp_receive+0xcf8>)
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	f043 0320 	orr.w	r3, r3, #32
 800a710:	b2da      	uxtb	r2, r3
 800a712:	4b66      	ldr	r3, [pc, #408]	; (800a8ac <tcp_receive+0xcf8>)
 800a714:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	7d1b      	ldrb	r3, [r3, #20]
 800a71a:	2b04      	cmp	r3, #4
 800a71c:	d102      	bne.n	800a724 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2207      	movs	r2, #7
 800a722:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	681a      	ldr	r2, [r3, #0]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800a72c:	68b8      	ldr	r0, [r7, #8]
 800a72e:	f7fd faf0 	bl	8007d12 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a736:	2b00      	cmp	r3, #0
 800a738:	d008      	beq.n	800a74c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	685a      	ldr	r2, [r3, #4]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800a746:	429a      	cmp	r2, r3
 800a748:	f43f af43 	beq.w	800a5d2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	8b5b      	ldrh	r3, [r3, #26]
 800a750:	f003 0301 	and.w	r3, r3, #1
 800a754:	2b00      	cmp	r3, #0
 800a756:	d00e      	beq.n	800a776 <tcp_receive+0xbc2>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	8b5b      	ldrh	r3, [r3, #26]
 800a75c:	f023 0301 	bic.w	r3, r3, #1
 800a760:	b29a      	uxth	r2, r3
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	835a      	strh	r2, [r3, #26]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	8b5b      	ldrh	r3, [r3, #26]
 800a76a:	f043 0302 	orr.w	r3, r3, #2
 800a76e:	b29a      	uxth	r2, r3
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a774:	e188      	b.n	800aa88 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	8b5b      	ldrh	r3, [r3, #26]
 800a77a:	f043 0301 	orr.w	r3, r3, #1
 800a77e:	b29a      	uxth	r2, r3
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a784:	e180      	b.n	800aa88 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d106      	bne.n	800a79c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a78e:	4848      	ldr	r0, [pc, #288]	; (800a8b0 <tcp_receive+0xcfc>)
 800a790:	f7fd faf6 	bl	8007d80 <tcp_seg_copy>
 800a794:	4602      	mov	r2, r0
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	675a      	str	r2, [r3, #116]	; 0x74
 800a79a:	e16d      	b.n	800aa78 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a79c:	2300      	movs	r3, #0
 800a79e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7a4:	63bb      	str	r3, [r7, #56]	; 0x38
 800a7a6:	e157      	b.n	800aa58 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800a7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	685a      	ldr	r2, [r3, #4]
 800a7ae:	4b41      	ldr	r3, [pc, #260]	; (800a8b4 <tcp_receive+0xd00>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d11d      	bne.n	800a7f2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a7b6:	4b3e      	ldr	r3, [pc, #248]	; (800a8b0 <tcp_receive+0xcfc>)
 800a7b8:	891a      	ldrh	r2, [r3, #8]
 800a7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7bc:	891b      	ldrh	r3, [r3, #8]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	f240 814f 	bls.w	800aa62 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a7c4:	483a      	ldr	r0, [pc, #232]	; (800a8b0 <tcp_receive+0xcfc>)
 800a7c6:	f7fd fadb 	bl	8007d80 <tcp_seg_copy>
 800a7ca:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	f000 8149 	beq.w	800aa66 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800a7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d003      	beq.n	800a7e2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800a7da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7dc:	697a      	ldr	r2, [r7, #20]
 800a7de:	601a      	str	r2, [r3, #0]
 800a7e0:	e002      	b.n	800a7e8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	697a      	ldr	r2, [r7, #20]
 800a7e6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a7e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a7ea:	6978      	ldr	r0, [r7, #20]
 800a7ec:	f7ff f8de 	bl	80099ac <tcp_oos_insert_segment>
                }
                break;
 800a7f0:	e139      	b.n	800aa66 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a7f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d117      	bne.n	800a828 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a7f8:	4b2e      	ldr	r3, [pc, #184]	; (800a8b4 <tcp_receive+0xd00>)
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	1ad3      	subs	r3, r2, r3
 800a804:	2b00      	cmp	r3, #0
 800a806:	da57      	bge.n	800a8b8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a808:	4829      	ldr	r0, [pc, #164]	; (800a8b0 <tcp_receive+0xcfc>)
 800a80a:	f7fd fab9 	bl	8007d80 <tcp_seg_copy>
 800a80e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a810:	69bb      	ldr	r3, [r7, #24]
 800a812:	2b00      	cmp	r3, #0
 800a814:	f000 8129 	beq.w	800aa6a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	69ba      	ldr	r2, [r7, #24]
 800a81c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a81e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a820:	69b8      	ldr	r0, [r7, #24]
 800a822:	f7ff f8c3 	bl	80099ac <tcp_oos_insert_segment>
                  }
                  break;
 800a826:	e120      	b.n	800aa6a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a828:	4b22      	ldr	r3, [pc, #136]	; (800a8b4 <tcp_receive+0xd00>)
 800a82a:	681a      	ldr	r2, [r3, #0]
 800a82c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a82e:	68db      	ldr	r3, [r3, #12]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	1ad3      	subs	r3, r2, r3
 800a834:	3b01      	subs	r3, #1
 800a836:	2b00      	cmp	r3, #0
 800a838:	db3e      	blt.n	800a8b8 <tcp_receive+0xd04>
 800a83a:	4b1e      	ldr	r3, [pc, #120]	; (800a8b4 <tcp_receive+0xd00>)
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	1ad3      	subs	r3, r2, r3
 800a846:	3301      	adds	r3, #1
 800a848:	2b00      	cmp	r3, #0
 800a84a:	dc35      	bgt.n	800a8b8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a84c:	4818      	ldr	r0, [pc, #96]	; (800a8b0 <tcp_receive+0xcfc>)
 800a84e:	f7fd fa97 	bl	8007d80 <tcp_seg_copy>
 800a852:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a854:	69fb      	ldr	r3, [r7, #28]
 800a856:	2b00      	cmp	r3, #0
 800a858:	f000 8109 	beq.w	800aa6e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a85c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a85e:	68db      	ldr	r3, [r3, #12]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a864:	8912      	ldrh	r2, [r2, #8]
 800a866:	441a      	add	r2, r3
 800a868:	4b12      	ldr	r3, [pc, #72]	; (800a8b4 <tcp_receive+0xd00>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	1ad3      	subs	r3, r2, r3
 800a86e:	2b00      	cmp	r3, #0
 800a870:	dd12      	ble.n	800a898 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a872:	4b10      	ldr	r3, [pc, #64]	; (800a8b4 <tcp_receive+0xd00>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	b29a      	uxth	r2, r3
 800a878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	b29b      	uxth	r3, r3
 800a880:	1ad3      	subs	r3, r2, r3
 800a882:	b29a      	uxth	r2, r3
 800a884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a886:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a88a:	685a      	ldr	r2, [r3, #4]
 800a88c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a88e:	891b      	ldrh	r3, [r3, #8]
 800a890:	4619      	mov	r1, r3
 800a892:	4610      	mov	r0, r2
 800a894:	f7fb fbe8 	bl	8006068 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a89a:	69fa      	ldr	r2, [r7, #28]
 800a89c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a89e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a8a0:	69f8      	ldr	r0, [r7, #28]
 800a8a2:	f7ff f883 	bl	80099ac <tcp_oos_insert_segment>
                  }
                  break;
 800a8a6:	e0e2      	b.n	800aa6e <tcp_receive+0xeba>
 800a8a8:	20000104 	.word	0x20000104
 800a8ac:	20000101 	.word	0x20000101
 800a8b0:	200000d4 	.word	0x200000d4
 800a8b4:	200000f4 	.word	0x200000f4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ba:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	f040 80c6 	bne.w	800aa52 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a8c6:	4b80      	ldr	r3, [pc, #512]	; (800aac8 <tcp_receive+0xf14>)
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8cc:	68db      	ldr	r3, [r3, #12]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	f340 80bd 	ble.w	800aa52 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8da:	68db      	ldr	r3, [r3, #12]
 800a8dc:	899b      	ldrh	r3, [r3, #12]
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f7fa fa93 	bl	8004e0c <lwip_htons>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	f003 0301 	and.w	r3, r3, #1
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	f040 80bf 	bne.w	800aa72 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a8f4:	4875      	ldr	r0, [pc, #468]	; (800aacc <tcp_receive+0xf18>)
 800a8f6:	f7fd fa43 	bl	8007d80 <tcp_seg_copy>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8fe:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	f000 80b6 	beq.w	800aa76 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a90c:	68db      	ldr	r3, [r3, #12]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a912:	8912      	ldrh	r2, [r2, #8]
 800a914:	441a      	add	r2, r3
 800a916:	4b6c      	ldr	r3, [pc, #432]	; (800aac8 <tcp_receive+0xf14>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	1ad3      	subs	r3, r2, r3
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	dd12      	ble.n	800a946 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a920:	4b69      	ldr	r3, [pc, #420]	; (800aac8 <tcp_receive+0xf14>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	b29a      	uxth	r2, r3
 800a926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a928:	68db      	ldr	r3, [r3, #12]
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	b29b      	uxth	r3, r3
 800a92e:	1ad3      	subs	r3, r2, r3
 800a930:	b29a      	uxth	r2, r3
 800a932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a934:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a938:	685a      	ldr	r2, [r3, #4]
 800a93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93c:	891b      	ldrh	r3, [r3, #8]
 800a93e:	4619      	mov	r1, r3
 800a940:	4610      	mov	r0, r2
 800a942:	f7fb fb91 	bl	8006068 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a946:	4b62      	ldr	r3, [pc, #392]	; (800aad0 <tcp_receive+0xf1c>)
 800a948:	881b      	ldrh	r3, [r3, #0]
 800a94a:	461a      	mov	r2, r3
 800a94c:	4b5e      	ldr	r3, [pc, #376]	; (800aac8 <tcp_receive+0xf14>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	441a      	add	r2, r3
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a956:	6879      	ldr	r1, [r7, #4]
 800a958:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a95a:	440b      	add	r3, r1
 800a95c:	1ad3      	subs	r3, r2, r3
 800a95e:	2b00      	cmp	r3, #0
 800a960:	f340 8089 	ble.w	800aa76 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	899b      	ldrh	r3, [r3, #12]
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	4618      	mov	r0, r3
 800a970:	f7fa fa4c 	bl	8004e0c <lwip_htons>
 800a974:	4603      	mov	r3, r0
 800a976:	b2db      	uxtb	r3, r3
 800a978:	f003 0301 	and.w	r3, r3, #1
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d022      	beq.n	800a9c6 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	68db      	ldr	r3, [r3, #12]
 800a986:	899b      	ldrh	r3, [r3, #12]
 800a988:	b29b      	uxth	r3, r3
 800a98a:	b21b      	sxth	r3, r3
 800a98c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a990:	b21c      	sxth	r4, r3
 800a992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	899b      	ldrh	r3, [r3, #12]
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7fa fa35 	bl	8004e0c <lwip_htons>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	b29b      	uxth	r3, r3
 800a9a8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a9ac:	b29b      	uxth	r3, r3
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7fa fa2c 	bl	8004e0c <lwip_htons>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	b21b      	sxth	r3, r3
 800a9b8:	4323      	orrs	r3, r4
 800a9ba:	b21a      	sxth	r2, r3
 800a9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	68db      	ldr	r3, [r3, #12]
 800a9c2:	b292      	uxth	r2, r2
 800a9c4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9d0:	4413      	add	r3, r2
 800a9d2:	b299      	uxth	r1, r3
 800a9d4:	4b3c      	ldr	r3, [pc, #240]	; (800aac8 <tcp_receive+0xf14>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	b29a      	uxth	r2, r3
 800a9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	1a8a      	subs	r2, r1, r2
 800a9e0:	b292      	uxth	r2, r2
 800a9e2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	685a      	ldr	r2, [r3, #4]
 800a9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	891b      	ldrh	r3, [r3, #8]
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	4610      	mov	r0, r2
 800a9f4:	f7fb fb38 	bl	8006068 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	891c      	ldrh	r4, [r3, #8]
 800a9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	899b      	ldrh	r3, [r3, #12]
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7fa f9ff 	bl	8004e0c <lwip_htons>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	f003 0303 	and.w	r3, r3, #3
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d001      	beq.n	800aa1e <tcp_receive+0xe6a>
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	e000      	b.n	800aa20 <tcp_receive+0xe6c>
 800aa1e:	2300      	movs	r3, #0
 800aa20:	4423      	add	r3, r4
 800aa22:	b29a      	uxth	r2, r3
 800aa24:	4b2a      	ldr	r3, [pc, #168]	; (800aad0 <tcp_receive+0xf1c>)
 800aa26:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800aa28:	4b29      	ldr	r3, [pc, #164]	; (800aad0 <tcp_receive+0xf1c>)
 800aa2a:	881b      	ldrh	r3, [r3, #0]
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	4b26      	ldr	r3, [pc, #152]	; (800aac8 <tcp_receive+0xf14>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	441a      	add	r2, r3
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa38:	6879      	ldr	r1, [r7, #4]
 800aa3a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800aa3c:	440b      	add	r3, r1
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d019      	beq.n	800aa76 <tcp_receive+0xec2>
 800aa42:	4b24      	ldr	r3, [pc, #144]	; (800aad4 <tcp_receive+0xf20>)
 800aa44:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800aa48:	4923      	ldr	r1, [pc, #140]	; (800aad8 <tcp_receive+0xf24>)
 800aa4a:	4824      	ldr	r0, [pc, #144]	; (800aadc <tcp_receive+0xf28>)
 800aa4c:	f004 fe38 	bl	800f6c0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800aa50:	e011      	b.n	800aa76 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800aa52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	f47f aea4 	bne.w	800a7a8 <tcp_receive+0xbf4>
 800aa60:	e00a      	b.n	800aa78 <tcp_receive+0xec4>
                break;
 800aa62:	bf00      	nop
 800aa64:	e008      	b.n	800aa78 <tcp_receive+0xec4>
                break;
 800aa66:	bf00      	nop
 800aa68:	e006      	b.n	800aa78 <tcp_receive+0xec4>
                  break;
 800aa6a:	bf00      	nop
 800aa6c:	e004      	b.n	800aa78 <tcp_receive+0xec4>
                  break;
 800aa6e:	bf00      	nop
 800aa70:	e002      	b.n	800aa78 <tcp_receive+0xec4>
                  break;
 800aa72:	bf00      	nop
 800aa74:	e000      	b.n	800aa78 <tcp_receive+0xec4>
                break;
 800aa76:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f001 fe8b 	bl	800c794 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800aa7e:	e003      	b.n	800aa88 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f001 fe87 	bl	800c794 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800aa86:	e01a      	b.n	800aabe <tcp_receive+0xf0a>
 800aa88:	e019      	b.n	800aabe <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800aa8a:	4b0f      	ldr	r3, [pc, #60]	; (800aac8 <tcp_receive+0xf14>)
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa92:	1ad3      	subs	r3, r2, r3
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	db0a      	blt.n	800aaae <tcp_receive+0xefa>
 800aa98:	4b0b      	ldr	r3, [pc, #44]	; (800aac8 <tcp_receive+0xf14>)
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa0:	6879      	ldr	r1, [r7, #4]
 800aaa2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800aaa4:	440b      	add	r3, r1
 800aaa6:	1ad3      	subs	r3, r2, r3
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	dd07      	ble.n	800aabe <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	8b5b      	ldrh	r3, [r3, #26]
 800aab2:	f043 0302 	orr.w	r3, r3, #2
 800aab6:	b29a      	uxth	r2, r3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800aabc:	e7ff      	b.n	800aabe <tcp_receive+0xf0a>
 800aabe:	bf00      	nop
 800aac0:	3750      	adds	r7, #80	; 0x50
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bdb0      	pop	{r4, r5, r7, pc}
 800aac6:	bf00      	nop
 800aac8:	200000f4 	.word	0x200000f4
 800aacc:	200000d4 	.word	0x200000d4
 800aad0:	200000fe 	.word	0x200000fe
 800aad4:	08011db0 	.word	0x08011db0
 800aad8:	08012158 	.word	0x08012158
 800aadc:	08011dfc 	.word	0x08011dfc

0800aae0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b083      	sub	sp, #12
 800aae4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800aae6:	4b15      	ldr	r3, [pc, #84]	; (800ab3c <tcp_get_next_optbyte+0x5c>)
 800aae8:	881b      	ldrh	r3, [r3, #0]
 800aaea:	1c5a      	adds	r2, r3, #1
 800aaec:	b291      	uxth	r1, r2
 800aaee:	4a13      	ldr	r2, [pc, #76]	; (800ab3c <tcp_get_next_optbyte+0x5c>)
 800aaf0:	8011      	strh	r1, [r2, #0]
 800aaf2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800aaf4:	4b12      	ldr	r3, [pc, #72]	; (800ab40 <tcp_get_next_optbyte+0x60>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d004      	beq.n	800ab06 <tcp_get_next_optbyte+0x26>
 800aafc:	4b11      	ldr	r3, [pc, #68]	; (800ab44 <tcp_get_next_optbyte+0x64>)
 800aafe:	881b      	ldrh	r3, [r3, #0]
 800ab00:	88fa      	ldrh	r2, [r7, #6]
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d208      	bcs.n	800ab18 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ab06:	4b10      	ldr	r3, [pc, #64]	; (800ab48 <tcp_get_next_optbyte+0x68>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	3314      	adds	r3, #20
 800ab0c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ab0e:	88fb      	ldrh	r3, [r7, #6]
 800ab10:	683a      	ldr	r2, [r7, #0]
 800ab12:	4413      	add	r3, r2
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	e00b      	b.n	800ab30 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ab18:	88fb      	ldrh	r3, [r7, #6]
 800ab1a:	b2da      	uxtb	r2, r3
 800ab1c:	4b09      	ldr	r3, [pc, #36]	; (800ab44 <tcp_get_next_optbyte+0x64>)
 800ab1e:	881b      	ldrh	r3, [r3, #0]
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	1ad3      	subs	r3, r2, r3
 800ab24:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800ab26:	4b06      	ldr	r3, [pc, #24]	; (800ab40 <tcp_get_next_optbyte+0x60>)
 800ab28:	681a      	ldr	r2, [r3, #0]
 800ab2a:	797b      	ldrb	r3, [r7, #5]
 800ab2c:	4413      	add	r3, r2
 800ab2e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	370c      	adds	r7, #12
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr
 800ab3c:	200000f0 	.word	0x200000f0
 800ab40:	200000ec 	.word	0x200000ec
 800ab44:	200000ea 	.word	0x200000ea
 800ab48:	200000e4 	.word	0x200000e4

0800ab4c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d106      	bne.n	800ab68 <tcp_parseopt+0x1c>
 800ab5a:	4b32      	ldr	r3, [pc, #200]	; (800ac24 <tcp_parseopt+0xd8>)
 800ab5c:	f240 727d 	movw	r2, #1917	; 0x77d
 800ab60:	4931      	ldr	r1, [pc, #196]	; (800ac28 <tcp_parseopt+0xdc>)
 800ab62:	4832      	ldr	r0, [pc, #200]	; (800ac2c <tcp_parseopt+0xe0>)
 800ab64:	f004 fdac 	bl	800f6c0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ab68:	4b31      	ldr	r3, [pc, #196]	; (800ac30 <tcp_parseopt+0xe4>)
 800ab6a:	881b      	ldrh	r3, [r3, #0]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d055      	beq.n	800ac1c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ab70:	4b30      	ldr	r3, [pc, #192]	; (800ac34 <tcp_parseopt+0xe8>)
 800ab72:	2200      	movs	r2, #0
 800ab74:	801a      	strh	r2, [r3, #0]
 800ab76:	e045      	b.n	800ac04 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800ab78:	f7ff ffb2 	bl	800aae0 <tcp_get_next_optbyte>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800ab80:	7bfb      	ldrb	r3, [r7, #15]
 800ab82:	2b02      	cmp	r3, #2
 800ab84:	d006      	beq.n	800ab94 <tcp_parseopt+0x48>
 800ab86:	2b02      	cmp	r3, #2
 800ab88:	dc2b      	bgt.n	800abe2 <tcp_parseopt+0x96>
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d041      	beq.n	800ac12 <tcp_parseopt+0xc6>
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d127      	bne.n	800abe2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800ab92:	e037      	b.n	800ac04 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ab94:	f7ff ffa4 	bl	800aae0 <tcp_get_next_optbyte>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	2b04      	cmp	r3, #4
 800ab9c:	d13b      	bne.n	800ac16 <tcp_parseopt+0xca>
 800ab9e:	4b25      	ldr	r3, [pc, #148]	; (800ac34 <tcp_parseopt+0xe8>)
 800aba0:	881b      	ldrh	r3, [r3, #0]
 800aba2:	3301      	adds	r3, #1
 800aba4:	4a22      	ldr	r2, [pc, #136]	; (800ac30 <tcp_parseopt+0xe4>)
 800aba6:	8812      	ldrh	r2, [r2, #0]
 800aba8:	4293      	cmp	r3, r2
 800abaa:	da34      	bge.n	800ac16 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800abac:	f7ff ff98 	bl	800aae0 <tcp_get_next_optbyte>
 800abb0:	4603      	mov	r3, r0
 800abb2:	b29b      	uxth	r3, r3
 800abb4:	021b      	lsls	r3, r3, #8
 800abb6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800abb8:	f7ff ff92 	bl	800aae0 <tcp_get_next_optbyte>
 800abbc:	4603      	mov	r3, r0
 800abbe:	b29a      	uxth	r2, r3
 800abc0:	89bb      	ldrh	r3, [r7, #12]
 800abc2:	4313      	orrs	r3, r2
 800abc4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800abc6:	89bb      	ldrh	r3, [r7, #12]
 800abc8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800abcc:	d804      	bhi.n	800abd8 <tcp_parseopt+0x8c>
 800abce:	89bb      	ldrh	r3, [r7, #12]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d001      	beq.n	800abd8 <tcp_parseopt+0x8c>
 800abd4:	89ba      	ldrh	r2, [r7, #12]
 800abd6:	e001      	b.n	800abdc <tcp_parseopt+0x90>
 800abd8:	f44f 7206 	mov.w	r2, #536	; 0x218
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800abe0:	e010      	b.n	800ac04 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800abe2:	f7ff ff7d 	bl	800aae0 <tcp_get_next_optbyte>
 800abe6:	4603      	mov	r3, r0
 800abe8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800abea:	7afb      	ldrb	r3, [r7, #11]
 800abec:	2b01      	cmp	r3, #1
 800abee:	d914      	bls.n	800ac1a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800abf0:	7afb      	ldrb	r3, [r7, #11]
 800abf2:	b29a      	uxth	r2, r3
 800abf4:	4b0f      	ldr	r3, [pc, #60]	; (800ac34 <tcp_parseopt+0xe8>)
 800abf6:	881b      	ldrh	r3, [r3, #0]
 800abf8:	4413      	add	r3, r2
 800abfa:	b29b      	uxth	r3, r3
 800abfc:	3b02      	subs	r3, #2
 800abfe:	b29a      	uxth	r2, r3
 800ac00:	4b0c      	ldr	r3, [pc, #48]	; (800ac34 <tcp_parseopt+0xe8>)
 800ac02:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ac04:	4b0b      	ldr	r3, [pc, #44]	; (800ac34 <tcp_parseopt+0xe8>)
 800ac06:	881a      	ldrh	r2, [r3, #0]
 800ac08:	4b09      	ldr	r3, [pc, #36]	; (800ac30 <tcp_parseopt+0xe4>)
 800ac0a:	881b      	ldrh	r3, [r3, #0]
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d3b3      	bcc.n	800ab78 <tcp_parseopt+0x2c>
 800ac10:	e004      	b.n	800ac1c <tcp_parseopt+0xd0>
          return;
 800ac12:	bf00      	nop
 800ac14:	e002      	b.n	800ac1c <tcp_parseopt+0xd0>
            return;
 800ac16:	bf00      	nop
 800ac18:	e000      	b.n	800ac1c <tcp_parseopt+0xd0>
            return;
 800ac1a:	bf00      	nop
      }
    }
  }
}
 800ac1c:	3710      	adds	r7, #16
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}
 800ac22:	bf00      	nop
 800ac24:	08011db0 	.word	0x08011db0
 800ac28:	08012214 	.word	0x08012214
 800ac2c:	08011dfc 	.word	0x08011dfc
 800ac30:	200000e8 	.word	0x200000e8
 800ac34:	200000f0 	.word	0x200000f0

0800ac38 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ac3c:	4b05      	ldr	r3, [pc, #20]	; (800ac54 <tcp_trigger_input_pcb_close+0x1c>)
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	f043 0310 	orr.w	r3, r3, #16
 800ac44:	b2da      	uxtb	r2, r3
 800ac46:	4b03      	ldr	r3, [pc, #12]	; (800ac54 <tcp_trigger_input_pcb_close+0x1c>)
 800ac48:	701a      	strb	r2, [r3, #0]
}
 800ac4a:	bf00      	nop
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr
 800ac54:	20000101 	.word	0x20000101

0800ac58 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	60b9      	str	r1, [r7, #8]
 800ac62:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d00a      	beq.n	800ac80 <tcp_route+0x28>
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	7a1b      	ldrb	r3, [r3, #8]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d006      	beq.n	800ac80 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	7a1b      	ldrb	r3, [r3, #8]
 800ac76:	4618      	mov	r0, r3
 800ac78:	f7fb f81c 	bl	8005cb4 <netif_get_by_index>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	e003      	b.n	800ac88 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f003 fad5 	bl	800e230 <ip4_route>
 800ac86:	4603      	mov	r3, r0
  }
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3710      	adds	r7, #16
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800ac90:	b590      	push	{r4, r7, lr}
 800ac92:	b087      	sub	sp, #28
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	60f8      	str	r0, [r7, #12]
 800ac98:	60b9      	str	r1, [r7, #8]
 800ac9a:	603b      	str	r3, [r7, #0]
 800ac9c:	4613      	mov	r3, r2
 800ac9e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d105      	bne.n	800acb2 <tcp_create_segment+0x22>
 800aca6:	4b44      	ldr	r3, [pc, #272]	; (800adb8 <tcp_create_segment+0x128>)
 800aca8:	22a3      	movs	r2, #163	; 0xa3
 800acaa:	4944      	ldr	r1, [pc, #272]	; (800adbc <tcp_create_segment+0x12c>)
 800acac:	4844      	ldr	r0, [pc, #272]	; (800adc0 <tcp_create_segment+0x130>)
 800acae:	f004 fd07 	bl	800f6c0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d105      	bne.n	800acc4 <tcp_create_segment+0x34>
 800acb8:	4b3f      	ldr	r3, [pc, #252]	; (800adb8 <tcp_create_segment+0x128>)
 800acba:	22a4      	movs	r2, #164	; 0xa4
 800acbc:	4941      	ldr	r1, [pc, #260]	; (800adc4 <tcp_create_segment+0x134>)
 800acbe:	4840      	ldr	r0, [pc, #256]	; (800adc0 <tcp_create_segment+0x130>)
 800acc0:	f004 fcfe 	bl	800f6c0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800acc4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	b2db      	uxtb	r3, r3
 800accc:	f003 0304 	and.w	r3, r3, #4
 800acd0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800acd2:	2003      	movs	r0, #3
 800acd4:	f7fa fcf0 	bl	80056b8 <memp_malloc>
 800acd8:	6138      	str	r0, [r7, #16]
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d104      	bne.n	800acea <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ace0:	68b8      	ldr	r0, [r7, #8]
 800ace2:	f7fb fb47 	bl	8006374 <pbuf_free>
    return NULL;
 800ace6:	2300      	movs	r3, #0
 800ace8:	e061      	b.n	800adae <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800acf0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	2200      	movs	r2, #0
 800acf6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	68ba      	ldr	r2, [r7, #8]
 800acfc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	891a      	ldrh	r2, [r3, #8]
 800ad02:	7dfb      	ldrb	r3, [r7, #23]
 800ad04:	b29b      	uxth	r3, r3
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d205      	bcs.n	800ad16 <tcp_create_segment+0x86>
 800ad0a:	4b2b      	ldr	r3, [pc, #172]	; (800adb8 <tcp_create_segment+0x128>)
 800ad0c:	22b0      	movs	r2, #176	; 0xb0
 800ad0e:	492e      	ldr	r1, [pc, #184]	; (800adc8 <tcp_create_segment+0x138>)
 800ad10:	482b      	ldr	r0, [pc, #172]	; (800adc0 <tcp_create_segment+0x130>)
 800ad12:	f004 fcd5 	bl	800f6c0 <iprintf>
  seg->len = p->tot_len - optlen;
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	891a      	ldrh	r2, [r3, #8]
 800ad1a:	7dfb      	ldrb	r3, [r7, #23]
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	1ad3      	subs	r3, r2, r3
 800ad20:	b29a      	uxth	r2, r3
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ad26:	2114      	movs	r1, #20
 800ad28:	68b8      	ldr	r0, [r7, #8]
 800ad2a:	f7fb fa8d 	bl	8006248 <pbuf_add_header>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d004      	beq.n	800ad3e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800ad34:	6938      	ldr	r0, [r7, #16]
 800ad36:	f7fc ffec 	bl	8007d12 <tcp_seg_free>
    return NULL;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	e037      	b.n	800adae <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	685a      	ldr	r2, [r3, #4]
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	8ada      	ldrh	r2, [r3, #22]
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	68dc      	ldr	r4, [r3, #12]
 800ad50:	4610      	mov	r0, r2
 800ad52:	f7fa f85b 	bl	8004e0c <lwip_htons>
 800ad56:	4603      	mov	r3, r0
 800ad58:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	8b1a      	ldrh	r2, [r3, #24]
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	68dc      	ldr	r4, [r3, #12]
 800ad62:	4610      	mov	r0, r2
 800ad64:	f7fa f852 	bl	8004e0c <lwip_htons>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	68dc      	ldr	r4, [r3, #12]
 800ad70:	6838      	ldr	r0, [r7, #0]
 800ad72:	f7fa f860 	bl	8004e36 <lwip_htonl>
 800ad76:	4603      	mov	r3, r0
 800ad78:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ad7a:	7dfb      	ldrb	r3, [r7, #23]
 800ad7c:	089b      	lsrs	r3, r3, #2
 800ad7e:	b2db      	uxtb	r3, r3
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	3305      	adds	r3, #5
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	031b      	lsls	r3, r3, #12
 800ad88:	b29a      	uxth	r2, r3
 800ad8a:	79fb      	ldrb	r3, [r7, #7]
 800ad8c:	b29b      	uxth	r3, r3
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	b29a      	uxth	r2, r3
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	68dc      	ldr	r4, [r3, #12]
 800ad96:	4610      	mov	r0, r2
 800ad98:	f7fa f838 	bl	8004e0c <lwip_htons>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	68db      	ldr	r3, [r3, #12]
 800ada4:	2200      	movs	r2, #0
 800ada6:	749a      	strb	r2, [r3, #18]
 800ada8:	2200      	movs	r2, #0
 800adaa:	74da      	strb	r2, [r3, #19]
  return seg;
 800adac:	693b      	ldr	r3, [r7, #16]
}
 800adae:	4618      	mov	r0, r3
 800adb0:	371c      	adds	r7, #28
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd90      	pop	{r4, r7, pc}
 800adb6:	bf00      	nop
 800adb8:	08012230 	.word	0x08012230
 800adbc:	08012264 	.word	0x08012264
 800adc0:	08012284 	.word	0x08012284
 800adc4:	080122ac 	.word	0x080122ac
 800adc8:	080122d0 	.word	0x080122d0

0800adcc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b086      	sub	sp, #24
 800add0:	af00      	add	r7, sp, #0
 800add2:	607b      	str	r3, [r7, #4]
 800add4:	4603      	mov	r3, r0
 800add6:	73fb      	strb	r3, [r7, #15]
 800add8:	460b      	mov	r3, r1
 800adda:	81bb      	strh	r3, [r7, #12]
 800addc:	4613      	mov	r3, r2
 800adde:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800ade0:	89bb      	ldrh	r3, [r7, #12]
 800ade2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d105      	bne.n	800adf6 <tcp_pbuf_prealloc+0x2a>
 800adea:	4b30      	ldr	r3, [pc, #192]	; (800aeac <tcp_pbuf_prealloc+0xe0>)
 800adec:	22e8      	movs	r2, #232	; 0xe8
 800adee:	4930      	ldr	r1, [pc, #192]	; (800aeb0 <tcp_pbuf_prealloc+0xe4>)
 800adf0:	4830      	ldr	r0, [pc, #192]	; (800aeb4 <tcp_pbuf_prealloc+0xe8>)
 800adf2:	f004 fc65 	bl	800f6c0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800adf6:	6a3b      	ldr	r3, [r7, #32]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d105      	bne.n	800ae08 <tcp_pbuf_prealloc+0x3c>
 800adfc:	4b2b      	ldr	r3, [pc, #172]	; (800aeac <tcp_pbuf_prealloc+0xe0>)
 800adfe:	22e9      	movs	r2, #233	; 0xe9
 800ae00:	492d      	ldr	r1, [pc, #180]	; (800aeb8 <tcp_pbuf_prealloc+0xec>)
 800ae02:	482c      	ldr	r0, [pc, #176]	; (800aeb4 <tcp_pbuf_prealloc+0xe8>)
 800ae04:	f004 fc5c 	bl	800f6c0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800ae08:	89ba      	ldrh	r2, [r7, #12]
 800ae0a:	897b      	ldrh	r3, [r7, #10]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d221      	bcs.n	800ae54 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ae10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ae14:	f003 0302 	and.w	r3, r3, #2
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d111      	bne.n	800ae40 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800ae1c:	6a3b      	ldr	r3, [r7, #32]
 800ae1e:	8b5b      	ldrh	r3, [r3, #26]
 800ae20:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d115      	bne.n	800ae54 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800ae28:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d007      	beq.n	800ae40 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800ae30:	6a3b      	ldr	r3, [r7, #32]
 800ae32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d103      	bne.n	800ae40 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800ae38:	6a3b      	ldr	r3, [r7, #32]
 800ae3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d009      	beq.n	800ae54 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800ae40:	89bb      	ldrh	r3, [r7, #12]
 800ae42:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800ae46:	f023 0203 	bic.w	r2, r3, #3
 800ae4a:	897b      	ldrh	r3, [r7, #10]
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	bf28      	it	cs
 800ae50:	4613      	movcs	r3, r2
 800ae52:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800ae54:	8af9      	ldrh	r1, [r7, #22]
 800ae56:	7bfb      	ldrb	r3, [r7, #15]
 800ae58:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f7fa ffa5 	bl	8005dac <pbuf_alloc>
 800ae62:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d101      	bne.n	800ae6e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	e019      	b.n	800aea2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d006      	beq.n	800ae84 <tcp_pbuf_prealloc+0xb8>
 800ae76:	4b0d      	ldr	r3, [pc, #52]	; (800aeac <tcp_pbuf_prealloc+0xe0>)
 800ae78:	f240 120b 	movw	r2, #267	; 0x10b
 800ae7c:	490f      	ldr	r1, [pc, #60]	; (800aebc <tcp_pbuf_prealloc+0xf0>)
 800ae7e:	480d      	ldr	r0, [pc, #52]	; (800aeb4 <tcp_pbuf_prealloc+0xe8>)
 800ae80:	f004 fc1e 	bl	800f6c0 <iprintf>
  *oversize = p->len - length;
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	895a      	ldrh	r2, [r3, #10]
 800ae88:	89bb      	ldrh	r3, [r7, #12]
 800ae8a:	1ad3      	subs	r3, r2, r3
 800ae8c:	b29a      	uxth	r2, r3
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	89ba      	ldrh	r2, [r7, #12]
 800ae96:	811a      	strh	r2, [r3, #8]
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	891a      	ldrh	r2, [r3, #8]
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	815a      	strh	r2, [r3, #10]
  return p;
 800aea0:	693b      	ldr	r3, [r7, #16]
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3718      	adds	r7, #24
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	08012230 	.word	0x08012230
 800aeb0:	080122e8 	.word	0x080122e8
 800aeb4:	08012284 	.word	0x08012284
 800aeb8:	0801230c 	.word	0x0801230c
 800aebc:	0801232c 	.word	0x0801232c

0800aec0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	460b      	mov	r3, r1
 800aeca:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d106      	bne.n	800aee0 <tcp_write_checks+0x20>
 800aed2:	4b33      	ldr	r3, [pc, #204]	; (800afa0 <tcp_write_checks+0xe0>)
 800aed4:	f240 1233 	movw	r2, #307	; 0x133
 800aed8:	4932      	ldr	r1, [pc, #200]	; (800afa4 <tcp_write_checks+0xe4>)
 800aeda:	4833      	ldr	r0, [pc, #204]	; (800afa8 <tcp_write_checks+0xe8>)
 800aedc:	f004 fbf0 	bl	800f6c0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	7d1b      	ldrb	r3, [r3, #20]
 800aee4:	2b04      	cmp	r3, #4
 800aee6:	d00e      	beq.n	800af06 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800aeec:	2b07      	cmp	r3, #7
 800aeee:	d00a      	beq.n	800af06 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800aef4:	2b02      	cmp	r3, #2
 800aef6:	d006      	beq.n	800af06 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800aefc:	2b03      	cmp	r3, #3
 800aefe:	d002      	beq.n	800af06 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800af00:	f06f 030a 	mvn.w	r3, #10
 800af04:	e048      	b.n	800af98 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800af06:	887b      	ldrh	r3, [r7, #2]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d101      	bne.n	800af10 <tcp_write_checks+0x50>
    return ERR_OK;
 800af0c:	2300      	movs	r3, #0
 800af0e:	e043      	b.n	800af98 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800af16:	887a      	ldrh	r2, [r7, #2]
 800af18:	429a      	cmp	r2, r3
 800af1a:	d909      	bls.n	800af30 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	8b5b      	ldrh	r3, [r3, #26]
 800af20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af24:	b29a      	uxth	r2, r3
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800af2a:	f04f 33ff 	mov.w	r3, #4294967295
 800af2e:	e033      	b.n	800af98 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800af36:	2b08      	cmp	r3, #8
 800af38:	d909      	bls.n	800af4e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	8b5b      	ldrh	r3, [r3, #26]
 800af3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af42:	b29a      	uxth	r2, r3
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800af48:	f04f 33ff 	mov.w	r3, #4294967295
 800af4c:	e024      	b.n	800af98 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800af54:	2b00      	cmp	r3, #0
 800af56:	d00f      	beq.n	800af78 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d11a      	bne.n	800af96 <tcp_write_checks+0xd6>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af64:	2b00      	cmp	r3, #0
 800af66:	d116      	bne.n	800af96 <tcp_write_checks+0xd6>
 800af68:	4b0d      	ldr	r3, [pc, #52]	; (800afa0 <tcp_write_checks+0xe0>)
 800af6a:	f240 1255 	movw	r2, #341	; 0x155
 800af6e:	490f      	ldr	r1, [pc, #60]	; (800afac <tcp_write_checks+0xec>)
 800af70:	480d      	ldr	r0, [pc, #52]	; (800afa8 <tcp_write_checks+0xe8>)
 800af72:	f004 fba5 	bl	800f6c0 <iprintf>
 800af76:	e00e      	b.n	800af96 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d103      	bne.n	800af88 <tcp_write_checks+0xc8>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af84:	2b00      	cmp	r3, #0
 800af86:	d006      	beq.n	800af96 <tcp_write_checks+0xd6>
 800af88:	4b05      	ldr	r3, [pc, #20]	; (800afa0 <tcp_write_checks+0xe0>)
 800af8a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800af8e:	4908      	ldr	r1, [pc, #32]	; (800afb0 <tcp_write_checks+0xf0>)
 800af90:	4805      	ldr	r0, [pc, #20]	; (800afa8 <tcp_write_checks+0xe8>)
 800af92:	f004 fb95 	bl	800f6c0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800af96:	2300      	movs	r3, #0
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3708      	adds	r7, #8
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	08012230 	.word	0x08012230
 800afa4:	08012340 	.word	0x08012340
 800afa8:	08012284 	.word	0x08012284
 800afac:	08012360 	.word	0x08012360
 800afb0:	0801239c 	.word	0x0801239c

0800afb4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800afb4:	b590      	push	{r4, r7, lr}
 800afb6:	b09b      	sub	sp, #108	; 0x6c
 800afb8:	af04      	add	r7, sp, #16
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	4611      	mov	r1, r2
 800afc0:	461a      	mov	r2, r3
 800afc2:	460b      	mov	r3, r1
 800afc4:	80fb      	strh	r3, [r7, #6]
 800afc6:	4613      	mov	r3, r2
 800afc8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800afca:	2300      	movs	r3, #0
 800afcc:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800afce:	2300      	movs	r3, #0
 800afd0:	653b      	str	r3, [r7, #80]	; 0x50
 800afd2:	2300      	movs	r3, #0
 800afd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800afd6:	2300      	movs	r3, #0
 800afd8:	64bb      	str	r3, [r7, #72]	; 0x48
 800afda:	2300      	movs	r3, #0
 800afdc:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800afde:	2300      	movs	r3, #0
 800afe0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800afe4:	2300      	movs	r3, #0
 800afe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800afea:	2300      	movs	r3, #0
 800afec:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800afee:	2300      	movs	r3, #0
 800aff0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800aff2:	2300      	movs	r3, #0
 800aff4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d109      	bne.n	800b010 <tcp_write+0x5c>
 800affc:	4ba4      	ldr	r3, [pc, #656]	; (800b290 <tcp_write+0x2dc>)
 800affe:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800b002:	49a4      	ldr	r1, [pc, #656]	; (800b294 <tcp_write+0x2e0>)
 800b004:	48a4      	ldr	r0, [pc, #656]	; (800b298 <tcp_write+0x2e4>)
 800b006:	f004 fb5b 	bl	800f6c0 <iprintf>
 800b00a:	f06f 030f 	mvn.w	r3, #15
 800b00e:	e32a      	b.n	800b666 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b016:	085b      	lsrs	r3, r3, #1
 800b018:	b29a      	uxth	r2, r3
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b01e:	4293      	cmp	r3, r2
 800b020:	bf28      	it	cs
 800b022:	4613      	movcs	r3, r2
 800b024:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800b026:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d102      	bne.n	800b032 <tcp_write+0x7e>
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b030:	e000      	b.n	800b034 <tcp_write+0x80>
 800b032:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b034:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d109      	bne.n	800b050 <tcp_write+0x9c>
 800b03c:	4b94      	ldr	r3, [pc, #592]	; (800b290 <tcp_write+0x2dc>)
 800b03e:	f240 12ad 	movw	r2, #429	; 0x1ad
 800b042:	4996      	ldr	r1, [pc, #600]	; (800b29c <tcp_write+0x2e8>)
 800b044:	4894      	ldr	r0, [pc, #592]	; (800b298 <tcp_write+0x2e4>)
 800b046:	f004 fb3b 	bl	800f6c0 <iprintf>
 800b04a:	f06f 030f 	mvn.w	r3, #15
 800b04e:	e30a      	b.n	800b666 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800b050:	88fb      	ldrh	r3, [r7, #6]
 800b052:	4619      	mov	r1, r3
 800b054:	68f8      	ldr	r0, [r7, #12]
 800b056:	f7ff ff33 	bl	800aec0 <tcp_write_checks>
 800b05a:	4603      	mov	r3, r0
 800b05c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800b060:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b064:	2b00      	cmp	r3, #0
 800b066:	d002      	beq.n	800b06e <tcp_write+0xba>
    return err;
 800b068:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b06c:	e2fb      	b.n	800b666 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b074:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b078:	2300      	movs	r3, #0
 800b07a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b082:	2b00      	cmp	r3, #0
 800b084:	f000 80f6 	beq.w	800b274 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b08c:	653b      	str	r3, [r7, #80]	; 0x50
 800b08e:	e002      	b.n	800b096 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800b090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d1f8      	bne.n	800b090 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800b09e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0a0:	7a9b      	ldrb	r3, [r3, #10]
 800b0a2:	009b      	lsls	r3, r3, #2
 800b0a4:	b29b      	uxth	r3, r3
 800b0a6:	f003 0304 	and.w	r3, r3, #4
 800b0aa:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b0ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b0ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0b0:	891b      	ldrh	r3, [r3, #8]
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	8c3b      	ldrh	r3, [r7, #32]
 800b0b6:	440b      	add	r3, r1
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	da06      	bge.n	800b0ca <tcp_write+0x116>
 800b0bc:	4b74      	ldr	r3, [pc, #464]	; (800b290 <tcp_write+0x2dc>)
 800b0be:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b0c2:	4977      	ldr	r1, [pc, #476]	; (800b2a0 <tcp_write+0x2ec>)
 800b0c4:	4874      	ldr	r0, [pc, #464]	; (800b298 <tcp_write+0x2e4>)
 800b0c6:	f004 fafb 	bl	800f6c0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b0ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0cc:	891a      	ldrh	r2, [r3, #8]
 800b0ce:	8c3b      	ldrh	r3, [r7, #32]
 800b0d0:	4413      	add	r3, r2
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b0d6:	1ad3      	subs	r3, r2, r3
 800b0d8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b0e0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800b0e2:	8a7b      	ldrh	r3, [r7, #18]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d026      	beq.n	800b136 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b0e8:	8a7b      	ldrh	r3, [r7, #18]
 800b0ea:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d206      	bcs.n	800b0fe <tcp_write+0x14a>
 800b0f0:	4b67      	ldr	r3, [pc, #412]	; (800b290 <tcp_write+0x2dc>)
 800b0f2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800b0f6:	496b      	ldr	r1, [pc, #428]	; (800b2a4 <tcp_write+0x2f0>)
 800b0f8:	4867      	ldr	r0, [pc, #412]	; (800b298 <tcp_write+0x2e4>)
 800b0fa:	f004 fae1 	bl	800f6c0 <iprintf>
      seg = last_unsent;
 800b0fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b100:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800b102:	8a7b      	ldrh	r3, [r7, #18]
 800b104:	88fa      	ldrh	r2, [r7, #6]
 800b106:	4293      	cmp	r3, r2
 800b108:	bf28      	it	cs
 800b10a:	4613      	movcs	r3, r2
 800b10c:	b29b      	uxth	r3, r3
 800b10e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b110:	4293      	cmp	r3, r2
 800b112:	bf28      	it	cs
 800b114:	4613      	movcs	r3, r2
 800b116:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800b118:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b11c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b11e:	4413      	add	r3, r2
 800b120:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800b124:	8a7a      	ldrh	r2, [r7, #18]
 800b126:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b128:	1ad3      	subs	r3, r2, r3
 800b12a:	b29b      	uxth	r3, r3
 800b12c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800b12e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b130:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b132:	1ad3      	subs	r3, r2, r3
 800b134:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b136:	8a7b      	ldrh	r3, [r7, #18]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d00b      	beq.n	800b154 <tcp_write+0x1a0>
 800b13c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b140:	88fb      	ldrh	r3, [r7, #6]
 800b142:	429a      	cmp	r2, r3
 800b144:	d006      	beq.n	800b154 <tcp_write+0x1a0>
 800b146:	4b52      	ldr	r3, [pc, #328]	; (800b290 <tcp_write+0x2dc>)
 800b148:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b14c:	4956      	ldr	r1, [pc, #344]	; (800b2a8 <tcp_write+0x2f4>)
 800b14e:	4852      	ldr	r0, [pc, #328]	; (800b298 <tcp_write+0x2e4>)
 800b150:	f004 fab6 	bl	800f6c0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b154:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b158:	88fb      	ldrh	r3, [r7, #6]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	f080 8167 	bcs.w	800b42e <tcp_write+0x47a>
 800b160:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b162:	2b00      	cmp	r3, #0
 800b164:	f000 8163 	beq.w	800b42e <tcp_write+0x47a>
 800b168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b16a:	891b      	ldrh	r3, [r3, #8]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	f000 815e 	beq.w	800b42e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b172:	88fa      	ldrh	r2, [r7, #6]
 800b174:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b178:	1ad2      	subs	r2, r2, r3
 800b17a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b17c:	4293      	cmp	r3, r2
 800b17e:	bfa8      	it	ge
 800b180:	4613      	movge	r3, r2
 800b182:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800b184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b186:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b188:	797b      	ldrb	r3, [r7, #5]
 800b18a:	f003 0301 	and.w	r3, r3, #1
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d027      	beq.n	800b1e2 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800b192:	f107 0012 	add.w	r0, r7, #18
 800b196:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b198:	8bf9      	ldrh	r1, [r7, #30]
 800b19a:	2301      	movs	r3, #1
 800b19c:	9302      	str	r3, [sp, #8]
 800b19e:	797b      	ldrb	r3, [r7, #5]
 800b1a0:	9301      	str	r3, [sp, #4]
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	9300      	str	r3, [sp, #0]
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	2000      	movs	r0, #0
 800b1aa:	f7ff fe0f 	bl	800adcc <tcp_pbuf_prealloc>
 800b1ae:	6578      	str	r0, [r7, #84]	; 0x54
 800b1b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	f000 8225 	beq.w	800b602 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800b1b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1ba:	6858      	ldr	r0, [r3, #4]
 800b1bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b1c0:	68ba      	ldr	r2, [r7, #8]
 800b1c2:	4413      	add	r3, r2
 800b1c4:	8bfa      	ldrh	r2, [r7, #30]
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	f004 fa4a 	bl	800f660 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800b1cc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b1ce:	f7fb f959 	bl	8006484 <pbuf_clen>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	461a      	mov	r2, r3
 800b1d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b1da:	4413      	add	r3, r2
 800b1dc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800b1e0:	e041      	b.n	800b266 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800b1e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	637b      	str	r3, [r7, #52]	; 0x34
 800b1e8:	e002      	b.n	800b1f0 <tcp_write+0x23c>
 800b1ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	637b      	str	r3, [r7, #52]	; 0x34
 800b1f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d1f8      	bne.n	800b1ea <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b1f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1fa:	7b1b      	ldrb	r3, [r3, #12]
 800b1fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b200:	2b00      	cmp	r3, #0
 800b202:	d115      	bne.n	800b230 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b20a:	8952      	ldrh	r2, [r2, #10]
 800b20c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b20e:	68ba      	ldr	r2, [r7, #8]
 800b210:	429a      	cmp	r2, r3
 800b212:	d10d      	bne.n	800b230 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b214:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d006      	beq.n	800b22a <tcp_write+0x276>
 800b21c:	4b1c      	ldr	r3, [pc, #112]	; (800b290 <tcp_write+0x2dc>)
 800b21e:	f240 2231 	movw	r2, #561	; 0x231
 800b222:	4922      	ldr	r1, [pc, #136]	; (800b2ac <tcp_write+0x2f8>)
 800b224:	481c      	ldr	r0, [pc, #112]	; (800b298 <tcp_write+0x2e4>)
 800b226:	f004 fa4b 	bl	800f6c0 <iprintf>
          extendlen = seglen;
 800b22a:	8bfb      	ldrh	r3, [r7, #30]
 800b22c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800b22e:	e01a      	b.n	800b266 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800b230:	8bfb      	ldrh	r3, [r7, #30]
 800b232:	2201      	movs	r2, #1
 800b234:	4619      	mov	r1, r3
 800b236:	2000      	movs	r0, #0
 800b238:	f7fa fdb8 	bl	8005dac <pbuf_alloc>
 800b23c:	6578      	str	r0, [r7, #84]	; 0x54
 800b23e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b240:	2b00      	cmp	r3, #0
 800b242:	f000 81e0 	beq.w	800b606 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800b246:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b24a:	68ba      	ldr	r2, [r7, #8]
 800b24c:	441a      	add	r2, r3
 800b24e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b250:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800b252:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b254:	f7fb f916 	bl	8006484 <pbuf_clen>
 800b258:	4603      	mov	r3, r0
 800b25a:	461a      	mov	r2, r3
 800b25c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b260:	4413      	add	r3, r2
 800b262:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800b266:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b26a:	8bfb      	ldrh	r3, [r7, #30]
 800b26c:	4413      	add	r3, r2
 800b26e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b272:	e0dc      	b.n	800b42e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	f000 80d7 	beq.w	800b42e <tcp_write+0x47a>
 800b280:	4b03      	ldr	r3, [pc, #12]	; (800b290 <tcp_write+0x2dc>)
 800b282:	f240 224a 	movw	r2, #586	; 0x24a
 800b286:	490a      	ldr	r1, [pc, #40]	; (800b2b0 <tcp_write+0x2fc>)
 800b288:	4803      	ldr	r0, [pc, #12]	; (800b298 <tcp_write+0x2e4>)
 800b28a:	f004 fa19 	bl	800f6c0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800b28e:	e0ce      	b.n	800b42e <tcp_write+0x47a>
 800b290:	08012230 	.word	0x08012230
 800b294:	080123d0 	.word	0x080123d0
 800b298:	08012284 	.word	0x08012284
 800b29c:	080123e8 	.word	0x080123e8
 800b2a0:	0801241c 	.word	0x0801241c
 800b2a4:	08012434 	.word	0x08012434
 800b2a8:	08012454 	.word	0x08012454
 800b2ac:	08012474 	.word	0x08012474
 800b2b0:	080124a0 	.word	0x080124a0
    struct pbuf *p;
    u16_t left = len - pos;
 800b2b4:	88fa      	ldrh	r2, [r7, #6]
 800b2b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b2ba:	1ad3      	subs	r3, r2, r3
 800b2bc:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800b2be:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b2c6:	1ad3      	subs	r3, r2, r3
 800b2c8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800b2ca:	8b7a      	ldrh	r2, [r7, #26]
 800b2cc:	8bbb      	ldrh	r3, [r7, #28]
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	bf28      	it	cs
 800b2d2:	4613      	movcs	r3, r2
 800b2d4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b2d6:	797b      	ldrb	r3, [r7, #5]
 800b2d8:	f003 0301 	and.w	r3, r3, #1
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d036      	beq.n	800b34e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800b2e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b2e4:	b29a      	uxth	r2, r3
 800b2e6:	8b3b      	ldrh	r3, [r7, #24]
 800b2e8:	4413      	add	r3, r2
 800b2ea:	b299      	uxth	r1, r3
 800b2ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	bf0c      	ite	eq
 800b2f2:	2301      	moveq	r3, #1
 800b2f4:	2300      	movne	r3, #0
 800b2f6:	b2db      	uxtb	r3, r3
 800b2f8:	f107 0012 	add.w	r0, r7, #18
 800b2fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b2fe:	9302      	str	r3, [sp, #8]
 800b300:	797b      	ldrb	r3, [r7, #5]
 800b302:	9301      	str	r3, [sp, #4]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	9300      	str	r3, [sp, #0]
 800b308:	4603      	mov	r3, r0
 800b30a:	2036      	movs	r0, #54	; 0x36
 800b30c:	f7ff fd5e 	bl	800adcc <tcp_pbuf_prealloc>
 800b310:	6338      	str	r0, [r7, #48]	; 0x30
 800b312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b314:	2b00      	cmp	r3, #0
 800b316:	f000 8178 	beq.w	800b60a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b31c:	895b      	ldrh	r3, [r3, #10]
 800b31e:	8b3a      	ldrh	r2, [r7, #24]
 800b320:	429a      	cmp	r2, r3
 800b322:	d906      	bls.n	800b332 <tcp_write+0x37e>
 800b324:	4b8c      	ldr	r3, [pc, #560]	; (800b558 <tcp_write+0x5a4>)
 800b326:	f240 2266 	movw	r2, #614	; 0x266
 800b32a:	498c      	ldr	r1, [pc, #560]	; (800b55c <tcp_write+0x5a8>)
 800b32c:	488c      	ldr	r0, [pc, #560]	; (800b560 <tcp_write+0x5ac>)
 800b32e:	f004 f9c7 	bl	800f6c0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800b332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b334:	685a      	ldr	r2, [r3, #4]
 800b336:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b33a:	18d0      	adds	r0, r2, r3
 800b33c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b340:	68ba      	ldr	r2, [r7, #8]
 800b342:	4413      	add	r3, r2
 800b344:	8b3a      	ldrh	r2, [r7, #24]
 800b346:	4619      	mov	r1, r3
 800b348:	f004 f98a 	bl	800f660 <memcpy>
 800b34c:	e02f      	b.n	800b3ae <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b34e:	8a7b      	ldrh	r3, [r7, #18]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d006      	beq.n	800b362 <tcp_write+0x3ae>
 800b354:	4b80      	ldr	r3, [pc, #512]	; (800b558 <tcp_write+0x5a4>)
 800b356:	f240 2271 	movw	r2, #625	; 0x271
 800b35a:	4982      	ldr	r1, [pc, #520]	; (800b564 <tcp_write+0x5b0>)
 800b35c:	4880      	ldr	r0, [pc, #512]	; (800b560 <tcp_write+0x5ac>)
 800b35e:	f004 f9af 	bl	800f6c0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800b362:	8b3b      	ldrh	r3, [r7, #24]
 800b364:	2201      	movs	r2, #1
 800b366:	4619      	mov	r1, r3
 800b368:	2036      	movs	r0, #54	; 0x36
 800b36a:	f7fa fd1f 	bl	8005dac <pbuf_alloc>
 800b36e:	6178      	str	r0, [r7, #20]
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	2b00      	cmp	r3, #0
 800b374:	f000 814b 	beq.w	800b60e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b378:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b37c:	68ba      	ldr	r2, [r7, #8]
 800b37e:	441a      	add	r2, r3
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b384:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b388:	b29b      	uxth	r3, r3
 800b38a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b38e:	4619      	mov	r1, r3
 800b390:	2036      	movs	r0, #54	; 0x36
 800b392:	f7fa fd0b 	bl	8005dac <pbuf_alloc>
 800b396:	6338      	str	r0, [r7, #48]	; 0x30
 800b398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d103      	bne.n	800b3a6 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800b39e:	6978      	ldr	r0, [r7, #20]
 800b3a0:	f7fa ffe8 	bl	8006374 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800b3a4:	e136      	b.n	800b614 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800b3a6:	6979      	ldr	r1, [r7, #20]
 800b3a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b3aa:	f7fb f8a5 	bl	80064f8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800b3ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b3b0:	f7fb f868 	bl	8006484 <pbuf_clen>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	461a      	mov	r2, r3
 800b3b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b3bc:	4413      	add	r3, r2
 800b3be:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b3c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b3c6:	2b09      	cmp	r3, #9
 800b3c8:	d903      	bls.n	800b3d2 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800b3ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b3cc:	f7fa ffd2 	bl	8006374 <pbuf_free>
      goto memerr;
 800b3d0:	e120      	b.n	800b614 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b3d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b3da:	441a      	add	r2, r3
 800b3dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3e0:	9300      	str	r3, [sp, #0]
 800b3e2:	4613      	mov	r3, r2
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b3e8:	68f8      	ldr	r0, [r7, #12]
 800b3ea:	f7ff fc51 	bl	800ac90 <tcp_create_segment>
 800b3ee:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b3f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	f000 810d 	beq.w	800b612 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800b3f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d102      	bne.n	800b404 <tcp_write+0x450>
      queue = seg;
 800b3fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b400:	647b      	str	r3, [r7, #68]	; 0x44
 800b402:	e00c      	b.n	800b41e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b406:	2b00      	cmp	r3, #0
 800b408:	d106      	bne.n	800b418 <tcp_write+0x464>
 800b40a:	4b53      	ldr	r3, [pc, #332]	; (800b558 <tcp_write+0x5a4>)
 800b40c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b410:	4955      	ldr	r1, [pc, #340]	; (800b568 <tcp_write+0x5b4>)
 800b412:	4853      	ldr	r0, [pc, #332]	; (800b560 <tcp_write+0x5ac>)
 800b414:	f004 f954 	bl	800f6c0 <iprintf>
      prev_seg->next = seg;
 800b418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b41a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b41c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800b41e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b420:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800b422:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b426:	8b3b      	ldrh	r3, [r7, #24]
 800b428:	4413      	add	r3, r2
 800b42a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800b42e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b432:	88fb      	ldrh	r3, [r7, #6]
 800b434:	429a      	cmp	r2, r3
 800b436:	f4ff af3d 	bcc.w	800b2b4 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800b43a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d02c      	beq.n	800b49a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800b440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b446:	e01e      	b.n	800b486 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800b448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b44a:	891a      	ldrh	r2, [r3, #8]
 800b44c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b44e:	4413      	add	r3, r2
 800b450:	b29a      	uxth	r2, r3
 800b452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b454:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800b456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d110      	bne.n	800b480 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b464:	8952      	ldrh	r2, [r2, #10]
 800b466:	4413      	add	r3, r2
 800b468:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800b46a:	68b9      	ldr	r1, [r7, #8]
 800b46c:	4618      	mov	r0, r3
 800b46e:	f004 f8f7 	bl	800f660 <memcpy>
        p->len += oversize_used;
 800b472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b474:	895a      	ldrh	r2, [r3, #10]
 800b476:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b478:	4413      	add	r3, r2
 800b47a:	b29a      	uxth	r2, r3
 800b47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b47e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d1dd      	bne.n	800b448 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800b48c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b48e:	891a      	ldrh	r2, [r3, #8]
 800b490:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b492:	4413      	add	r3, r2
 800b494:	b29a      	uxth	r2, r3
 800b496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b498:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800b49a:	8a7a      	ldrh	r2, [r7, #18]
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800b4a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d018      	beq.n	800b4da <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b4a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d106      	bne.n	800b4bc <tcp_write+0x508>
 800b4ae:	4b2a      	ldr	r3, [pc, #168]	; (800b558 <tcp_write+0x5a4>)
 800b4b0:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800b4b4:	492d      	ldr	r1, [pc, #180]	; (800b56c <tcp_write+0x5b8>)
 800b4b6:	482a      	ldr	r0, [pc, #168]	; (800b560 <tcp_write+0x5ac>)
 800b4b8:	f004 f902 	bl	800f6c0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800b4bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f7fb f818 	bl	80064f8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800b4c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4ca:	891a      	ldrh	r2, [r3, #8]
 800b4cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4ce:	891b      	ldrh	r3, [r3, #8]
 800b4d0:	4413      	add	r3, r2
 800b4d2:	b29a      	uxth	r2, r3
 800b4d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4d6:	811a      	strh	r2, [r3, #8]
 800b4d8:	e037      	b.n	800b54a <tcp_write+0x596>
  } else if (extendlen > 0) {
 800b4da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d034      	beq.n	800b54a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b4e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d003      	beq.n	800b4ee <tcp_write+0x53a>
 800b4e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d106      	bne.n	800b4fc <tcp_write+0x548>
 800b4ee:	4b1a      	ldr	r3, [pc, #104]	; (800b558 <tcp_write+0x5a4>)
 800b4f0:	f240 22e6 	movw	r2, #742	; 0x2e6
 800b4f4:	491e      	ldr	r1, [pc, #120]	; (800b570 <tcp_write+0x5bc>)
 800b4f6:	481a      	ldr	r0, [pc, #104]	; (800b560 <tcp_write+0x5ac>)
 800b4f8:	f004 f8e2 	bl	800f6c0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b4fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	62bb      	str	r3, [r7, #40]	; 0x28
 800b502:	e009      	b.n	800b518 <tcp_write+0x564>
      p->tot_len += extendlen;
 800b504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b506:	891a      	ldrh	r2, [r3, #8]
 800b508:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b50a:	4413      	add	r3, r2
 800b50c:	b29a      	uxth	r2, r3
 800b50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b510:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	62bb      	str	r3, [r7, #40]	; 0x28
 800b518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d1f1      	bne.n	800b504 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800b520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b522:	891a      	ldrh	r2, [r3, #8]
 800b524:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b526:	4413      	add	r3, r2
 800b528:	b29a      	uxth	r2, r3
 800b52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b52c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800b52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b530:	895a      	ldrh	r2, [r3, #10]
 800b532:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b534:	4413      	add	r3, r2
 800b536:	b29a      	uxth	r2, r3
 800b538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b53a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800b53c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b53e:	891a      	ldrh	r2, [r3, #8]
 800b540:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b542:	4413      	add	r3, r2
 800b544:	b29a      	uxth	r2, r3
 800b546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b548:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800b54a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d111      	bne.n	800b574 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b554:	66da      	str	r2, [r3, #108]	; 0x6c
 800b556:	e010      	b.n	800b57a <tcp_write+0x5c6>
 800b558:	08012230 	.word	0x08012230
 800b55c:	080124d0 	.word	0x080124d0
 800b560:	08012284 	.word	0x08012284
 800b564:	08012510 	.word	0x08012510
 800b568:	08012520 	.word	0x08012520
 800b56c:	08012534 	.word	0x08012534
 800b570:	0801256c 	.word	0x0801256c
  } else {
    last_unsent->next = queue;
 800b574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b576:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b578:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b57e:	88fb      	ldrh	r3, [r7, #6]
 800b580:	441a      	add	r2, r3
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b58c:	88fb      	ldrh	r3, [r7, #6]
 800b58e:	1ad3      	subs	r3, r2, r3
 800b590:	b29a      	uxth	r2, r3
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b59e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d00e      	beq.n	800b5ca <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d10a      	bne.n	800b5ca <tcp_write+0x616>
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d106      	bne.n	800b5ca <tcp_write+0x616>
 800b5bc:	4b2c      	ldr	r3, [pc, #176]	; (800b670 <tcp_write+0x6bc>)
 800b5be:	f240 3212 	movw	r2, #786	; 0x312
 800b5c2:	492c      	ldr	r1, [pc, #176]	; (800b674 <tcp_write+0x6c0>)
 800b5c4:	482c      	ldr	r0, [pc, #176]	; (800b678 <tcp_write+0x6c4>)
 800b5c6:	f004 f87b 	bl	800f6c0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800b5ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d016      	beq.n	800b5fe <tcp_write+0x64a>
 800b5d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5d2:	68db      	ldr	r3, [r3, #12]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d012      	beq.n	800b5fe <tcp_write+0x64a>
 800b5d8:	797b      	ldrb	r3, [r7, #5]
 800b5da:	f003 0302 	and.w	r3, r3, #2
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d10d      	bne.n	800b5fe <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800b5e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5e4:	68db      	ldr	r3, [r3, #12]
 800b5e6:	899b      	ldrh	r3, [r3, #12]
 800b5e8:	b29c      	uxth	r4, r3
 800b5ea:	2008      	movs	r0, #8
 800b5ec:	f7f9 fc0e 	bl	8004e0c <lwip_htons>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	4322      	orrs	r2, r4
 800b5fa:	b292      	uxth	r2, r2
 800b5fc:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800b5fe:	2300      	movs	r3, #0
 800b600:	e031      	b.n	800b666 <tcp_write+0x6b2>
          goto memerr;
 800b602:	bf00      	nop
 800b604:	e006      	b.n	800b614 <tcp_write+0x660>
            goto memerr;
 800b606:	bf00      	nop
 800b608:	e004      	b.n	800b614 <tcp_write+0x660>
        goto memerr;
 800b60a:	bf00      	nop
 800b60c:	e002      	b.n	800b614 <tcp_write+0x660>
        goto memerr;
 800b60e:	bf00      	nop
 800b610:	e000      	b.n	800b614 <tcp_write+0x660>
      goto memerr;
 800b612:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	8b5b      	ldrh	r3, [r3, #26]
 800b618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b61c:	b29a      	uxth	r2, r3
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800b622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b624:	2b00      	cmp	r3, #0
 800b626:	d002      	beq.n	800b62e <tcp_write+0x67a>
    pbuf_free(concat_p);
 800b628:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b62a:	f7fa fea3 	bl	8006374 <pbuf_free>
  }
  if (queue != NULL) {
 800b62e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b630:	2b00      	cmp	r3, #0
 800b632:	d002      	beq.n	800b63a <tcp_write+0x686>
    tcp_segs_free(queue);
 800b634:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b636:	f7fc fb57 	bl	8007ce8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b640:	2b00      	cmp	r3, #0
 800b642:	d00e      	beq.n	800b662 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d10a      	bne.n	800b662 <tcp_write+0x6ae>
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b650:	2b00      	cmp	r3, #0
 800b652:	d106      	bne.n	800b662 <tcp_write+0x6ae>
 800b654:	4b06      	ldr	r3, [pc, #24]	; (800b670 <tcp_write+0x6bc>)
 800b656:	f240 3227 	movw	r2, #807	; 0x327
 800b65a:	4906      	ldr	r1, [pc, #24]	; (800b674 <tcp_write+0x6c0>)
 800b65c:	4806      	ldr	r0, [pc, #24]	; (800b678 <tcp_write+0x6c4>)
 800b65e:	f004 f82f 	bl	800f6c0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800b662:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b666:	4618      	mov	r0, r3
 800b668:	375c      	adds	r7, #92	; 0x5c
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd90      	pop	{r4, r7, pc}
 800b66e:	bf00      	nop
 800b670:	08012230 	.word	0x08012230
 800b674:	080125a4 	.word	0x080125a4
 800b678:	08012284 	.word	0x08012284

0800b67c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800b67c:	b590      	push	{r4, r7, lr}
 800b67e:	b08b      	sub	sp, #44	; 0x2c
 800b680:	af02      	add	r7, sp, #8
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	460b      	mov	r3, r1
 800b686:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800b688:	2300      	movs	r3, #0
 800b68a:	61fb      	str	r3, [r7, #28]
 800b68c:	2300      	movs	r3, #0
 800b68e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b690:	2300      	movs	r3, #0
 800b692:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d106      	bne.n	800b6a8 <tcp_split_unsent_seg+0x2c>
 800b69a:	4b95      	ldr	r3, [pc, #596]	; (800b8f0 <tcp_split_unsent_seg+0x274>)
 800b69c:	f240 324b 	movw	r2, #843	; 0x34b
 800b6a0:	4994      	ldr	r1, [pc, #592]	; (800b8f4 <tcp_split_unsent_seg+0x278>)
 800b6a2:	4895      	ldr	r0, [pc, #596]	; (800b8f8 <tcp_split_unsent_seg+0x27c>)
 800b6a4:	f004 f80c 	bl	800f6c0 <iprintf>

  useg = pcb->unsent;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6ac:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d102      	bne.n	800b6ba <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800b6b4:	f04f 33ff 	mov.w	r3, #4294967295
 800b6b8:	e116      	b.n	800b8e8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800b6ba:	887b      	ldrh	r3, [r7, #2]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d109      	bne.n	800b6d4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b6c0:	4b8b      	ldr	r3, [pc, #556]	; (800b8f0 <tcp_split_unsent_seg+0x274>)
 800b6c2:	f240 3253 	movw	r2, #851	; 0x353
 800b6c6:	498d      	ldr	r1, [pc, #564]	; (800b8fc <tcp_split_unsent_seg+0x280>)
 800b6c8:	488b      	ldr	r0, [pc, #556]	; (800b8f8 <tcp_split_unsent_seg+0x27c>)
 800b6ca:	f003 fff9 	bl	800f6c0 <iprintf>
    return ERR_VAL;
 800b6ce:	f06f 0305 	mvn.w	r3, #5
 800b6d2:	e109      	b.n	800b8e8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	891b      	ldrh	r3, [r3, #8]
 800b6d8:	887a      	ldrh	r2, [r7, #2]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d301      	bcc.n	800b6e2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	e102      	b.n	800b8e8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b6e6:	887a      	ldrh	r2, [r7, #2]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d906      	bls.n	800b6fa <tcp_split_unsent_seg+0x7e>
 800b6ec:	4b80      	ldr	r3, [pc, #512]	; (800b8f0 <tcp_split_unsent_seg+0x274>)
 800b6ee:	f240 325b 	movw	r2, #859	; 0x35b
 800b6f2:	4983      	ldr	r1, [pc, #524]	; (800b900 <tcp_split_unsent_seg+0x284>)
 800b6f4:	4880      	ldr	r0, [pc, #512]	; (800b8f8 <tcp_split_unsent_seg+0x27c>)
 800b6f6:	f003 ffe3 	bl	800f6c0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	891b      	ldrh	r3, [r3, #8]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d106      	bne.n	800b710 <tcp_split_unsent_seg+0x94>
 800b702:	4b7b      	ldr	r3, [pc, #492]	; (800b8f0 <tcp_split_unsent_seg+0x274>)
 800b704:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800b708:	497e      	ldr	r1, [pc, #504]	; (800b904 <tcp_split_unsent_seg+0x288>)
 800b70a:	487b      	ldr	r0, [pc, #492]	; (800b8f8 <tcp_split_unsent_seg+0x27c>)
 800b70c:	f003 ffd8 	bl	800f6c0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	7a9b      	ldrb	r3, [r3, #10]
 800b714:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b716:	7bfb      	ldrb	r3, [r7, #15]
 800b718:	009b      	lsls	r3, r3, #2
 800b71a:	b2db      	uxtb	r3, r3
 800b71c:	f003 0304 	and.w	r3, r3, #4
 800b720:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	891a      	ldrh	r2, [r3, #8]
 800b726:	887b      	ldrh	r3, [r7, #2]
 800b728:	1ad3      	subs	r3, r2, r3
 800b72a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b72c:	7bbb      	ldrb	r3, [r7, #14]
 800b72e:	b29a      	uxth	r2, r3
 800b730:	89bb      	ldrh	r3, [r7, #12]
 800b732:	4413      	add	r3, r2
 800b734:	b29b      	uxth	r3, r3
 800b736:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b73a:	4619      	mov	r1, r3
 800b73c:	2036      	movs	r0, #54	; 0x36
 800b73e:	f7fa fb35 	bl	8005dac <pbuf_alloc>
 800b742:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	2b00      	cmp	r3, #0
 800b748:	f000 80b7 	beq.w	800b8ba <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	891a      	ldrh	r2, [r3, #8]
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	891b      	ldrh	r3, [r3, #8]
 800b756:	1ad3      	subs	r3, r2, r3
 800b758:	b29a      	uxth	r2, r3
 800b75a:	887b      	ldrh	r3, [r7, #2]
 800b75c:	4413      	add	r3, r2
 800b75e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	6858      	ldr	r0, [r3, #4]
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	685a      	ldr	r2, [r3, #4]
 800b768:	7bbb      	ldrb	r3, [r7, #14]
 800b76a:	18d1      	adds	r1, r2, r3
 800b76c:	897b      	ldrh	r3, [r7, #10]
 800b76e:	89ba      	ldrh	r2, [r7, #12]
 800b770:	f7fa fffa 	bl	8006768 <pbuf_copy_partial>
 800b774:	4603      	mov	r3, r0
 800b776:	461a      	mov	r2, r3
 800b778:	89bb      	ldrh	r3, [r7, #12]
 800b77a:	4293      	cmp	r3, r2
 800b77c:	f040 809f 	bne.w	800b8be <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	68db      	ldr	r3, [r3, #12]
 800b784:	899b      	ldrh	r3, [r3, #12]
 800b786:	b29b      	uxth	r3, r3
 800b788:	4618      	mov	r0, r3
 800b78a:	f7f9 fb3f 	bl	8004e0c <lwip_htons>
 800b78e:	4603      	mov	r3, r0
 800b790:	b2db      	uxtb	r3, r3
 800b792:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b796:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800b798:	2300      	movs	r3, #0
 800b79a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800b79c:	7efb      	ldrb	r3, [r7, #27]
 800b79e:	f003 0308 	and.w	r3, r3, #8
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d007      	beq.n	800b7b6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800b7a6:	7efb      	ldrb	r3, [r7, #27]
 800b7a8:	f023 0308 	bic.w	r3, r3, #8
 800b7ac:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800b7ae:	7ebb      	ldrb	r3, [r7, #26]
 800b7b0:	f043 0308 	orr.w	r3, r3, #8
 800b7b4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800b7b6:	7efb      	ldrb	r3, [r7, #27]
 800b7b8:	f003 0301 	and.w	r3, r3, #1
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d007      	beq.n	800b7d0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800b7c0:	7efb      	ldrb	r3, [r7, #27]
 800b7c2:	f023 0301 	bic.w	r3, r3, #1
 800b7c6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800b7c8:	7ebb      	ldrb	r3, [r7, #26]
 800b7ca:	f043 0301 	orr.w	r3, r3, #1
 800b7ce:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7f9 fb2d 	bl	8004e36 <lwip_htonl>
 800b7dc:	4602      	mov	r2, r0
 800b7de:	887b      	ldrh	r3, [r7, #2]
 800b7e0:	18d1      	adds	r1, r2, r3
 800b7e2:	7eba      	ldrb	r2, [r7, #26]
 800b7e4:	7bfb      	ldrb	r3, [r7, #15]
 800b7e6:	9300      	str	r3, [sp, #0]
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	6939      	ldr	r1, [r7, #16]
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f7ff fa4f 	bl	800ac90 <tcp_create_segment>
 800b7f2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800b7f4:	69fb      	ldr	r3, [r7, #28]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d063      	beq.n	800b8c2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	4618      	mov	r0, r3
 800b800:	f7fa fe40 	bl	8006484 <pbuf_clen>
 800b804:	4603      	mov	r3, r0
 800b806:	461a      	mov	r2, r3
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b80e:	1a9b      	subs	r3, r3, r2
 800b810:	b29a      	uxth	r2, r3
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	6858      	ldr	r0, [r3, #4]
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	685b      	ldr	r3, [r3, #4]
 800b820:	891a      	ldrh	r2, [r3, #8]
 800b822:	89bb      	ldrh	r3, [r7, #12]
 800b824:	1ad3      	subs	r3, r2, r3
 800b826:	b29b      	uxth	r3, r3
 800b828:	4619      	mov	r1, r3
 800b82a:	f7fa fc1d 	bl	8006068 <pbuf_realloc>
  useg->len -= remainder;
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	891a      	ldrh	r2, [r3, #8]
 800b832:	89bb      	ldrh	r3, [r7, #12]
 800b834:	1ad3      	subs	r3, r2, r3
 800b836:	b29a      	uxth	r2, r3
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	68db      	ldr	r3, [r3, #12]
 800b840:	899b      	ldrh	r3, [r3, #12]
 800b842:	b29c      	uxth	r4, r3
 800b844:	7efb      	ldrb	r3, [r7, #27]
 800b846:	b29b      	uxth	r3, r3
 800b848:	4618      	mov	r0, r3
 800b84a:	f7f9 fadf 	bl	8004e0c <lwip_htons>
 800b84e:	4603      	mov	r3, r0
 800b850:	461a      	mov	r2, r3
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	68db      	ldr	r3, [r3, #12]
 800b856:	4322      	orrs	r2, r4
 800b858:	b292      	uxth	r2, r2
 800b85a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	4618      	mov	r0, r3
 800b862:	f7fa fe0f 	bl	8006484 <pbuf_clen>
 800b866:	4603      	mov	r3, r0
 800b868:	461a      	mov	r2, r3
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b870:	4413      	add	r3, r2
 800b872:	b29a      	uxth	r2, r3
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b87a:	69fb      	ldr	r3, [r7, #28]
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	4618      	mov	r0, r3
 800b880:	f7fa fe00 	bl	8006484 <pbuf_clen>
 800b884:	4603      	mov	r3, r0
 800b886:	461a      	mov	r2, r3
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b88e:	4413      	add	r3, r2
 800b890:	b29a      	uxth	r2, r3
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	681a      	ldr	r2, [r3, #0]
 800b89c:	69fb      	ldr	r3, [r7, #28]
 800b89e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	69fa      	ldr	r2, [r7, #28]
 800b8a4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800b8a6:	69fb      	ldr	r3, [r7, #28]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d103      	bne.n	800b8b6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	e016      	b.n	800b8e8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800b8ba:	bf00      	nop
 800b8bc:	e002      	b.n	800b8c4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b8be:	bf00      	nop
 800b8c0:	e000      	b.n	800b8c4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b8c2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800b8c4:	69fb      	ldr	r3, [r7, #28]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d006      	beq.n	800b8d8 <tcp_split_unsent_seg+0x25c>
 800b8ca:	4b09      	ldr	r3, [pc, #36]	; (800b8f0 <tcp_split_unsent_seg+0x274>)
 800b8cc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800b8d0:	490d      	ldr	r1, [pc, #52]	; (800b908 <tcp_split_unsent_seg+0x28c>)
 800b8d2:	4809      	ldr	r0, [pc, #36]	; (800b8f8 <tcp_split_unsent_seg+0x27c>)
 800b8d4:	f003 fef4 	bl	800f6c0 <iprintf>
  if (p != NULL) {
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d002      	beq.n	800b8e4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800b8de:	6938      	ldr	r0, [r7, #16]
 800b8e0:	f7fa fd48 	bl	8006374 <pbuf_free>
  }

  return ERR_MEM;
 800b8e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3724      	adds	r7, #36	; 0x24
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd90      	pop	{r4, r7, pc}
 800b8f0:	08012230 	.word	0x08012230
 800b8f4:	080125c4 	.word	0x080125c4
 800b8f8:	08012284 	.word	0x08012284
 800b8fc:	080125e8 	.word	0x080125e8
 800b900:	0801260c 	.word	0x0801260c
 800b904:	0801261c 	.word	0x0801261c
 800b908:	0801262c 	.word	0x0801262c

0800b90c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b90c:	b590      	push	{r4, r7, lr}
 800b90e:	b085      	sub	sp, #20
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d106      	bne.n	800b928 <tcp_send_fin+0x1c>
 800b91a:	4b21      	ldr	r3, [pc, #132]	; (800b9a0 <tcp_send_fin+0x94>)
 800b91c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800b920:	4920      	ldr	r1, [pc, #128]	; (800b9a4 <tcp_send_fin+0x98>)
 800b922:	4821      	ldr	r0, [pc, #132]	; (800b9a8 <tcp_send_fin+0x9c>)
 800b924:	f003 fecc 	bl	800f6c0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d02e      	beq.n	800b98e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b934:	60fb      	str	r3, [r7, #12]
 800b936:	e002      	b.n	800b93e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d1f8      	bne.n	800b938 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	68db      	ldr	r3, [r3, #12]
 800b94a:	899b      	ldrh	r3, [r3, #12]
 800b94c:	b29b      	uxth	r3, r3
 800b94e:	4618      	mov	r0, r3
 800b950:	f7f9 fa5c 	bl	8004e0c <lwip_htons>
 800b954:	4603      	mov	r3, r0
 800b956:	b2db      	uxtb	r3, r3
 800b958:	f003 0307 	and.w	r3, r3, #7
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d116      	bne.n	800b98e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	68db      	ldr	r3, [r3, #12]
 800b964:	899b      	ldrh	r3, [r3, #12]
 800b966:	b29c      	uxth	r4, r3
 800b968:	2001      	movs	r0, #1
 800b96a:	f7f9 fa4f 	bl	8004e0c <lwip_htons>
 800b96e:	4603      	mov	r3, r0
 800b970:	461a      	mov	r2, r3
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	68db      	ldr	r3, [r3, #12]
 800b976:	4322      	orrs	r2, r4
 800b978:	b292      	uxth	r2, r2
 800b97a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	8b5b      	ldrh	r3, [r3, #26]
 800b980:	f043 0320 	orr.w	r3, r3, #32
 800b984:	b29a      	uxth	r2, r3
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b98a:	2300      	movs	r3, #0
 800b98c:	e004      	b.n	800b998 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b98e:	2101      	movs	r1, #1
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f000 f80b 	bl	800b9ac <tcp_enqueue_flags>
 800b996:	4603      	mov	r3, r0
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3714      	adds	r7, #20
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd90      	pop	{r4, r7, pc}
 800b9a0:	08012230 	.word	0x08012230
 800b9a4:	08012638 	.word	0x08012638
 800b9a8:	08012284 	.word	0x08012284

0800b9ac <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b08a      	sub	sp, #40	; 0x28
 800b9b0:	af02      	add	r7, sp, #8
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	460b      	mov	r3, r1
 800b9b6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b9c0:	78fb      	ldrb	r3, [r7, #3]
 800b9c2:	f003 0303 	and.w	r3, r3, #3
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d106      	bne.n	800b9d8 <tcp_enqueue_flags+0x2c>
 800b9ca:	4b67      	ldr	r3, [pc, #412]	; (800bb68 <tcp_enqueue_flags+0x1bc>)
 800b9cc:	f240 4211 	movw	r2, #1041	; 0x411
 800b9d0:	4966      	ldr	r1, [pc, #408]	; (800bb6c <tcp_enqueue_flags+0x1c0>)
 800b9d2:	4867      	ldr	r0, [pc, #412]	; (800bb70 <tcp_enqueue_flags+0x1c4>)
 800b9d4:	f003 fe74 	bl	800f6c0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d106      	bne.n	800b9ec <tcp_enqueue_flags+0x40>
 800b9de:	4b62      	ldr	r3, [pc, #392]	; (800bb68 <tcp_enqueue_flags+0x1bc>)
 800b9e0:	f240 4213 	movw	r2, #1043	; 0x413
 800b9e4:	4963      	ldr	r1, [pc, #396]	; (800bb74 <tcp_enqueue_flags+0x1c8>)
 800b9e6:	4862      	ldr	r0, [pc, #392]	; (800bb70 <tcp_enqueue_flags+0x1c4>)
 800b9e8:	f003 fe6a 	bl	800f6c0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800b9ec:	78fb      	ldrb	r3, [r7, #3]
 800b9ee:	f003 0302 	and.w	r3, r3, #2
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d001      	beq.n	800b9fa <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b9fa:	7ffb      	ldrb	r3, [r7, #31]
 800b9fc:	009b      	lsls	r3, r3, #2
 800b9fe:	b2db      	uxtb	r3, r3
 800ba00:	f003 0304 	and.w	r3, r3, #4
 800ba04:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ba06:	7dfb      	ldrb	r3, [r7, #23]
 800ba08:	b29b      	uxth	r3, r3
 800ba0a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ba0e:	4619      	mov	r1, r3
 800ba10:	2036      	movs	r0, #54	; 0x36
 800ba12:	f7fa f9cb 	bl	8005dac <pbuf_alloc>
 800ba16:	6138      	str	r0, [r7, #16]
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d109      	bne.n	800ba32 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	8b5b      	ldrh	r3, [r3, #26]
 800ba22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba26:	b29a      	uxth	r2, r3
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ba2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ba30:	e095      	b.n	800bb5e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	895a      	ldrh	r2, [r3, #10]
 800ba36:	7dfb      	ldrb	r3, [r7, #23]
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d206      	bcs.n	800ba4c <tcp_enqueue_flags+0xa0>
 800ba3e:	4b4a      	ldr	r3, [pc, #296]	; (800bb68 <tcp_enqueue_flags+0x1bc>)
 800ba40:	f240 4239 	movw	r2, #1081	; 0x439
 800ba44:	494c      	ldr	r1, [pc, #304]	; (800bb78 <tcp_enqueue_flags+0x1cc>)
 800ba46:	484a      	ldr	r0, [pc, #296]	; (800bb70 <tcp_enqueue_flags+0x1c4>)
 800ba48:	f003 fe3a 	bl	800f6c0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ba50:	78fa      	ldrb	r2, [r7, #3]
 800ba52:	7ffb      	ldrb	r3, [r7, #31]
 800ba54:	9300      	str	r3, [sp, #0]
 800ba56:	460b      	mov	r3, r1
 800ba58:	6939      	ldr	r1, [r7, #16]
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f7ff f918 	bl	800ac90 <tcp_create_segment>
 800ba60:	60f8      	str	r0, [r7, #12]
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d109      	bne.n	800ba7c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	8b5b      	ldrh	r3, [r3, #26]
 800ba6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba70:	b29a      	uxth	r2, r3
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ba76:	f04f 33ff 	mov.w	r3, #4294967295
 800ba7a:	e070      	b.n	800bb5e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	68db      	ldr	r3, [r3, #12]
 800ba80:	f003 0303 	and.w	r3, r3, #3
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d006      	beq.n	800ba96 <tcp_enqueue_flags+0xea>
 800ba88:	4b37      	ldr	r3, [pc, #220]	; (800bb68 <tcp_enqueue_flags+0x1bc>)
 800ba8a:	f240 4242 	movw	r2, #1090	; 0x442
 800ba8e:	493b      	ldr	r1, [pc, #236]	; (800bb7c <tcp_enqueue_flags+0x1d0>)
 800ba90:	4837      	ldr	r0, [pc, #220]	; (800bb70 <tcp_enqueue_flags+0x1c4>)
 800ba92:	f003 fe15 	bl	800f6c0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	891b      	ldrh	r3, [r3, #8]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d006      	beq.n	800baac <tcp_enqueue_flags+0x100>
 800ba9e:	4b32      	ldr	r3, [pc, #200]	; (800bb68 <tcp_enqueue_flags+0x1bc>)
 800baa0:	f240 4243 	movw	r2, #1091	; 0x443
 800baa4:	4936      	ldr	r1, [pc, #216]	; (800bb80 <tcp_enqueue_flags+0x1d4>)
 800baa6:	4832      	ldr	r0, [pc, #200]	; (800bb70 <tcp_enqueue_flags+0x1c4>)
 800baa8:	f003 fe0a 	bl	800f6c0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d103      	bne.n	800babc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	68fa      	ldr	r2, [r7, #12]
 800bab8:	66da      	str	r2, [r3, #108]	; 0x6c
 800baba:	e00d      	b.n	800bad8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bac0:	61bb      	str	r3, [r7, #24]
 800bac2:	e002      	b.n	800baca <tcp_enqueue_flags+0x11e>
 800bac4:	69bb      	ldr	r3, [r7, #24]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	61bb      	str	r3, [r7, #24]
 800baca:	69bb      	ldr	r3, [r7, #24]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d1f8      	bne.n	800bac4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800bad2:	69bb      	ldr	r3, [r7, #24]
 800bad4:	68fa      	ldr	r2, [r7, #12]
 800bad6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2200      	movs	r2, #0
 800badc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800bae0:	78fb      	ldrb	r3, [r7, #3]
 800bae2:	f003 0302 	and.w	r3, r3, #2
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d104      	bne.n	800baf4 <tcp_enqueue_flags+0x148>
 800baea:	78fb      	ldrb	r3, [r7, #3]
 800baec:	f003 0301 	and.w	r3, r3, #1
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d004      	beq.n	800bafe <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800baf8:	1c5a      	adds	r2, r3, #1
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800bafe:	78fb      	ldrb	r3, [r7, #3]
 800bb00:	f003 0301 	and.w	r3, r3, #1
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d006      	beq.n	800bb16 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	8b5b      	ldrh	r3, [r3, #26]
 800bb0c:	f043 0320 	orr.w	r3, r3, #32
 800bb10:	b29a      	uxth	r2, r3
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f7fa fcb2 	bl	8006484 <pbuf_clen>
 800bb20:	4603      	mov	r3, r0
 800bb22:	461a      	mov	r2, r3
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bb2a:	4413      	add	r3, r2
 800bb2c:	b29a      	uxth	r2, r3
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d00e      	beq.n	800bb5c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d10a      	bne.n	800bb5c <tcp_enqueue_flags+0x1b0>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d106      	bne.n	800bb5c <tcp_enqueue_flags+0x1b0>
 800bb4e:	4b06      	ldr	r3, [pc, #24]	; (800bb68 <tcp_enqueue_flags+0x1bc>)
 800bb50:	f240 4265 	movw	r2, #1125	; 0x465
 800bb54:	490b      	ldr	r1, [pc, #44]	; (800bb84 <tcp_enqueue_flags+0x1d8>)
 800bb56:	4806      	ldr	r0, [pc, #24]	; (800bb70 <tcp_enqueue_flags+0x1c4>)
 800bb58:	f003 fdb2 	bl	800f6c0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800bb5c:	2300      	movs	r3, #0
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3720      	adds	r7, #32
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	08012230 	.word	0x08012230
 800bb6c:	08012654 	.word	0x08012654
 800bb70:	08012284 	.word	0x08012284
 800bb74:	080126ac 	.word	0x080126ac
 800bb78:	080126cc 	.word	0x080126cc
 800bb7c:	08012708 	.word	0x08012708
 800bb80:	08012720 	.word	0x08012720
 800bb84:	0801274c 	.word	0x0801274c

0800bb88 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800bb88:	b5b0      	push	{r4, r5, r7, lr}
 800bb8a:	b08a      	sub	sp, #40	; 0x28
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d106      	bne.n	800bba4 <tcp_output+0x1c>
 800bb96:	4b9e      	ldr	r3, [pc, #632]	; (800be10 <tcp_output+0x288>)
 800bb98:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800bb9c:	499d      	ldr	r1, [pc, #628]	; (800be14 <tcp_output+0x28c>)
 800bb9e:	489e      	ldr	r0, [pc, #632]	; (800be18 <tcp_output+0x290>)
 800bba0:	f003 fd8e 	bl	800f6c0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	7d1b      	ldrb	r3, [r3, #20]
 800bba8:	2b01      	cmp	r3, #1
 800bbaa:	d106      	bne.n	800bbba <tcp_output+0x32>
 800bbac:	4b98      	ldr	r3, [pc, #608]	; (800be10 <tcp_output+0x288>)
 800bbae:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800bbb2:	499a      	ldr	r1, [pc, #616]	; (800be1c <tcp_output+0x294>)
 800bbb4:	4898      	ldr	r0, [pc, #608]	; (800be18 <tcp_output+0x290>)
 800bbb6:	f003 fd83 	bl	800f6c0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800bbba:	4b99      	ldr	r3, [pc, #612]	; (800be20 <tcp_output+0x298>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d101      	bne.n	800bbc8 <tcp_output+0x40>
    return ERR_OK;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	e1ce      	b.n	800bf66 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	bf28      	it	cs
 800bbd8:	4613      	movcs	r3, r2
 800bbda:	b29b      	uxth	r3, r3
 800bbdc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbe2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800bbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d10b      	bne.n	800bc02 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	8b5b      	ldrh	r3, [r3, #26]
 800bbee:	f003 0302 	and.w	r3, r3, #2
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	f000 81aa 	beq.w	800bf4c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f000 fdcb 	bl	800c794 <tcp_send_empty_ack>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	e1b1      	b.n	800bf66 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800bc02:	6879      	ldr	r1, [r7, #4]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	3304      	adds	r3, #4
 800bc08:	461a      	mov	r2, r3
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f7ff f824 	bl	800ac58 <tcp_route>
 800bc10:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d102      	bne.n	800bc1e <tcp_output+0x96>
    return ERR_RTE;
 800bc18:	f06f 0303 	mvn.w	r3, #3
 800bc1c:	e1a3      	b.n	800bf66 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d003      	beq.n	800bc2c <tcp_output+0xa4>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d111      	bne.n	800bc50 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d002      	beq.n	800bc38 <tcp_output+0xb0>
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	3304      	adds	r3, #4
 800bc36:	e000      	b.n	800bc3a <tcp_output+0xb2>
 800bc38:	2300      	movs	r3, #0
 800bc3a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d102      	bne.n	800bc48 <tcp_output+0xc0>
      return ERR_RTE;
 800bc42:	f06f 0303 	mvn.w	r3, #3
 800bc46:	e18e      	b.n	800bf66 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	681a      	ldr	r2, [r3, #0]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800bc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc52:	68db      	ldr	r3, [r3, #12]
 800bc54:	685b      	ldr	r3, [r3, #4]
 800bc56:	4618      	mov	r0, r3
 800bc58:	f7f9 f8ed 	bl	8004e36 <lwip_htonl>
 800bc5c:	4602      	mov	r2, r0
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc62:	1ad3      	subs	r3, r2, r3
 800bc64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc66:	8912      	ldrh	r2, [r2, #8]
 800bc68:	4413      	add	r3, r2
 800bc6a:	69ba      	ldr	r2, [r7, #24]
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d227      	bcs.n	800bcc0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bc76:	461a      	mov	r2, r3
 800bc78:	69bb      	ldr	r3, [r7, #24]
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	d114      	bne.n	800bca8 <tcp_output+0x120>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d110      	bne.n	800bca8 <tcp_output+0x120>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d10b      	bne.n	800bca8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2200      	movs	r2, #0
 800bc94:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2200      	movs	r2, #0
 800bca4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	8b5b      	ldrh	r3, [r3, #26]
 800bcac:	f003 0302 	and.w	r3, r3, #2
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	f000 814d 	beq.w	800bf50 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f000 fd6c 	bl	800c794 <tcp_send_empty_ack>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	e152      	b.n	800bf66 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bccc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800bcce:	6a3b      	ldr	r3, [r7, #32]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	f000 811c 	beq.w	800bf0e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800bcd6:	e002      	b.n	800bcde <tcp_output+0x156>
 800bcd8:	6a3b      	ldr	r3, [r7, #32]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	623b      	str	r3, [r7, #32]
 800bcde:	6a3b      	ldr	r3, [r7, #32]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d1f8      	bne.n	800bcd8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800bce6:	e112      	b.n	800bf0e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800bce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcea:	68db      	ldr	r3, [r3, #12]
 800bcec:	899b      	ldrh	r3, [r3, #12]
 800bcee:	b29b      	uxth	r3, r3
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f7f9 f88b 	bl	8004e0c <lwip_htons>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	b2db      	uxtb	r3, r3
 800bcfa:	f003 0304 	and.w	r3, r3, #4
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d006      	beq.n	800bd10 <tcp_output+0x188>
 800bd02:	4b43      	ldr	r3, [pc, #268]	; (800be10 <tcp_output+0x288>)
 800bd04:	f240 5236 	movw	r2, #1334	; 0x536
 800bd08:	4946      	ldr	r1, [pc, #280]	; (800be24 <tcp_output+0x29c>)
 800bd0a:	4843      	ldr	r0, [pc, #268]	; (800be18 <tcp_output+0x290>)
 800bd0c:	f003 fcd8 	bl	800f6c0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d01f      	beq.n	800bd58 <tcp_output+0x1d0>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	8b5b      	ldrh	r3, [r3, #26]
 800bd1c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d119      	bne.n	800bd58 <tcp_output+0x1d0>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d00b      	beq.n	800bd44 <tcp_output+0x1bc>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d110      	bne.n	800bd58 <tcp_output+0x1d0>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd3a:	891a      	ldrh	r2, [r3, #8]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d209      	bcs.n	800bd58 <tcp_output+0x1d0>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d004      	beq.n	800bd58 <tcp_output+0x1d0>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bd54:	2b08      	cmp	r3, #8
 800bd56:	d901      	bls.n	800bd5c <tcp_output+0x1d4>
 800bd58:	2301      	movs	r3, #1
 800bd5a:	e000      	b.n	800bd5e <tcp_output+0x1d6>
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d106      	bne.n	800bd70 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	8b5b      	ldrh	r3, [r3, #26]
 800bd66:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	f000 80e4 	beq.w	800bf38 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	7d1b      	ldrb	r3, [r3, #20]
 800bd74:	2b02      	cmp	r3, #2
 800bd76:	d00d      	beq.n	800bd94 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800bd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd7a:	68db      	ldr	r3, [r3, #12]
 800bd7c:	899b      	ldrh	r3, [r3, #12]
 800bd7e:	b29c      	uxth	r4, r3
 800bd80:	2010      	movs	r0, #16
 800bd82:	f7f9 f843 	bl	8004e0c <lwip_htons>
 800bd86:	4603      	mov	r3, r0
 800bd88:	461a      	mov	r2, r3
 800bd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8c:	68db      	ldr	r3, [r3, #12]
 800bd8e:	4322      	orrs	r2, r4
 800bd90:	b292      	uxth	r2, r2
 800bd92:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800bd94:	697a      	ldr	r2, [r7, #20]
 800bd96:	6879      	ldr	r1, [r7, #4]
 800bd98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd9a:	f000 f909 	bl	800bfb0 <tcp_output_segment>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800bda2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d009      	beq.n	800bdbe <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	8b5b      	ldrh	r3, [r3, #26]
 800bdae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdb2:	b29a      	uxth	r2, r3
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	835a      	strh	r2, [r3, #26]
      return err;
 800bdb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdbc:	e0d3      	b.n	800bf66 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800bdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	7d1b      	ldrb	r3, [r3, #20]
 800bdca:	2b02      	cmp	r3, #2
 800bdcc:	d006      	beq.n	800bddc <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	8b5b      	ldrh	r3, [r3, #26]
 800bdd2:	f023 0303 	bic.w	r3, r3, #3
 800bdd6:	b29a      	uxth	r2, r3
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdde:	68db      	ldr	r3, [r3, #12]
 800bde0:	685b      	ldr	r3, [r3, #4]
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7f9 f827 	bl	8004e36 <lwip_htonl>
 800bde8:	4604      	mov	r4, r0
 800bdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdec:	891b      	ldrh	r3, [r3, #8]
 800bdee:	461d      	mov	r5, r3
 800bdf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf2:	68db      	ldr	r3, [r3, #12]
 800bdf4:	899b      	ldrh	r3, [r3, #12]
 800bdf6:	b29b      	uxth	r3, r3
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f7f9 f807 	bl	8004e0c <lwip_htons>
 800bdfe:	4603      	mov	r3, r0
 800be00:	b2db      	uxtb	r3, r3
 800be02:	f003 0303 	and.w	r3, r3, #3
 800be06:	2b00      	cmp	r3, #0
 800be08:	d00e      	beq.n	800be28 <tcp_output+0x2a0>
 800be0a:	2301      	movs	r3, #1
 800be0c:	e00d      	b.n	800be2a <tcp_output+0x2a2>
 800be0e:	bf00      	nop
 800be10:	08012230 	.word	0x08012230
 800be14:	08012774 	.word	0x08012774
 800be18:	08012284 	.word	0x08012284
 800be1c:	0801278c 	.word	0x0801278c
 800be20:	2000694c 	.word	0x2000694c
 800be24:	080127b4 	.word	0x080127b4
 800be28:	2300      	movs	r3, #0
 800be2a:	442b      	add	r3, r5
 800be2c:	4423      	add	r3, r4
 800be2e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	1ad3      	subs	r3, r2, r3
 800be38:	2b00      	cmp	r3, #0
 800be3a:	da02      	bge.n	800be42 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	68ba      	ldr	r2, [r7, #8]
 800be40:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800be42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be44:	891b      	ldrh	r3, [r3, #8]
 800be46:	461c      	mov	r4, r3
 800be48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4a:	68db      	ldr	r3, [r3, #12]
 800be4c:	899b      	ldrh	r3, [r3, #12]
 800be4e:	b29b      	uxth	r3, r3
 800be50:	4618      	mov	r0, r3
 800be52:	f7f8 ffdb 	bl	8004e0c <lwip_htons>
 800be56:	4603      	mov	r3, r0
 800be58:	b2db      	uxtb	r3, r3
 800be5a:	f003 0303 	and.w	r3, r3, #3
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d001      	beq.n	800be66 <tcp_output+0x2de>
 800be62:	2301      	movs	r3, #1
 800be64:	e000      	b.n	800be68 <tcp_output+0x2e0>
 800be66:	2300      	movs	r3, #0
 800be68:	4423      	add	r3, r4
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d049      	beq.n	800bf02 <tcp_output+0x37a>
      seg->next = NULL;
 800be6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be70:	2200      	movs	r2, #0
 800be72:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d105      	bne.n	800be88 <tcp_output+0x300>
        pcb->unacked = seg;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be80:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800be82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be84:	623b      	str	r3, [r7, #32]
 800be86:	e03f      	b.n	800bf08 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800be88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be8a:	68db      	ldr	r3, [r3, #12]
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	4618      	mov	r0, r3
 800be90:	f7f8 ffd1 	bl	8004e36 <lwip_htonl>
 800be94:	4604      	mov	r4, r0
 800be96:	6a3b      	ldr	r3, [r7, #32]
 800be98:	68db      	ldr	r3, [r3, #12]
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7f8 ffca 	bl	8004e36 <lwip_htonl>
 800bea2:	4603      	mov	r3, r0
 800bea4:	1ae3      	subs	r3, r4, r3
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	da24      	bge.n	800bef4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	3370      	adds	r3, #112	; 0x70
 800beae:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800beb0:	e002      	b.n	800beb8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800beb2:	69fb      	ldr	r3, [r7, #28]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800beb8:	69fb      	ldr	r3, [r7, #28]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d011      	beq.n	800bee4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bec0:	69fb      	ldr	r3, [r7, #28]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	68db      	ldr	r3, [r3, #12]
 800bec6:	685b      	ldr	r3, [r3, #4]
 800bec8:	4618      	mov	r0, r3
 800beca:	f7f8 ffb4 	bl	8004e36 <lwip_htonl>
 800bece:	4604      	mov	r4, r0
 800bed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed2:	68db      	ldr	r3, [r3, #12]
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7f8 ffad 	bl	8004e36 <lwip_htonl>
 800bedc:	4603      	mov	r3, r0
 800bede:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	dbe6      	blt.n	800beb2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800bee4:	69fb      	ldr	r3, [r7, #28]
 800bee6:	681a      	ldr	r2, [r3, #0]
 800bee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beea:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800beec:	69fb      	ldr	r3, [r7, #28]
 800beee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bef0:	601a      	str	r2, [r3, #0]
 800bef2:	e009      	b.n	800bf08 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800bef4:	6a3b      	ldr	r3, [r7, #32]
 800bef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bef8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800befa:	6a3b      	ldr	r3, [r7, #32]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	623b      	str	r3, [r7, #32]
 800bf00:	e002      	b.n	800bf08 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800bf02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf04:	f7fb ff05 	bl	8007d12 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf0c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800bf0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d012      	beq.n	800bf3a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800bf14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf16:	68db      	ldr	r3, [r3, #12]
 800bf18:	685b      	ldr	r3, [r3, #4]
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f7f8 ff8b 	bl	8004e36 <lwip_htonl>
 800bf20:	4602      	mov	r2, r0
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf26:	1ad3      	subs	r3, r2, r3
 800bf28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf2a:	8912      	ldrh	r2, [r2, #8]
 800bf2c:	4413      	add	r3, r2
  while (seg != NULL &&
 800bf2e:	69ba      	ldr	r2, [r7, #24]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	f4bf aed9 	bcs.w	800bce8 <tcp_output+0x160>
 800bf36:	e000      	b.n	800bf3a <tcp_output+0x3b2>
      break;
 800bf38:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d108      	bne.n	800bf54 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2200      	movs	r2, #0
 800bf46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800bf4a:	e004      	b.n	800bf56 <tcp_output+0x3ce>
    goto output_done;
 800bf4c:	bf00      	nop
 800bf4e:	e002      	b.n	800bf56 <tcp_output+0x3ce>
    goto output_done;
 800bf50:	bf00      	nop
 800bf52:	e000      	b.n	800bf56 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800bf54:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	8b5b      	ldrh	r3, [r3, #26]
 800bf5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf5e:	b29a      	uxth	r2, r3
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800bf64:	2300      	movs	r3, #0
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3728      	adds	r7, #40	; 0x28
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bdb0      	pop	{r4, r5, r7, pc}
 800bf6e:	bf00      	nop

0800bf70 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b082      	sub	sp, #8
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d106      	bne.n	800bf8c <tcp_output_segment_busy+0x1c>
 800bf7e:	4b09      	ldr	r3, [pc, #36]	; (800bfa4 <tcp_output_segment_busy+0x34>)
 800bf80:	f240 529a 	movw	r2, #1434	; 0x59a
 800bf84:	4908      	ldr	r1, [pc, #32]	; (800bfa8 <tcp_output_segment_busy+0x38>)
 800bf86:	4809      	ldr	r0, [pc, #36]	; (800bfac <tcp_output_segment_busy+0x3c>)
 800bf88:	f003 fb9a 	bl	800f6c0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	685b      	ldr	r3, [r3, #4]
 800bf90:	7b9b      	ldrb	r3, [r3, #14]
 800bf92:	2b01      	cmp	r3, #1
 800bf94:	d001      	beq.n	800bf9a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800bf96:	2301      	movs	r3, #1
 800bf98:	e000      	b.n	800bf9c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800bf9a:	2300      	movs	r3, #0
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3708      	adds	r7, #8
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}
 800bfa4:	08012230 	.word	0x08012230
 800bfa8:	080127cc 	.word	0x080127cc
 800bfac:	08012284 	.word	0x08012284

0800bfb0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800bfb0:	b5b0      	push	{r4, r5, r7, lr}
 800bfb2:	b08c      	sub	sp, #48	; 0x30
 800bfb4:	af04      	add	r7, sp, #16
 800bfb6:	60f8      	str	r0, [r7, #12]
 800bfb8:	60b9      	str	r1, [r7, #8]
 800bfba:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d106      	bne.n	800bfd0 <tcp_output_segment+0x20>
 800bfc2:	4b63      	ldr	r3, [pc, #396]	; (800c150 <tcp_output_segment+0x1a0>)
 800bfc4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800bfc8:	4962      	ldr	r1, [pc, #392]	; (800c154 <tcp_output_segment+0x1a4>)
 800bfca:	4863      	ldr	r0, [pc, #396]	; (800c158 <tcp_output_segment+0x1a8>)
 800bfcc:	f003 fb78 	bl	800f6c0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d106      	bne.n	800bfe4 <tcp_output_segment+0x34>
 800bfd6:	4b5e      	ldr	r3, [pc, #376]	; (800c150 <tcp_output_segment+0x1a0>)
 800bfd8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800bfdc:	495f      	ldr	r1, [pc, #380]	; (800c15c <tcp_output_segment+0x1ac>)
 800bfde:	485e      	ldr	r0, [pc, #376]	; (800c158 <tcp_output_segment+0x1a8>)
 800bfe0:	f003 fb6e 	bl	800f6c0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d106      	bne.n	800bff8 <tcp_output_segment+0x48>
 800bfea:	4b59      	ldr	r3, [pc, #356]	; (800c150 <tcp_output_segment+0x1a0>)
 800bfec:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800bff0:	495b      	ldr	r1, [pc, #364]	; (800c160 <tcp_output_segment+0x1b0>)
 800bff2:	4859      	ldr	r0, [pc, #356]	; (800c158 <tcp_output_segment+0x1a8>)
 800bff4:	f003 fb64 	bl	800f6c0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800bff8:	68f8      	ldr	r0, [r7, #12]
 800bffa:	f7ff ffb9 	bl	800bf70 <tcp_output_segment_busy>
 800bffe:	4603      	mov	r3, r0
 800c000:	2b00      	cmp	r3, #0
 800c002:	d001      	beq.n	800c008 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800c004:	2300      	movs	r3, #0
 800c006:	e09f      	b.n	800c148 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	68dc      	ldr	r4, [r3, #12]
 800c010:	4610      	mov	r0, r2
 800c012:	f7f8 ff10 	bl	8004e36 <lwip_htonl>
 800c016:	4603      	mov	r3, r0
 800c018:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	68dc      	ldr	r4, [r3, #12]
 800c022:	4610      	mov	r0, r2
 800c024:	f7f8 fef2 	bl	8004e0c <lwip_htons>
 800c028:	4603      	mov	r3, r0
 800c02a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c030:	68ba      	ldr	r2, [r7, #8]
 800c032:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c034:	441a      	add	r2, r3
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	68db      	ldr	r3, [r3, #12]
 800c03e:	3314      	adds	r3, #20
 800c040:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	7a9b      	ldrb	r3, [r3, #10]
 800c046:	f003 0301 	and.w	r3, r3, #1
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d015      	beq.n	800c07a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	3304      	adds	r3, #4
 800c052:	461a      	mov	r2, r3
 800c054:	6879      	ldr	r1, [r7, #4]
 800c056:	f44f 7006 	mov.w	r0, #536	; 0x218
 800c05a:	f7fc fa37 	bl	80084cc <tcp_eff_send_mss_netif>
 800c05e:	4603      	mov	r3, r0
 800c060:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c062:	8b7b      	ldrh	r3, [r7, #26]
 800c064:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800c068:	4618      	mov	r0, r3
 800c06a:	f7f8 fee4 	bl	8004e36 <lwip_htonl>
 800c06e:	4602      	mov	r2, r0
 800c070:	69fb      	ldr	r3, [r7, #28]
 800c072:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c074:	69fb      	ldr	r3, [r7, #28]
 800c076:	3304      	adds	r3, #4
 800c078:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c080:	2b00      	cmp	r3, #0
 800c082:	da02      	bge.n	800c08a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	2200      	movs	r2, #0
 800c088:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d10c      	bne.n	800c0ac <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800c092:	4b34      	ldr	r3, [pc, #208]	; (800c164 <tcp_output_segment+0x1b4>)
 800c094:	681a      	ldr	r2, [r3, #0]
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	68db      	ldr	r3, [r3, #12]
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f7f8 fec8 	bl	8004e36 <lwip_htonl>
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	68da      	ldr	r2, [r3, #12]
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	1ad3      	subs	r3, r2, r3
 800c0b8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	8959      	ldrh	r1, [r3, #10]
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	685b      	ldr	r3, [r3, #4]
 800c0c4:	8b3a      	ldrh	r2, [r7, #24]
 800c0c6:	1a8a      	subs	r2, r1, r2
 800c0c8:	b292      	uxth	r2, r2
 800c0ca:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	685b      	ldr	r3, [r3, #4]
 800c0d0:	8919      	ldrh	r1, [r3, #8]
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	685b      	ldr	r3, [r3, #4]
 800c0d6:	8b3a      	ldrh	r2, [r7, #24]
 800c0d8:	1a8a      	subs	r2, r1, r2
 800c0da:	b292      	uxth	r2, r2
 800c0dc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	685b      	ldr	r3, [r3, #4]
 800c0e2:	68fa      	ldr	r2, [r7, #12]
 800c0e4:	68d2      	ldr	r2, [r2, #12]
 800c0e6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	68db      	ldr	r3, [r3, #12]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	741a      	strb	r2, [r3, #16]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	68db      	ldr	r3, [r3, #12]
 800c0f8:	f103 0214 	add.w	r2, r3, #20
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	7a9b      	ldrb	r3, [r3, #10]
 800c100:	009b      	lsls	r3, r3, #2
 800c102:	f003 0304 	and.w	r3, r3, #4
 800c106:	4413      	add	r3, r2
 800c108:	69fa      	ldr	r2, [r7, #28]
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d006      	beq.n	800c11c <tcp_output_segment+0x16c>
 800c10e:	4b10      	ldr	r3, [pc, #64]	; (800c150 <tcp_output_segment+0x1a0>)
 800c110:	f240 621c 	movw	r2, #1564	; 0x61c
 800c114:	4914      	ldr	r1, [pc, #80]	; (800c168 <tcp_output_segment+0x1b8>)
 800c116:	4810      	ldr	r0, [pc, #64]	; (800c158 <tcp_output_segment+0x1a8>)
 800c118:	f003 fad2 	bl	800f6c0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	6858      	ldr	r0, [r3, #4]
 800c120:	68b9      	ldr	r1, [r7, #8]
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	1d1c      	adds	r4, r3, #4
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	7add      	ldrb	r5, [r3, #11]
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	7a9b      	ldrb	r3, [r3, #10]
 800c12e:	687a      	ldr	r2, [r7, #4]
 800c130:	9202      	str	r2, [sp, #8]
 800c132:	2206      	movs	r2, #6
 800c134:	9201      	str	r2, [sp, #4]
 800c136:	9300      	str	r3, [sp, #0]
 800c138:	462b      	mov	r3, r5
 800c13a:	4622      	mov	r2, r4
 800c13c:	f002 fa36 	bl	800e5ac <ip4_output_if>
 800c140:	4603      	mov	r3, r0
 800c142:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800c144:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3720      	adds	r7, #32
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bdb0      	pop	{r4, r5, r7, pc}
 800c150:	08012230 	.word	0x08012230
 800c154:	080127f4 	.word	0x080127f4
 800c158:	08012284 	.word	0x08012284
 800c15c:	08012814 	.word	0x08012814
 800c160:	08012834 	.word	0x08012834
 800c164:	2000693c 	.word	0x2000693c
 800c168:	08012858 	.word	0x08012858

0800c16c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800c16c:	b5b0      	push	{r4, r5, r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d106      	bne.n	800c188 <tcp_rexmit_rto_prepare+0x1c>
 800c17a:	4b31      	ldr	r3, [pc, #196]	; (800c240 <tcp_rexmit_rto_prepare+0xd4>)
 800c17c:	f240 6263 	movw	r2, #1635	; 0x663
 800c180:	4930      	ldr	r1, [pc, #192]	; (800c244 <tcp_rexmit_rto_prepare+0xd8>)
 800c182:	4831      	ldr	r0, [pc, #196]	; (800c248 <tcp_rexmit_rto_prepare+0xdc>)
 800c184:	f003 fa9c 	bl	800f6c0 <iprintf>

  if (pcb->unacked == NULL) {
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d102      	bne.n	800c196 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800c190:	f06f 0305 	mvn.w	r3, #5
 800c194:	e050      	b.n	800c238 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c19a:	60fb      	str	r3, [r7, #12]
 800c19c:	e00b      	b.n	800c1b6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800c19e:	68f8      	ldr	r0, [r7, #12]
 800c1a0:	f7ff fee6 	bl	800bf70 <tcp_output_segment_busy>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d002      	beq.n	800c1b0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800c1aa:	f06f 0305 	mvn.w	r3, #5
 800c1ae:	e043      	b.n	800c238 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	60fb      	str	r3, [r7, #12]
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d1ef      	bne.n	800c19e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800c1be:	68f8      	ldr	r0, [r7, #12]
 800c1c0:	f7ff fed6 	bl	800bf70 <tcp_output_segment_busy>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d002      	beq.n	800c1d0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800c1ca:	f06f 0305 	mvn.w	r3, #5
 800c1ce:	e033      	b.n	800c238 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	8b5b      	ldrh	r3, [r3, #26]
 800c1ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c1ee:	b29a      	uxth	r2, r3
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	68db      	ldr	r3, [r3, #12]
 800c1f8:	685b      	ldr	r3, [r3, #4]
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f7f8 fe1b 	bl	8004e36 <lwip_htonl>
 800c200:	4604      	mov	r4, r0
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	891b      	ldrh	r3, [r3, #8]
 800c206:	461d      	mov	r5, r3
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	68db      	ldr	r3, [r3, #12]
 800c20c:	899b      	ldrh	r3, [r3, #12]
 800c20e:	b29b      	uxth	r3, r3
 800c210:	4618      	mov	r0, r3
 800c212:	f7f8 fdfb 	bl	8004e0c <lwip_htons>
 800c216:	4603      	mov	r3, r0
 800c218:	b2db      	uxtb	r3, r3
 800c21a:	f003 0303 	and.w	r3, r3, #3
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d001      	beq.n	800c226 <tcp_rexmit_rto_prepare+0xba>
 800c222:	2301      	movs	r3, #1
 800c224:	e000      	b.n	800c228 <tcp_rexmit_rto_prepare+0xbc>
 800c226:	2300      	movs	r3, #0
 800c228:	442b      	add	r3, r5
 800c22a:	18e2      	adds	r2, r4, r3
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2200      	movs	r2, #0
 800c234:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800c236:	2300      	movs	r3, #0
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3710      	adds	r7, #16
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bdb0      	pop	{r4, r5, r7, pc}
 800c240:	08012230 	.word	0x08012230
 800c244:	0801286c 	.word	0x0801286c
 800c248:	08012284 	.word	0x08012284

0800c24c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b082      	sub	sp, #8
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d106      	bne.n	800c268 <tcp_rexmit_rto_commit+0x1c>
 800c25a:	4b0d      	ldr	r3, [pc, #52]	; (800c290 <tcp_rexmit_rto_commit+0x44>)
 800c25c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c260:	490c      	ldr	r1, [pc, #48]	; (800c294 <tcp_rexmit_rto_commit+0x48>)
 800c262:	480d      	ldr	r0, [pc, #52]	; (800c298 <tcp_rexmit_rto_commit+0x4c>)
 800c264:	f003 fa2c 	bl	800f6c0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c26e:	2bff      	cmp	r3, #255	; 0xff
 800c270:	d007      	beq.n	800c282 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c278:	3301      	adds	r3, #1
 800c27a:	b2da      	uxtb	r2, r3
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f7ff fc80 	bl	800bb88 <tcp_output>
}
 800c288:	bf00      	nop
 800c28a:	3708      	adds	r7, #8
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}
 800c290:	08012230 	.word	0x08012230
 800c294:	08012890 	.word	0x08012890
 800c298:	08012284 	.word	0x08012284

0800c29c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b082      	sub	sp, #8
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d106      	bne.n	800c2b8 <tcp_rexmit_rto+0x1c>
 800c2aa:	4b0a      	ldr	r3, [pc, #40]	; (800c2d4 <tcp_rexmit_rto+0x38>)
 800c2ac:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800c2b0:	4909      	ldr	r1, [pc, #36]	; (800c2d8 <tcp_rexmit_rto+0x3c>)
 800c2b2:	480a      	ldr	r0, [pc, #40]	; (800c2dc <tcp_rexmit_rto+0x40>)
 800c2b4:	f003 fa04 	bl	800f6c0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f7ff ff57 	bl	800c16c <tcp_rexmit_rto_prepare>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d102      	bne.n	800c2ca <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f7ff ffc1 	bl	800c24c <tcp_rexmit_rto_commit>
  }
}
 800c2ca:	bf00      	nop
 800c2cc:	3708      	adds	r7, #8
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop
 800c2d4:	08012230 	.word	0x08012230
 800c2d8:	080128b4 	.word	0x080128b4
 800c2dc:	08012284 	.word	0x08012284

0800c2e0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800c2e0:	b590      	push	{r4, r7, lr}
 800c2e2:	b085      	sub	sp, #20
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d106      	bne.n	800c2fc <tcp_rexmit+0x1c>
 800c2ee:	4b2f      	ldr	r3, [pc, #188]	; (800c3ac <tcp_rexmit+0xcc>)
 800c2f0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800c2f4:	492e      	ldr	r1, [pc, #184]	; (800c3b0 <tcp_rexmit+0xd0>)
 800c2f6:	482f      	ldr	r0, [pc, #188]	; (800c3b4 <tcp_rexmit+0xd4>)
 800c2f8:	f003 f9e2 	bl	800f6c0 <iprintf>

  if (pcb->unacked == NULL) {
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c300:	2b00      	cmp	r3, #0
 800c302:	d102      	bne.n	800c30a <tcp_rexmit+0x2a>
    return ERR_VAL;
 800c304:	f06f 0305 	mvn.w	r3, #5
 800c308:	e04c      	b.n	800c3a4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c30e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800c310:	68b8      	ldr	r0, [r7, #8]
 800c312:	f7ff fe2d 	bl	800bf70 <tcp_output_segment_busy>
 800c316:	4603      	mov	r3, r0
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d002      	beq.n	800c322 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800c31c:	f06f 0305 	mvn.w	r3, #5
 800c320:	e040      	b.n	800c3a4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	336c      	adds	r3, #108	; 0x6c
 800c32e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c330:	e002      	b.n	800c338 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d011      	beq.n	800c364 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	68db      	ldr	r3, [r3, #12]
 800c346:	685b      	ldr	r3, [r3, #4]
 800c348:	4618      	mov	r0, r3
 800c34a:	f7f8 fd74 	bl	8004e36 <lwip_htonl>
 800c34e:	4604      	mov	r4, r0
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	68db      	ldr	r3, [r3, #12]
 800c354:	685b      	ldr	r3, [r3, #4]
 800c356:	4618      	mov	r0, r3
 800c358:	f7f8 fd6d 	bl	8004e36 <lwip_htonl>
 800c35c:	4603      	mov	r3, r0
 800c35e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800c360:	2b00      	cmp	r3, #0
 800c362:	dbe6      	blt.n	800c332 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681a      	ldr	r2, [r3, #0]
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	68ba      	ldr	r2, [r7, #8]
 800c370:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d103      	bne.n	800c382 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2200      	movs	r2, #0
 800c37e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c388:	2bff      	cmp	r3, #255	; 0xff
 800c38a:	d007      	beq.n	800c39c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c392:	3301      	adds	r3, #1
 800c394:	b2da      	uxtb	r2, r3
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800c3a2:	2300      	movs	r3, #0
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3714      	adds	r7, #20
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd90      	pop	{r4, r7, pc}
 800c3ac:	08012230 	.word	0x08012230
 800c3b0:	080128d0 	.word	0x080128d0
 800c3b4:	08012284 	.word	0x08012284

0800c3b8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b082      	sub	sp, #8
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d106      	bne.n	800c3d4 <tcp_rexmit_fast+0x1c>
 800c3c6:	4b2a      	ldr	r3, [pc, #168]	; (800c470 <tcp_rexmit_fast+0xb8>)
 800c3c8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800c3cc:	4929      	ldr	r1, [pc, #164]	; (800c474 <tcp_rexmit_fast+0xbc>)
 800c3ce:	482a      	ldr	r0, [pc, #168]	; (800c478 <tcp_rexmit_fast+0xc0>)
 800c3d0:	f003 f976 	bl	800f6c0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d044      	beq.n	800c466 <tcp_rexmit_fast+0xae>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	8b5b      	ldrh	r3, [r3, #26]
 800c3e0:	f003 0304 	and.w	r3, r3, #4
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d13e      	bne.n	800c466 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f7ff ff79 	bl	800c2e0 <tcp_rexmit>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d138      	bne.n	800c466 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c400:	4293      	cmp	r3, r2
 800c402:	bf28      	it	cs
 800c404:	4613      	movcs	r3, r2
 800c406:	b29b      	uxth	r3, r3
 800c408:	0fda      	lsrs	r2, r3, #31
 800c40a:	4413      	add	r3, r2
 800c40c:	105b      	asrs	r3, r3, #1
 800c40e:	b29a      	uxth	r2, r3
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c41c:	461a      	mov	r2, r3
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c422:	005b      	lsls	r3, r3, #1
 800c424:	429a      	cmp	r2, r3
 800c426:	d206      	bcs.n	800c436 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c42c:	005b      	lsls	r3, r3, #1
 800c42e:	b29a      	uxth	r2, r3
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c440:	4619      	mov	r1, r3
 800c442:	0049      	lsls	r1, r1, #1
 800c444:	440b      	add	r3, r1
 800c446:	b29b      	uxth	r3, r3
 800c448:	4413      	add	r3, r2
 800c44a:	b29a      	uxth	r2, r3
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	8b5b      	ldrh	r3, [r3, #26]
 800c456:	f043 0304 	orr.w	r3, r3, #4
 800c45a:	b29a      	uxth	r2, r3
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2200      	movs	r2, #0
 800c464:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800c466:	bf00      	nop
 800c468:	3708      	adds	r7, #8
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}
 800c46e:	bf00      	nop
 800c470:	08012230 	.word	0x08012230
 800c474:	080128e8 	.word	0x080128e8
 800c478:	08012284 	.word	0x08012284

0800c47c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b086      	sub	sp, #24
 800c480:	af00      	add	r7, sp, #0
 800c482:	60f8      	str	r0, [r7, #12]
 800c484:	607b      	str	r3, [r7, #4]
 800c486:	460b      	mov	r3, r1
 800c488:	817b      	strh	r3, [r7, #10]
 800c48a:	4613      	mov	r3, r2
 800c48c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c48e:	897a      	ldrh	r2, [r7, #10]
 800c490:	893b      	ldrh	r3, [r7, #8]
 800c492:	4413      	add	r3, r2
 800c494:	b29b      	uxth	r3, r3
 800c496:	3314      	adds	r3, #20
 800c498:	b29b      	uxth	r3, r3
 800c49a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c49e:	4619      	mov	r1, r3
 800c4a0:	2022      	movs	r0, #34	; 0x22
 800c4a2:	f7f9 fc83 	bl	8005dac <pbuf_alloc>
 800c4a6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d04d      	beq.n	800c54a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c4ae:	897b      	ldrh	r3, [r7, #10]
 800c4b0:	3313      	adds	r3, #19
 800c4b2:	697a      	ldr	r2, [r7, #20]
 800c4b4:	8952      	ldrh	r2, [r2, #10]
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	db06      	blt.n	800c4c8 <tcp_output_alloc_header_common+0x4c>
 800c4ba:	4b26      	ldr	r3, [pc, #152]	; (800c554 <tcp_output_alloc_header_common+0xd8>)
 800c4bc:	f240 7223 	movw	r2, #1827	; 0x723
 800c4c0:	4925      	ldr	r1, [pc, #148]	; (800c558 <tcp_output_alloc_header_common+0xdc>)
 800c4c2:	4826      	ldr	r0, [pc, #152]	; (800c55c <tcp_output_alloc_header_common+0xe0>)
 800c4c4:	f003 f8fc 	bl	800f6c0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	685b      	ldr	r3, [r3, #4]
 800c4cc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800c4ce:	8c3b      	ldrh	r3, [r7, #32]
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f7f8 fc9b 	bl	8004e0c <lwip_htons>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	461a      	mov	r2, r3
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c4de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f7f8 fc93 	bl	8004e0c <lwip_htons>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	461a      	mov	r2, r3
 800c4ea:	693b      	ldr	r3, [r7, #16]
 800c4ec:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c4f4:	68f8      	ldr	r0, [r7, #12]
 800c4f6:	f7f8 fc9e 	bl	8004e36 <lwip_htonl>
 800c4fa:	4602      	mov	r2, r0
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c500:	897b      	ldrh	r3, [r7, #10]
 800c502:	089b      	lsrs	r3, r3, #2
 800c504:	b29b      	uxth	r3, r3
 800c506:	3305      	adds	r3, #5
 800c508:	b29b      	uxth	r3, r3
 800c50a:	031b      	lsls	r3, r3, #12
 800c50c:	b29a      	uxth	r2, r3
 800c50e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c512:	b29b      	uxth	r3, r3
 800c514:	4313      	orrs	r3, r2
 800c516:	b29b      	uxth	r3, r3
 800c518:	4618      	mov	r0, r3
 800c51a:	f7f8 fc77 	bl	8004e0c <lwip_htons>
 800c51e:	4603      	mov	r3, r0
 800c520:	461a      	mov	r2, r3
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c526:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c528:	4618      	mov	r0, r3
 800c52a:	f7f8 fc6f 	bl	8004e0c <lwip_htons>
 800c52e:	4603      	mov	r3, r0
 800c530:	461a      	mov	r2, r3
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	2200      	movs	r2, #0
 800c53a:	741a      	strb	r2, [r3, #16]
 800c53c:	2200      	movs	r2, #0
 800c53e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	2200      	movs	r2, #0
 800c544:	749a      	strb	r2, [r3, #18]
 800c546:	2200      	movs	r2, #0
 800c548:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800c54a:	697b      	ldr	r3, [r7, #20]
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3718      	adds	r7, #24
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}
 800c554:	08012230 	.word	0x08012230
 800c558:	08012908 	.word	0x08012908
 800c55c:	08012284 	.word	0x08012284

0800c560 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800c560:	b5b0      	push	{r4, r5, r7, lr}
 800c562:	b08a      	sub	sp, #40	; 0x28
 800c564:	af04      	add	r7, sp, #16
 800c566:	60f8      	str	r0, [r7, #12]
 800c568:	607b      	str	r3, [r7, #4]
 800c56a:	460b      	mov	r3, r1
 800c56c:	817b      	strh	r3, [r7, #10]
 800c56e:	4613      	mov	r3, r2
 800c570:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d106      	bne.n	800c586 <tcp_output_alloc_header+0x26>
 800c578:	4b15      	ldr	r3, [pc, #84]	; (800c5d0 <tcp_output_alloc_header+0x70>)
 800c57a:	f240 7242 	movw	r2, #1858	; 0x742
 800c57e:	4915      	ldr	r1, [pc, #84]	; (800c5d4 <tcp_output_alloc_header+0x74>)
 800c580:	4815      	ldr	r0, [pc, #84]	; (800c5d8 <tcp_output_alloc_header+0x78>)
 800c582:	f003 f89d 	bl	800f6c0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	8adb      	ldrh	r3, [r3, #22]
 800c58e:	68fa      	ldr	r2, [r7, #12]
 800c590:	8b12      	ldrh	r2, [r2, #24]
 800c592:	68f9      	ldr	r1, [r7, #12]
 800c594:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800c596:	893d      	ldrh	r5, [r7, #8]
 800c598:	897c      	ldrh	r4, [r7, #10]
 800c59a:	9103      	str	r1, [sp, #12]
 800c59c:	2110      	movs	r1, #16
 800c59e:	9102      	str	r1, [sp, #8]
 800c5a0:	9201      	str	r2, [sp, #4]
 800c5a2:	9300      	str	r3, [sp, #0]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	462a      	mov	r2, r5
 800c5a8:	4621      	mov	r1, r4
 800c5aa:	f7ff ff67 	bl	800c47c <tcp_output_alloc_header_common>
 800c5ae:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d006      	beq.n	800c5c4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5ba:	68fa      	ldr	r2, [r7, #12]
 800c5bc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c5be:	441a      	add	r2, r3
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800c5c4:	697b      	ldr	r3, [r7, #20]
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3718      	adds	r7, #24
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bdb0      	pop	{r4, r5, r7, pc}
 800c5ce:	bf00      	nop
 800c5d0:	08012230 	.word	0x08012230
 800c5d4:	08012938 	.word	0x08012938
 800c5d8:	08012284 	.word	0x08012284

0800c5dc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b088      	sub	sp, #32
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	60f8      	str	r0, [r7, #12]
 800c5e4:	60b9      	str	r1, [r7, #8]
 800c5e6:	4611      	mov	r1, r2
 800c5e8:	461a      	mov	r2, r3
 800c5ea:	460b      	mov	r3, r1
 800c5ec:	71fb      	strb	r3, [r7, #7]
 800c5ee:	4613      	mov	r3, r2
 800c5f0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d106      	bne.n	800c60a <tcp_output_fill_options+0x2e>
 800c5fc:	4b13      	ldr	r3, [pc, #76]	; (800c64c <tcp_output_fill_options+0x70>)
 800c5fe:	f240 7256 	movw	r2, #1878	; 0x756
 800c602:	4913      	ldr	r1, [pc, #76]	; (800c650 <tcp_output_fill_options+0x74>)
 800c604:	4813      	ldr	r0, [pc, #76]	; (800c654 <tcp_output_fill_options+0x78>)
 800c606:	f003 f85b 	bl	800f6c0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	685b      	ldr	r3, [r3, #4]
 800c60e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800c610:	69bb      	ldr	r3, [r7, #24]
 800c612:	3314      	adds	r3, #20
 800c614:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800c616:	69bb      	ldr	r3, [r7, #24]
 800c618:	f103 0214 	add.w	r2, r3, #20
 800c61c:	8bfb      	ldrh	r3, [r7, #30]
 800c61e:	009b      	lsls	r3, r3, #2
 800c620:	4619      	mov	r1, r3
 800c622:	79fb      	ldrb	r3, [r7, #7]
 800c624:	009b      	lsls	r3, r3, #2
 800c626:	f003 0304 	and.w	r3, r3, #4
 800c62a:	440b      	add	r3, r1
 800c62c:	4413      	add	r3, r2
 800c62e:	697a      	ldr	r2, [r7, #20]
 800c630:	429a      	cmp	r2, r3
 800c632:	d006      	beq.n	800c642 <tcp_output_fill_options+0x66>
 800c634:	4b05      	ldr	r3, [pc, #20]	; (800c64c <tcp_output_fill_options+0x70>)
 800c636:	f240 7275 	movw	r2, #1909	; 0x775
 800c63a:	4907      	ldr	r1, [pc, #28]	; (800c658 <tcp_output_fill_options+0x7c>)
 800c63c:	4805      	ldr	r0, [pc, #20]	; (800c654 <tcp_output_fill_options+0x78>)
 800c63e:	f003 f83f 	bl	800f6c0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c642:	bf00      	nop
 800c644:	3720      	adds	r7, #32
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	08012230 	.word	0x08012230
 800c650:	08012960 	.word	0x08012960
 800c654:	08012284 	.word	0x08012284
 800c658:	08012858 	.word	0x08012858

0800c65c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b08a      	sub	sp, #40	; 0x28
 800c660:	af04      	add	r7, sp, #16
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	60b9      	str	r1, [r7, #8]
 800c666:	607a      	str	r2, [r7, #4]
 800c668:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d106      	bne.n	800c67e <tcp_output_control_segment+0x22>
 800c670:	4b1c      	ldr	r3, [pc, #112]	; (800c6e4 <tcp_output_control_segment+0x88>)
 800c672:	f240 7287 	movw	r2, #1927	; 0x787
 800c676:	491c      	ldr	r1, [pc, #112]	; (800c6e8 <tcp_output_control_segment+0x8c>)
 800c678:	481c      	ldr	r0, [pc, #112]	; (800c6ec <tcp_output_control_segment+0x90>)
 800c67a:	f003 f821 	bl	800f6c0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800c67e:	683a      	ldr	r2, [r7, #0]
 800c680:	6879      	ldr	r1, [r7, #4]
 800c682:	68f8      	ldr	r0, [r7, #12]
 800c684:	f7fe fae8 	bl	800ac58 <tcp_route>
 800c688:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d102      	bne.n	800c696 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800c690:	23fc      	movs	r3, #252	; 0xfc
 800c692:	75fb      	strb	r3, [r7, #23]
 800c694:	e01c      	b.n	800c6d0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d006      	beq.n	800c6aa <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	7adb      	ldrb	r3, [r3, #11]
 800c6a0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	7a9b      	ldrb	r3, [r3, #10]
 800c6a6:	757b      	strb	r3, [r7, #21]
 800c6a8:	e003      	b.n	800c6b2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800c6aa:	23ff      	movs	r3, #255	; 0xff
 800c6ac:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c6b2:	7dba      	ldrb	r2, [r7, #22]
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	9302      	str	r3, [sp, #8]
 800c6b8:	2306      	movs	r3, #6
 800c6ba:	9301      	str	r3, [sp, #4]
 800c6bc:	7d7b      	ldrb	r3, [r7, #21]
 800c6be:	9300      	str	r3, [sp, #0]
 800c6c0:	4613      	mov	r3, r2
 800c6c2:	683a      	ldr	r2, [r7, #0]
 800c6c4:	6879      	ldr	r1, [r7, #4]
 800c6c6:	68b8      	ldr	r0, [r7, #8]
 800c6c8:	f001 ff70 	bl	800e5ac <ip4_output_if>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c6d0:	68b8      	ldr	r0, [r7, #8]
 800c6d2:	f7f9 fe4f 	bl	8006374 <pbuf_free>
  return err;
 800c6d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3718      	adds	r7, #24
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}
 800c6e2:	bf00      	nop
 800c6e4:	08012230 	.word	0x08012230
 800c6e8:	08012988 	.word	0x08012988
 800c6ec:	08012284 	.word	0x08012284

0800c6f0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c6f0:	b590      	push	{r4, r7, lr}
 800c6f2:	b08b      	sub	sp, #44	; 0x2c
 800c6f4:	af04      	add	r7, sp, #16
 800c6f6:	60f8      	str	r0, [r7, #12]
 800c6f8:	60b9      	str	r1, [r7, #8]
 800c6fa:	607a      	str	r2, [r7, #4]
 800c6fc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d106      	bne.n	800c712 <tcp_rst+0x22>
 800c704:	4b1f      	ldr	r3, [pc, #124]	; (800c784 <tcp_rst+0x94>)
 800c706:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800c70a:	491f      	ldr	r1, [pc, #124]	; (800c788 <tcp_rst+0x98>)
 800c70c:	481f      	ldr	r0, [pc, #124]	; (800c78c <tcp_rst+0x9c>)
 800c70e:	f002 ffd7 	bl	800f6c0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c714:	2b00      	cmp	r3, #0
 800c716:	d106      	bne.n	800c726 <tcp_rst+0x36>
 800c718:	4b1a      	ldr	r3, [pc, #104]	; (800c784 <tcp_rst+0x94>)
 800c71a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800c71e:	491c      	ldr	r1, [pc, #112]	; (800c790 <tcp_rst+0xa0>)
 800c720:	481a      	ldr	r0, [pc, #104]	; (800c78c <tcp_rst+0x9c>)
 800c722:	f002 ffcd 	bl	800f6c0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c726:	2300      	movs	r3, #0
 800c728:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800c72a:	f246 0308 	movw	r3, #24584	; 0x6008
 800c72e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c730:	7dfb      	ldrb	r3, [r7, #23]
 800c732:	b29c      	uxth	r4, r3
 800c734:	68b8      	ldr	r0, [r7, #8]
 800c736:	f7f8 fb7e 	bl	8004e36 <lwip_htonl>
 800c73a:	4602      	mov	r2, r0
 800c73c:	8abb      	ldrh	r3, [r7, #20]
 800c73e:	9303      	str	r3, [sp, #12]
 800c740:	2314      	movs	r3, #20
 800c742:	9302      	str	r3, [sp, #8]
 800c744:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c746:	9301      	str	r3, [sp, #4]
 800c748:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c74a:	9300      	str	r3, [sp, #0]
 800c74c:	4613      	mov	r3, r2
 800c74e:	2200      	movs	r2, #0
 800c750:	4621      	mov	r1, r4
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f7ff fe92 	bl	800c47c <tcp_output_alloc_header_common>
 800c758:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c75a:	693b      	ldr	r3, [r7, #16]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d00c      	beq.n	800c77a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c760:	7dfb      	ldrb	r3, [r7, #23]
 800c762:	2200      	movs	r2, #0
 800c764:	6939      	ldr	r1, [r7, #16]
 800c766:	68f8      	ldr	r0, [r7, #12]
 800c768:	f7ff ff38 	bl	800c5dc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c76e:	683a      	ldr	r2, [r7, #0]
 800c770:	6939      	ldr	r1, [r7, #16]
 800c772:	68f8      	ldr	r0, [r7, #12]
 800c774:	f7ff ff72 	bl	800c65c <tcp_output_control_segment>
 800c778:	e000      	b.n	800c77c <tcp_rst+0x8c>
    return;
 800c77a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c77c:	371c      	adds	r7, #28
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd90      	pop	{r4, r7, pc}
 800c782:	bf00      	nop
 800c784:	08012230 	.word	0x08012230
 800c788:	080129b4 	.word	0x080129b4
 800c78c:	08012284 	.word	0x08012284
 800c790:	080129d0 	.word	0x080129d0

0800c794 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c794:	b590      	push	{r4, r7, lr}
 800c796:	b087      	sub	sp, #28
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800c79c:	2300      	movs	r3, #0
 800c79e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d106      	bne.n	800c7b8 <tcp_send_empty_ack+0x24>
 800c7aa:	4b28      	ldr	r3, [pc, #160]	; (800c84c <tcp_send_empty_ack+0xb8>)
 800c7ac:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800c7b0:	4927      	ldr	r1, [pc, #156]	; (800c850 <tcp_send_empty_ack+0xbc>)
 800c7b2:	4828      	ldr	r0, [pc, #160]	; (800c854 <tcp_send_empty_ack+0xc0>)
 800c7b4:	f002 ff84 	bl	800f6c0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c7b8:	7dfb      	ldrb	r3, [r7, #23]
 800c7ba:	009b      	lsls	r3, r3, #2
 800c7bc:	b2db      	uxtb	r3, r3
 800c7be:	f003 0304 	and.w	r3, r3, #4
 800c7c2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c7c4:	7d7b      	ldrb	r3, [r7, #21]
 800c7c6:	b29c      	uxth	r4, r3
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f7f8 fb32 	bl	8004e36 <lwip_htonl>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	4621      	mov	r1, r4
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f7ff fec1 	bl	800c560 <tcp_output_alloc_header>
 800c7de:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d109      	bne.n	800c7fa <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	8b5b      	ldrh	r3, [r3, #26]
 800c7ea:	f043 0303 	orr.w	r3, r3, #3
 800c7ee:	b29a      	uxth	r2, r3
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c7f4:	f06f 0301 	mvn.w	r3, #1
 800c7f8:	e023      	b.n	800c842 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c7fa:	7dbb      	ldrb	r3, [r7, #22]
 800c7fc:	7dfa      	ldrb	r2, [r7, #23]
 800c7fe:	6939      	ldr	r1, [r7, #16]
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f7ff feeb 	bl	800c5dc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c806:	687a      	ldr	r2, [r7, #4]
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	3304      	adds	r3, #4
 800c80c:	6939      	ldr	r1, [r7, #16]
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f7ff ff24 	bl	800c65c <tcp_output_control_segment>
 800c814:	4603      	mov	r3, r0
 800c816:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c818:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d007      	beq.n	800c830 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	8b5b      	ldrh	r3, [r3, #26]
 800c824:	f043 0303 	orr.w	r3, r3, #3
 800c828:	b29a      	uxth	r2, r3
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	835a      	strh	r2, [r3, #26]
 800c82e:	e006      	b.n	800c83e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	8b5b      	ldrh	r3, [r3, #26]
 800c834:	f023 0303 	bic.w	r3, r3, #3
 800c838:	b29a      	uxth	r2, r3
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800c83e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c842:	4618      	mov	r0, r3
 800c844:	371c      	adds	r7, #28
 800c846:	46bd      	mov	sp, r7
 800c848:	bd90      	pop	{r4, r7, pc}
 800c84a:	bf00      	nop
 800c84c:	08012230 	.word	0x08012230
 800c850:	080129ec 	.word	0x080129ec
 800c854:	08012284 	.word	0x08012284

0800c858 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c858:	b590      	push	{r4, r7, lr}
 800c85a:	b087      	sub	sp, #28
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c860:	2300      	movs	r3, #0
 800c862:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d106      	bne.n	800c878 <tcp_keepalive+0x20>
 800c86a:	4b18      	ldr	r3, [pc, #96]	; (800c8cc <tcp_keepalive+0x74>)
 800c86c:	f640 0224 	movw	r2, #2084	; 0x824
 800c870:	4917      	ldr	r1, [pc, #92]	; (800c8d0 <tcp_keepalive+0x78>)
 800c872:	4818      	ldr	r0, [pc, #96]	; (800c8d4 <tcp_keepalive+0x7c>)
 800c874:	f002 ff24 	bl	800f6c0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c878:	7dfb      	ldrb	r3, [r7, #23]
 800c87a:	b29c      	uxth	r4, r3
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c880:	3b01      	subs	r3, #1
 800c882:	4618      	mov	r0, r3
 800c884:	f7f8 fad7 	bl	8004e36 <lwip_htonl>
 800c888:	4603      	mov	r3, r0
 800c88a:	2200      	movs	r2, #0
 800c88c:	4621      	mov	r1, r4
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f7ff fe66 	bl	800c560 <tcp_output_alloc_header>
 800c894:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d102      	bne.n	800c8a2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c89c:	f04f 33ff 	mov.w	r3, #4294967295
 800c8a0:	e010      	b.n	800c8c4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c8a2:	7dfb      	ldrb	r3, [r7, #23]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	6939      	ldr	r1, [r7, #16]
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f7ff fe97 	bl	800c5dc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c8ae:	687a      	ldr	r2, [r7, #4]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	3304      	adds	r3, #4
 800c8b4:	6939      	ldr	r1, [r7, #16]
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f7ff fed0 	bl	800c65c <tcp_output_control_segment>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c8c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	371c      	adds	r7, #28
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd90      	pop	{r4, r7, pc}
 800c8cc:	08012230 	.word	0x08012230
 800c8d0:	08012a0c 	.word	0x08012a0c
 800c8d4:	08012284 	.word	0x08012284

0800c8d8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c8d8:	b590      	push	{r4, r7, lr}
 800c8da:	b08b      	sub	sp, #44	; 0x2c
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d106      	bne.n	800c8fa <tcp_zero_window_probe+0x22>
 800c8ec:	4b4c      	ldr	r3, [pc, #304]	; (800ca20 <tcp_zero_window_probe+0x148>)
 800c8ee:	f640 024f 	movw	r2, #2127	; 0x84f
 800c8f2:	494c      	ldr	r1, [pc, #304]	; (800ca24 <tcp_zero_window_probe+0x14c>)
 800c8f4:	484c      	ldr	r0, [pc, #304]	; (800ca28 <tcp_zero_window_probe+0x150>)
 800c8f6:	f002 fee3 	bl	800f6c0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8fe:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800c900:	6a3b      	ldr	r3, [r7, #32]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d101      	bne.n	800c90a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800c906:	2300      	movs	r3, #0
 800c908:	e086      	b.n	800ca18 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c910:	2bff      	cmp	r3, #255	; 0xff
 800c912:	d007      	beq.n	800c924 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c91a:	3301      	adds	r3, #1
 800c91c:	b2da      	uxtb	r2, r3
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c924:	6a3b      	ldr	r3, [r7, #32]
 800c926:	68db      	ldr	r3, [r3, #12]
 800c928:	899b      	ldrh	r3, [r3, #12]
 800c92a:	b29b      	uxth	r3, r3
 800c92c:	4618      	mov	r0, r3
 800c92e:	f7f8 fa6d 	bl	8004e0c <lwip_htons>
 800c932:	4603      	mov	r3, r0
 800c934:	b2db      	uxtb	r3, r3
 800c936:	f003 0301 	and.w	r3, r3, #1
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d005      	beq.n	800c94a <tcp_zero_window_probe+0x72>
 800c93e:	6a3b      	ldr	r3, [r7, #32]
 800c940:	891b      	ldrh	r3, [r3, #8]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d101      	bne.n	800c94a <tcp_zero_window_probe+0x72>
 800c946:	2301      	movs	r3, #1
 800c948:	e000      	b.n	800c94c <tcp_zero_window_probe+0x74>
 800c94a:	2300      	movs	r3, #0
 800c94c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c94e:	7ffb      	ldrb	r3, [r7, #31]
 800c950:	2b00      	cmp	r3, #0
 800c952:	bf0c      	ite	eq
 800c954:	2301      	moveq	r3, #1
 800c956:	2300      	movne	r3, #0
 800c958:	b2db      	uxtb	r3, r3
 800c95a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c95c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c960:	b299      	uxth	r1, r3
 800c962:	6a3b      	ldr	r3, [r7, #32]
 800c964:	68db      	ldr	r3, [r3, #12]
 800c966:	685b      	ldr	r3, [r3, #4]
 800c968:	8bba      	ldrh	r2, [r7, #28]
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f7ff fdf8 	bl	800c560 <tcp_output_alloc_header>
 800c970:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c972:	69bb      	ldr	r3, [r7, #24]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d102      	bne.n	800c97e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c978:	f04f 33ff 	mov.w	r3, #4294967295
 800c97c:	e04c      	b.n	800ca18 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c97e:	69bb      	ldr	r3, [r7, #24]
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c984:	7ffb      	ldrb	r3, [r7, #31]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d011      	beq.n	800c9ae <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	899b      	ldrh	r3, [r3, #12]
 800c98e:	b29b      	uxth	r3, r3
 800c990:	b21b      	sxth	r3, r3
 800c992:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c996:	b21c      	sxth	r4, r3
 800c998:	2011      	movs	r0, #17
 800c99a:	f7f8 fa37 	bl	8004e0c <lwip_htons>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	b21b      	sxth	r3, r3
 800c9a2:	4323      	orrs	r3, r4
 800c9a4:	b21b      	sxth	r3, r3
 800c9a6:	b29a      	uxth	r2, r3
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	819a      	strh	r2, [r3, #12]
 800c9ac:	e010      	b.n	800c9d0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c9ae:	69bb      	ldr	r3, [r7, #24]
 800c9b0:	685b      	ldr	r3, [r3, #4]
 800c9b2:	3314      	adds	r3, #20
 800c9b4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c9b6:	6a3b      	ldr	r3, [r7, #32]
 800c9b8:	6858      	ldr	r0, [r3, #4]
 800c9ba:	6a3b      	ldr	r3, [r7, #32]
 800c9bc:	685b      	ldr	r3, [r3, #4]
 800c9be:	891a      	ldrh	r2, [r3, #8]
 800c9c0:	6a3b      	ldr	r3, [r7, #32]
 800c9c2:	891b      	ldrh	r3, [r3, #8]
 800c9c4:	1ad3      	subs	r3, r2, r3
 800c9c6:	b29b      	uxth	r3, r3
 800c9c8:	2201      	movs	r2, #1
 800c9ca:	6939      	ldr	r1, [r7, #16]
 800c9cc:	f7f9 fecc 	bl	8006768 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c9d0:	6a3b      	ldr	r3, [r7, #32]
 800c9d2:	68db      	ldr	r3, [r3, #12]
 800c9d4:	685b      	ldr	r3, [r3, #4]
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f7f8 fa2d 	bl	8004e36 <lwip_htonl>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	3301      	adds	r3, #1
 800c9e0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	1ad3      	subs	r3, r2, r3
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	da02      	bge.n	800c9f4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	68fa      	ldr	r2, [r7, #12]
 800c9f2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c9f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	69b9      	ldr	r1, [r7, #24]
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f7ff fded 	bl	800c5dc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ca02:	687a      	ldr	r2, [r7, #4]
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	3304      	adds	r3, #4
 800ca08:	69b9      	ldr	r1, [r7, #24]
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f7ff fe26 	bl	800c65c <tcp_output_control_segment>
 800ca10:	4603      	mov	r3, r0
 800ca12:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ca14:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	372c      	adds	r7, #44	; 0x2c
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd90      	pop	{r4, r7, pc}
 800ca20:	08012230 	.word	0x08012230
 800ca24:	08012a28 	.word	0x08012a28
 800ca28:	08012284 	.word	0x08012284

0800ca2c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b082      	sub	sp, #8
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ca34:	f7fa f818 	bl	8006a68 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ca38:	4b0a      	ldr	r3, [pc, #40]	; (800ca64 <tcpip_tcp_timer+0x38>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d103      	bne.n	800ca48 <tcpip_tcp_timer+0x1c>
 800ca40:	4b09      	ldr	r3, [pc, #36]	; (800ca68 <tcpip_tcp_timer+0x3c>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d005      	beq.n	800ca54 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ca48:	2200      	movs	r2, #0
 800ca4a:	4908      	ldr	r1, [pc, #32]	; (800ca6c <tcpip_tcp_timer+0x40>)
 800ca4c:	20fa      	movs	r0, #250	; 0xfa
 800ca4e:	f000 f8f3 	bl	800cc38 <sys_timeout>
 800ca52:	e003      	b.n	800ca5c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ca54:	4b06      	ldr	r3, [pc, #24]	; (800ca70 <tcpip_tcp_timer+0x44>)
 800ca56:	2200      	movs	r2, #0
 800ca58:	601a      	str	r2, [r3, #0]
  }
}
 800ca5a:	bf00      	nop
 800ca5c:	bf00      	nop
 800ca5e:	3708      	adds	r7, #8
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}
 800ca64:	20006938 	.word	0x20006938
 800ca68:	20006948 	.word	0x20006948
 800ca6c:	0800ca2d 	.word	0x0800ca2d
 800ca70:	20000110 	.word	0x20000110

0800ca74 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ca78:	4b0a      	ldr	r3, [pc, #40]	; (800caa4 <tcp_timer_needed+0x30>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d10f      	bne.n	800caa0 <tcp_timer_needed+0x2c>
 800ca80:	4b09      	ldr	r3, [pc, #36]	; (800caa8 <tcp_timer_needed+0x34>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d103      	bne.n	800ca90 <tcp_timer_needed+0x1c>
 800ca88:	4b08      	ldr	r3, [pc, #32]	; (800caac <tcp_timer_needed+0x38>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d007      	beq.n	800caa0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800ca90:	4b04      	ldr	r3, [pc, #16]	; (800caa4 <tcp_timer_needed+0x30>)
 800ca92:	2201      	movs	r2, #1
 800ca94:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ca96:	2200      	movs	r2, #0
 800ca98:	4905      	ldr	r1, [pc, #20]	; (800cab0 <tcp_timer_needed+0x3c>)
 800ca9a:	20fa      	movs	r0, #250	; 0xfa
 800ca9c:	f000 f8cc 	bl	800cc38 <sys_timeout>
  }
}
 800caa0:	bf00      	nop
 800caa2:	bd80      	pop	{r7, pc}
 800caa4:	20000110 	.word	0x20000110
 800caa8:	20006938 	.word	0x20006938
 800caac:	20006948 	.word	0x20006948
 800cab0:	0800ca2d 	.word	0x0800ca2d

0800cab4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b086      	sub	sp, #24
 800cab8:	af00      	add	r7, sp, #0
 800caba:	60f8      	str	r0, [r7, #12]
 800cabc:	60b9      	str	r1, [r7, #8]
 800cabe:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800cac0:	2006      	movs	r0, #6
 800cac2:	f7f8 fdf9 	bl	80056b8 <memp_malloc>
 800cac6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d109      	bne.n	800cae2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d151      	bne.n	800cb78 <sys_timeout_abs+0xc4>
 800cad4:	4b2a      	ldr	r3, [pc, #168]	; (800cb80 <sys_timeout_abs+0xcc>)
 800cad6:	22be      	movs	r2, #190	; 0xbe
 800cad8:	492a      	ldr	r1, [pc, #168]	; (800cb84 <sys_timeout_abs+0xd0>)
 800cada:	482b      	ldr	r0, [pc, #172]	; (800cb88 <sys_timeout_abs+0xd4>)
 800cadc:	f002 fdf0 	bl	800f6c0 <iprintf>
    return;
 800cae0:	e04a      	b.n	800cb78 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800cae2:	693b      	ldr	r3, [r7, #16]
 800cae4:	2200      	movs	r2, #0
 800cae6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	68ba      	ldr	r2, [r7, #8]
 800caec:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	687a      	ldr	r2, [r7, #4]
 800caf2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	68fa      	ldr	r2, [r7, #12]
 800caf8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800cafa:	4b24      	ldr	r3, [pc, #144]	; (800cb8c <sys_timeout_abs+0xd8>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d103      	bne.n	800cb0a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800cb02:	4a22      	ldr	r2, [pc, #136]	; (800cb8c <sys_timeout_abs+0xd8>)
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	6013      	str	r3, [r2, #0]
    return;
 800cb08:	e037      	b.n	800cb7a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	685a      	ldr	r2, [r3, #4]
 800cb0e:	4b1f      	ldr	r3, [pc, #124]	; (800cb8c <sys_timeout_abs+0xd8>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	685b      	ldr	r3, [r3, #4]
 800cb14:	1ad3      	subs	r3, r2, r3
 800cb16:	0fdb      	lsrs	r3, r3, #31
 800cb18:	f003 0301 	and.w	r3, r3, #1
 800cb1c:	b2db      	uxtb	r3, r3
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d007      	beq.n	800cb32 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800cb22:	4b1a      	ldr	r3, [pc, #104]	; (800cb8c <sys_timeout_abs+0xd8>)
 800cb24:	681a      	ldr	r2, [r3, #0]
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800cb2a:	4a18      	ldr	r2, [pc, #96]	; (800cb8c <sys_timeout_abs+0xd8>)
 800cb2c:	693b      	ldr	r3, [r7, #16]
 800cb2e:	6013      	str	r3, [r2, #0]
 800cb30:	e023      	b.n	800cb7a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800cb32:	4b16      	ldr	r3, [pc, #88]	; (800cb8c <sys_timeout_abs+0xd8>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	617b      	str	r3, [r7, #20]
 800cb38:	e01a      	b.n	800cb70 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d00b      	beq.n	800cb5a <sys_timeout_abs+0xa6>
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	685a      	ldr	r2, [r3, #4]
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	685b      	ldr	r3, [r3, #4]
 800cb4c:	1ad3      	subs	r3, r2, r3
 800cb4e:	0fdb      	lsrs	r3, r3, #31
 800cb50:	f003 0301 	and.w	r3, r3, #1
 800cb54:	b2db      	uxtb	r3, r3
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d007      	beq.n	800cb6a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	681a      	ldr	r2, [r3, #0]
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	693a      	ldr	r2, [r7, #16]
 800cb66:	601a      	str	r2, [r3, #0]
        break;
 800cb68:	e007      	b.n	800cb7a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	617b      	str	r3, [r7, #20]
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d1e1      	bne.n	800cb3a <sys_timeout_abs+0x86>
 800cb76:	e000      	b.n	800cb7a <sys_timeout_abs+0xc6>
    return;
 800cb78:	bf00      	nop
      }
    }
  }
}
 800cb7a:	3718      	adds	r7, #24
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}
 800cb80:	08012a4c 	.word	0x08012a4c
 800cb84:	08012a80 	.word	0x08012a80
 800cb88:	08012ac0 	.word	0x08012ac0
 800cb8c:	20000108 	.word	0x20000108

0800cb90 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b086      	sub	sp, #24
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	685b      	ldr	r3, [r3, #4]
 800cba0:	4798      	blx	r3

  now = sys_now();
 800cba2:	f7f8 f8a5 	bl	8004cf0 <sys_now>
 800cba6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	681a      	ldr	r2, [r3, #0]
 800cbac:	4b0f      	ldr	r3, [pc, #60]	; (800cbec <lwip_cyclic_timer+0x5c>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4413      	add	r3, r2
 800cbb2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800cbb4:	68fa      	ldr	r2, [r7, #12]
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	1ad3      	subs	r3, r2, r3
 800cbba:	0fdb      	lsrs	r3, r3, #31
 800cbbc:	f003 0301 	and.w	r3, r3, #1
 800cbc0:	b2db      	uxtb	r3, r3
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d009      	beq.n	800cbda <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800cbc6:	697b      	ldr	r3, [r7, #20]
 800cbc8:	681a      	ldr	r2, [r3, #0]
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	4413      	add	r3, r2
 800cbce:	687a      	ldr	r2, [r7, #4]
 800cbd0:	4907      	ldr	r1, [pc, #28]	; (800cbf0 <lwip_cyclic_timer+0x60>)
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f7ff ff6e 	bl	800cab4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800cbd8:	e004      	b.n	800cbe4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800cbda:	687a      	ldr	r2, [r7, #4]
 800cbdc:	4904      	ldr	r1, [pc, #16]	; (800cbf0 <lwip_cyclic_timer+0x60>)
 800cbde:	68f8      	ldr	r0, [r7, #12]
 800cbe0:	f7ff ff68 	bl	800cab4 <sys_timeout_abs>
}
 800cbe4:	bf00      	nop
 800cbe6:	3718      	adds	r7, #24
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}
 800cbec:	2000010c 	.word	0x2000010c
 800cbf0:	0800cb91 	.word	0x0800cb91

0800cbf4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b082      	sub	sp, #8
 800cbf8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	607b      	str	r3, [r7, #4]
 800cbfe:	e00e      	b.n	800cc1e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800cc00:	4a0b      	ldr	r2, [pc, #44]	; (800cc30 <sys_timeouts_init+0x3c>)
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	00db      	lsls	r3, r3, #3
 800cc0c:	4a08      	ldr	r2, [pc, #32]	; (800cc30 <sys_timeouts_init+0x3c>)
 800cc0e:	4413      	add	r3, r2
 800cc10:	461a      	mov	r2, r3
 800cc12:	4908      	ldr	r1, [pc, #32]	; (800cc34 <sys_timeouts_init+0x40>)
 800cc14:	f000 f810 	bl	800cc38 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	3301      	adds	r3, #1
 800cc1c:	607b      	str	r3, [r7, #4]
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2b02      	cmp	r3, #2
 800cc22:	d9ed      	bls.n	800cc00 <sys_timeouts_init+0xc>
  }
}
 800cc24:	bf00      	nop
 800cc26:	bf00      	nop
 800cc28:	3708      	adds	r7, #8
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}
 800cc2e:	bf00      	nop
 800cc30:	08013624 	.word	0x08013624
 800cc34:	0800cb91 	.word	0x0800cb91

0800cc38 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b086      	sub	sp, #24
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	60f8      	str	r0, [r7, #12]
 800cc40:	60b9      	str	r1, [r7, #8]
 800cc42:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc4a:	d306      	bcc.n	800cc5a <sys_timeout+0x22>
 800cc4c:	4b0a      	ldr	r3, [pc, #40]	; (800cc78 <sys_timeout+0x40>)
 800cc4e:	f240 1229 	movw	r2, #297	; 0x129
 800cc52:	490a      	ldr	r1, [pc, #40]	; (800cc7c <sys_timeout+0x44>)
 800cc54:	480a      	ldr	r0, [pc, #40]	; (800cc80 <sys_timeout+0x48>)
 800cc56:	f002 fd33 	bl	800f6c0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800cc5a:	f7f8 f849 	bl	8004cf0 <sys_now>
 800cc5e:	4602      	mov	r2, r0
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	4413      	add	r3, r2
 800cc64:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800cc66:	687a      	ldr	r2, [r7, #4]
 800cc68:	68b9      	ldr	r1, [r7, #8]
 800cc6a:	6978      	ldr	r0, [r7, #20]
 800cc6c:	f7ff ff22 	bl	800cab4 <sys_timeout_abs>
#endif
}
 800cc70:	bf00      	nop
 800cc72:	3718      	adds	r7, #24
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}
 800cc78:	08012a4c 	.word	0x08012a4c
 800cc7c:	08012ae8 	.word	0x08012ae8
 800cc80:	08012ac0 	.word	0x08012ac0

0800cc84 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b084      	sub	sp, #16
 800cc88:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800cc8a:	f7f8 f831 	bl	8004cf0 <sys_now>
 800cc8e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800cc90:	4b1a      	ldr	r3, [pc, #104]	; (800ccfc <sys_check_timeouts+0x78>)
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	b2db      	uxtb	r3, r3
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d001      	beq.n	800cc9e <sys_check_timeouts+0x1a>
 800cc9a:	f7f9 f831 	bl	8005d00 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800cc9e:	4b18      	ldr	r3, [pc, #96]	; (800cd00 <sys_check_timeouts+0x7c>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d022      	beq.n	800ccf0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	685b      	ldr	r3, [r3, #4]
 800ccae:	68fa      	ldr	r2, [r7, #12]
 800ccb0:	1ad3      	subs	r3, r2, r3
 800ccb2:	0fdb      	lsrs	r3, r3, #31
 800ccb4:	f003 0301 	and.w	r3, r3, #1
 800ccb8:	b2db      	uxtb	r3, r3
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d11a      	bne.n	800ccf4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	4a0f      	ldr	r2, [pc, #60]	; (800cd00 <sys_check_timeouts+0x7c>)
 800ccc4:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	689b      	ldr	r3, [r3, #8]
 800ccca:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	68db      	ldr	r3, [r3, #12]
 800ccd0:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	685b      	ldr	r3, [r3, #4]
 800ccd6:	4a0b      	ldr	r2, [pc, #44]	; (800cd04 <sys_check_timeouts+0x80>)
 800ccd8:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ccda:	68b9      	ldr	r1, [r7, #8]
 800ccdc:	2006      	movs	r0, #6
 800ccde:	f7f8 fd37 	bl	8005750 <memp_free>
    if (handler != NULL) {
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d0d3      	beq.n	800cc90 <sys_check_timeouts+0xc>
      handler(arg);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6838      	ldr	r0, [r7, #0]
 800ccec:	4798      	blx	r3
  do {
 800ccee:	e7cf      	b.n	800cc90 <sys_check_timeouts+0xc>
      return;
 800ccf0:	bf00      	nop
 800ccf2:	e000      	b.n	800ccf6 <sys_check_timeouts+0x72>
      return;
 800ccf4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800ccf6:	3710      	adds	r7, #16
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}
 800ccfc:	20006930 	.word	0x20006930
 800cd00:	20000108 	.word	0x20000108
 800cd04:	2000010c 	.word	0x2000010c

0800cd08 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cd0c:	f002 fcf0 	bl	800f6f0 <rand>
 800cd10:	4603      	mov	r3, r0
 800cd12:	b29b      	uxth	r3, r3
 800cd14:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800cd18:	b29b      	uxth	r3, r3
 800cd1a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800cd1e:	b29a      	uxth	r2, r3
 800cd20:	4b01      	ldr	r3, [pc, #4]	; (800cd28 <udp_init+0x20>)
 800cd22:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800cd24:	bf00      	nop
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	20000010 	.word	0x20000010

0800cd2c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b084      	sub	sp, #16
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	60f8      	str	r0, [r7, #12]
 800cd34:	60b9      	str	r1, [r7, #8]
 800cd36:	4613      	mov	r3, r2
 800cd38:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d105      	bne.n	800cd4c <udp_input_local_match+0x20>
 800cd40:	4b27      	ldr	r3, [pc, #156]	; (800cde0 <udp_input_local_match+0xb4>)
 800cd42:	2287      	movs	r2, #135	; 0x87
 800cd44:	4927      	ldr	r1, [pc, #156]	; (800cde4 <udp_input_local_match+0xb8>)
 800cd46:	4828      	ldr	r0, [pc, #160]	; (800cde8 <udp_input_local_match+0xbc>)
 800cd48:	f002 fcba 	bl	800f6c0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d105      	bne.n	800cd5e <udp_input_local_match+0x32>
 800cd52:	4b23      	ldr	r3, [pc, #140]	; (800cde0 <udp_input_local_match+0xb4>)
 800cd54:	2288      	movs	r2, #136	; 0x88
 800cd56:	4925      	ldr	r1, [pc, #148]	; (800cdec <udp_input_local_match+0xc0>)
 800cd58:	4823      	ldr	r0, [pc, #140]	; (800cde8 <udp_input_local_match+0xbc>)
 800cd5a:	f002 fcb1 	bl	800f6c0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	7a1b      	ldrb	r3, [r3, #8]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d00b      	beq.n	800cd7e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	7a1a      	ldrb	r2, [r3, #8]
 800cd6a:	4b21      	ldr	r3, [pc, #132]	; (800cdf0 <udp_input_local_match+0xc4>)
 800cd6c:	685b      	ldr	r3, [r3, #4]
 800cd6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cd72:	3301      	adds	r3, #1
 800cd74:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d001      	beq.n	800cd7e <udp_input_local_match+0x52>
    return 0;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	e02b      	b.n	800cdd6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800cd7e:	79fb      	ldrb	r3, [r7, #7]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d018      	beq.n	800cdb6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d013      	beq.n	800cdb2 <udp_input_local_match+0x86>
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d00f      	beq.n	800cdb2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800cd92:	4b17      	ldr	r3, [pc, #92]	; (800cdf0 <udp_input_local_match+0xc4>)
 800cd94:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cd96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd9a:	d00a      	beq.n	800cdb2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	681a      	ldr	r2, [r3, #0]
 800cda0:	4b13      	ldr	r3, [pc, #76]	; (800cdf0 <udp_input_local_match+0xc4>)
 800cda2:	695b      	ldr	r3, [r3, #20]
 800cda4:	405a      	eors	r2, r3
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	3308      	adds	r3, #8
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d110      	bne.n	800cdd4 <udp_input_local_match+0xa8>
          return 1;
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	e00f      	b.n	800cdd6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d009      	beq.n	800cdd0 <udp_input_local_match+0xa4>
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d005      	beq.n	800cdd0 <udp_input_local_match+0xa4>
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	681a      	ldr	r2, [r3, #0]
 800cdc8:	4b09      	ldr	r3, [pc, #36]	; (800cdf0 <udp_input_local_match+0xc4>)
 800cdca:	695b      	ldr	r3, [r3, #20]
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	d101      	bne.n	800cdd4 <udp_input_local_match+0xa8>
        return 1;
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	e000      	b.n	800cdd6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800cdd4:	2300      	movs	r3, #0
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3710      	adds	r7, #16
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}
 800cdde:	bf00      	nop
 800cde0:	08012b34 	.word	0x08012b34
 800cde4:	08012b64 	.word	0x08012b64
 800cde8:	08012b88 	.word	0x08012b88
 800cdec:	08012bb0 	.word	0x08012bb0
 800cdf0:	200033f4 	.word	0x200033f4

0800cdf4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800cdf4:	b590      	push	{r4, r7, lr}
 800cdf6:	b08d      	sub	sp, #52	; 0x34
 800cdf8:	af02      	add	r7, sp, #8
 800cdfa:	6078      	str	r0, [r7, #4]
 800cdfc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d105      	bne.n	800ce14 <udp_input+0x20>
 800ce08:	4b7c      	ldr	r3, [pc, #496]	; (800cffc <udp_input+0x208>)
 800ce0a:	22cf      	movs	r2, #207	; 0xcf
 800ce0c:	497c      	ldr	r1, [pc, #496]	; (800d000 <udp_input+0x20c>)
 800ce0e:	487d      	ldr	r0, [pc, #500]	; (800d004 <udp_input+0x210>)
 800ce10:	f002 fc56 	bl	800f6c0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d105      	bne.n	800ce26 <udp_input+0x32>
 800ce1a:	4b78      	ldr	r3, [pc, #480]	; (800cffc <udp_input+0x208>)
 800ce1c:	22d0      	movs	r2, #208	; 0xd0
 800ce1e:	497a      	ldr	r1, [pc, #488]	; (800d008 <udp_input+0x214>)
 800ce20:	4878      	ldr	r0, [pc, #480]	; (800d004 <udp_input+0x210>)
 800ce22:	f002 fc4d 	bl	800f6c0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	895b      	ldrh	r3, [r3, #10]
 800ce2a:	2b07      	cmp	r3, #7
 800ce2c:	d803      	bhi.n	800ce36 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f7f9 faa0 	bl	8006374 <pbuf_free>
    goto end;
 800ce34:	e0de      	b.n	800cff4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	685b      	ldr	r3, [r3, #4]
 800ce3a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ce3c:	4b73      	ldr	r3, [pc, #460]	; (800d00c <udp_input+0x218>)
 800ce3e:	695b      	ldr	r3, [r3, #20]
 800ce40:	4a72      	ldr	r2, [pc, #456]	; (800d00c <udp_input+0x218>)
 800ce42:	6812      	ldr	r2, [r2, #0]
 800ce44:	4611      	mov	r1, r2
 800ce46:	4618      	mov	r0, r3
 800ce48:	f001 fc88 	bl	800e75c <ip4_addr_isbroadcast_u32>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	881b      	ldrh	r3, [r3, #0]
 800ce54:	b29b      	uxth	r3, r3
 800ce56:	4618      	mov	r0, r3
 800ce58:	f7f7 ffd8 	bl	8004e0c <lwip_htons>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	885b      	ldrh	r3, [r3, #2]
 800ce64:	b29b      	uxth	r3, r3
 800ce66:	4618      	mov	r0, r3
 800ce68:	f7f7 ffd0 	bl	8004e0c <lwip_htons>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800ce70:	2300      	movs	r3, #0
 800ce72:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800ce74:	2300      	movs	r3, #0
 800ce76:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ce7c:	4b64      	ldr	r3, [pc, #400]	; (800d010 <udp_input+0x21c>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	627b      	str	r3, [r7, #36]	; 0x24
 800ce82:	e054      	b.n	800cf2e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800ce84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce86:	8a5b      	ldrh	r3, [r3, #18]
 800ce88:	89fa      	ldrh	r2, [r7, #14]
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d14a      	bne.n	800cf24 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800ce8e:	7cfb      	ldrb	r3, [r7, #19]
 800ce90:	461a      	mov	r2, r3
 800ce92:	6839      	ldr	r1, [r7, #0]
 800ce94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ce96:	f7ff ff49 	bl	800cd2c <udp_input_local_match>
 800ce9a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d041      	beq.n	800cf24 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800cea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea2:	7c1b      	ldrb	r3, [r3, #16]
 800cea4:	f003 0304 	and.w	r3, r3, #4
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d11d      	bne.n	800cee8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800ceac:	69fb      	ldr	r3, [r7, #28]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d102      	bne.n	800ceb8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800ceb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb4:	61fb      	str	r3, [r7, #28]
 800ceb6:	e017      	b.n	800cee8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800ceb8:	7cfb      	ldrb	r3, [r7, #19]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d014      	beq.n	800cee8 <udp_input+0xf4>
 800cebe:	4b53      	ldr	r3, [pc, #332]	; (800d00c <udp_input+0x218>)
 800cec0:	695b      	ldr	r3, [r3, #20]
 800cec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cec6:	d10f      	bne.n	800cee8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800cec8:	69fb      	ldr	r3, [r7, #28]
 800ceca:	681a      	ldr	r2, [r3, #0]
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	3304      	adds	r3, #4
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d008      	beq.n	800cee8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800ced6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced8:	681a      	ldr	r2, [r3, #0]
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	3304      	adds	r3, #4
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d101      	bne.n	800cee8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800cee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800cee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceea:	8a9b      	ldrh	r3, [r3, #20]
 800ceec:	8a3a      	ldrh	r2, [r7, #16]
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d118      	bne.n	800cf24 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d005      	beq.n	800cf06 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800cefa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cefc:	685a      	ldr	r2, [r3, #4]
 800cefe:	4b43      	ldr	r3, [pc, #268]	; (800d00c <udp_input+0x218>)
 800cf00:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d10e      	bne.n	800cf24 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800cf06:	6a3b      	ldr	r3, [r7, #32]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d014      	beq.n	800cf36 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800cf0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf0e:	68da      	ldr	r2, [r3, #12]
 800cf10:	6a3b      	ldr	r3, [r7, #32]
 800cf12:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800cf14:	4b3e      	ldr	r3, [pc, #248]	; (800d010 <udp_input+0x21c>)
 800cf16:	681a      	ldr	r2, [r3, #0]
 800cf18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf1a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800cf1c:	4a3c      	ldr	r2, [pc, #240]	; (800d010 <udp_input+0x21c>)
 800cf1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf20:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800cf22:	e008      	b.n	800cf36 <udp_input+0x142>
      }
    }

    prev = pcb;
 800cf24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf26:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cf28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf2a:	68db      	ldr	r3, [r3, #12]
 800cf2c:	627b      	str	r3, [r7, #36]	; 0x24
 800cf2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d1a7      	bne.n	800ce84 <udp_input+0x90>
 800cf34:	e000      	b.n	800cf38 <udp_input+0x144>
        break;
 800cf36:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800cf38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d101      	bne.n	800cf42 <udp_input+0x14e>
    pcb = uncon_pcb;
 800cf3e:	69fb      	ldr	r3, [r7, #28]
 800cf40:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800cf42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d002      	beq.n	800cf4e <udp_input+0x15a>
    for_us = 1;
 800cf48:	2301      	movs	r3, #1
 800cf4a:	76fb      	strb	r3, [r7, #27]
 800cf4c:	e00a      	b.n	800cf64 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	3304      	adds	r3, #4
 800cf52:	681a      	ldr	r2, [r3, #0]
 800cf54:	4b2d      	ldr	r3, [pc, #180]	; (800d00c <udp_input+0x218>)
 800cf56:	695b      	ldr	r3, [r3, #20]
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	bf0c      	ite	eq
 800cf5c:	2301      	moveq	r3, #1
 800cf5e:	2300      	movne	r3, #0
 800cf60:	b2db      	uxtb	r3, r3
 800cf62:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800cf64:	7efb      	ldrb	r3, [r7, #27]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d041      	beq.n	800cfee <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800cf6a:	2108      	movs	r1, #8
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f7f9 f97b 	bl	8006268 <pbuf_remove_header>
 800cf72:	4603      	mov	r3, r0
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d00a      	beq.n	800cf8e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800cf78:	4b20      	ldr	r3, [pc, #128]	; (800cffc <udp_input+0x208>)
 800cf7a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800cf7e:	4925      	ldr	r1, [pc, #148]	; (800d014 <udp_input+0x220>)
 800cf80:	4820      	ldr	r0, [pc, #128]	; (800d004 <udp_input+0x210>)
 800cf82:	f002 fb9d 	bl	800f6c0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f7f9 f9f4 	bl	8006374 <pbuf_free>
      goto end;
 800cf8c:	e032      	b.n	800cff4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800cf8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d012      	beq.n	800cfba <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800cf94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf96:	699b      	ldr	r3, [r3, #24]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d00a      	beq.n	800cfb2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800cf9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf9e:	699c      	ldr	r4, [r3, #24]
 800cfa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa2:	69d8      	ldr	r0, [r3, #28]
 800cfa4:	8a3b      	ldrh	r3, [r7, #16]
 800cfa6:	9300      	str	r3, [sp, #0]
 800cfa8:	4b1b      	ldr	r3, [pc, #108]	; (800d018 <udp_input+0x224>)
 800cfaa:	687a      	ldr	r2, [r7, #4]
 800cfac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cfae:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800cfb0:	e021      	b.n	800cff6 <udp_input+0x202>
        pbuf_free(p);
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f7f9 f9de 	bl	8006374 <pbuf_free>
        goto end;
 800cfb8:	e01c      	b.n	800cff4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800cfba:	7cfb      	ldrb	r3, [r7, #19]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d112      	bne.n	800cfe6 <udp_input+0x1f2>
 800cfc0:	4b12      	ldr	r3, [pc, #72]	; (800d00c <udp_input+0x218>)
 800cfc2:	695b      	ldr	r3, [r3, #20]
 800cfc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cfc8:	2be0      	cmp	r3, #224	; 0xe0
 800cfca:	d00c      	beq.n	800cfe6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800cfcc:	4b0f      	ldr	r3, [pc, #60]	; (800d00c <udp_input+0x218>)
 800cfce:	899b      	ldrh	r3, [r3, #12]
 800cfd0:	3308      	adds	r3, #8
 800cfd2:	b29b      	uxth	r3, r3
 800cfd4:	b21b      	sxth	r3, r3
 800cfd6:	4619      	mov	r1, r3
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f7f9 f9b8 	bl	800634e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800cfde:	2103      	movs	r1, #3
 800cfe0:	6878      	ldr	r0, [r7, #4]
 800cfe2:	f001 f89b 	bl	800e11c <icmp_dest_unreach>
      pbuf_free(p);
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f7f9 f9c4 	bl	8006374 <pbuf_free>
  return;
 800cfec:	e003      	b.n	800cff6 <udp_input+0x202>
    pbuf_free(p);
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f7f9 f9c0 	bl	8006374 <pbuf_free>
  return;
 800cff4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800cff6:	372c      	adds	r7, #44	; 0x2c
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd90      	pop	{r4, r7, pc}
 800cffc:	08012b34 	.word	0x08012b34
 800d000:	08012bd8 	.word	0x08012bd8
 800d004:	08012b88 	.word	0x08012b88
 800d008:	08012bf0 	.word	0x08012bf0
 800d00c:	200033f4 	.word	0x200033f4
 800d010:	20006950 	.word	0x20006950
 800d014:	08012c0c 	.word	0x08012c0c
 800d018:	20003404 	.word	0x20003404

0800d01c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d01c:	b480      	push	{r7}
 800d01e:	b085      	sub	sp, #20
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d01e      	beq.n	800d06a <udp_netif_ip_addr_changed+0x4e>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d01a      	beq.n	800d06a <udp_netif_ip_addr_changed+0x4e>
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d017      	beq.n	800d06a <udp_netif_ip_addr_changed+0x4e>
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d013      	beq.n	800d06a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d042:	4b0d      	ldr	r3, [pc, #52]	; (800d078 <udp_netif_ip_addr_changed+0x5c>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	60fb      	str	r3, [r7, #12]
 800d048:	e00c      	b.n	800d064 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	681a      	ldr	r2, [r3, #0]
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	429a      	cmp	r2, r3
 800d054:	d103      	bne.n	800d05e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	681a      	ldr	r2, [r3, #0]
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	68db      	ldr	r3, [r3, #12]
 800d062:	60fb      	str	r3, [r7, #12]
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d1ef      	bne.n	800d04a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800d06a:	bf00      	nop
 800d06c:	3714      	adds	r7, #20
 800d06e:	46bd      	mov	sp, r7
 800d070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d074:	4770      	bx	lr
 800d076:	bf00      	nop
 800d078:	20006950 	.word	0x20006950

0800d07c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b082      	sub	sp, #8
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d084:	4915      	ldr	r1, [pc, #84]	; (800d0dc <etharp_free_entry+0x60>)
 800d086:	687a      	ldr	r2, [r7, #4]
 800d088:	4613      	mov	r3, r2
 800d08a:	005b      	lsls	r3, r3, #1
 800d08c:	4413      	add	r3, r2
 800d08e:	00db      	lsls	r3, r3, #3
 800d090:	440b      	add	r3, r1
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d013      	beq.n	800d0c0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d098:	4910      	ldr	r1, [pc, #64]	; (800d0dc <etharp_free_entry+0x60>)
 800d09a:	687a      	ldr	r2, [r7, #4]
 800d09c:	4613      	mov	r3, r2
 800d09e:	005b      	lsls	r3, r3, #1
 800d0a0:	4413      	add	r3, r2
 800d0a2:	00db      	lsls	r3, r3, #3
 800d0a4:	440b      	add	r3, r1
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f7f9 f963 	bl	8006374 <pbuf_free>
    arp_table[i].q = NULL;
 800d0ae:	490b      	ldr	r1, [pc, #44]	; (800d0dc <etharp_free_entry+0x60>)
 800d0b0:	687a      	ldr	r2, [r7, #4]
 800d0b2:	4613      	mov	r3, r2
 800d0b4:	005b      	lsls	r3, r3, #1
 800d0b6:	4413      	add	r3, r2
 800d0b8:	00db      	lsls	r3, r3, #3
 800d0ba:	440b      	add	r3, r1
 800d0bc:	2200      	movs	r2, #0
 800d0be:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d0c0:	4906      	ldr	r1, [pc, #24]	; (800d0dc <etharp_free_entry+0x60>)
 800d0c2:	687a      	ldr	r2, [r7, #4]
 800d0c4:	4613      	mov	r3, r2
 800d0c6:	005b      	lsls	r3, r3, #1
 800d0c8:	4413      	add	r3, r2
 800d0ca:	00db      	lsls	r3, r3, #3
 800d0cc:	440b      	add	r3, r1
 800d0ce:	3314      	adds	r3, #20
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d0d4:	bf00      	nop
 800d0d6:	3708      	adds	r7, #8
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}
 800d0dc:	20000114 	.word	0x20000114

0800d0e0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b082      	sub	sp, #8
 800d0e4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	607b      	str	r3, [r7, #4]
 800d0ea:	e096      	b.n	800d21a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800d0ec:	494f      	ldr	r1, [pc, #316]	; (800d22c <etharp_tmr+0x14c>)
 800d0ee:	687a      	ldr	r2, [r7, #4]
 800d0f0:	4613      	mov	r3, r2
 800d0f2:	005b      	lsls	r3, r3, #1
 800d0f4:	4413      	add	r3, r2
 800d0f6:	00db      	lsls	r3, r3, #3
 800d0f8:	440b      	add	r3, r1
 800d0fa:	3314      	adds	r3, #20
 800d0fc:	781b      	ldrb	r3, [r3, #0]
 800d0fe:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800d100:	78fb      	ldrb	r3, [r7, #3]
 800d102:	2b00      	cmp	r3, #0
 800d104:	f000 8086 	beq.w	800d214 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800d108:	4948      	ldr	r1, [pc, #288]	; (800d22c <etharp_tmr+0x14c>)
 800d10a:	687a      	ldr	r2, [r7, #4]
 800d10c:	4613      	mov	r3, r2
 800d10e:	005b      	lsls	r3, r3, #1
 800d110:	4413      	add	r3, r2
 800d112:	00db      	lsls	r3, r3, #3
 800d114:	440b      	add	r3, r1
 800d116:	3312      	adds	r3, #18
 800d118:	881b      	ldrh	r3, [r3, #0]
 800d11a:	3301      	adds	r3, #1
 800d11c:	b298      	uxth	r0, r3
 800d11e:	4943      	ldr	r1, [pc, #268]	; (800d22c <etharp_tmr+0x14c>)
 800d120:	687a      	ldr	r2, [r7, #4]
 800d122:	4613      	mov	r3, r2
 800d124:	005b      	lsls	r3, r3, #1
 800d126:	4413      	add	r3, r2
 800d128:	00db      	lsls	r3, r3, #3
 800d12a:	440b      	add	r3, r1
 800d12c:	3312      	adds	r3, #18
 800d12e:	4602      	mov	r2, r0
 800d130:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d132:	493e      	ldr	r1, [pc, #248]	; (800d22c <etharp_tmr+0x14c>)
 800d134:	687a      	ldr	r2, [r7, #4]
 800d136:	4613      	mov	r3, r2
 800d138:	005b      	lsls	r3, r3, #1
 800d13a:	4413      	add	r3, r2
 800d13c:	00db      	lsls	r3, r3, #3
 800d13e:	440b      	add	r3, r1
 800d140:	3312      	adds	r3, #18
 800d142:	881b      	ldrh	r3, [r3, #0]
 800d144:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d148:	d215      	bcs.n	800d176 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d14a:	4938      	ldr	r1, [pc, #224]	; (800d22c <etharp_tmr+0x14c>)
 800d14c:	687a      	ldr	r2, [r7, #4]
 800d14e:	4613      	mov	r3, r2
 800d150:	005b      	lsls	r3, r3, #1
 800d152:	4413      	add	r3, r2
 800d154:	00db      	lsls	r3, r3, #3
 800d156:	440b      	add	r3, r1
 800d158:	3314      	adds	r3, #20
 800d15a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d15c:	2b01      	cmp	r3, #1
 800d15e:	d10e      	bne.n	800d17e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d160:	4932      	ldr	r1, [pc, #200]	; (800d22c <etharp_tmr+0x14c>)
 800d162:	687a      	ldr	r2, [r7, #4]
 800d164:	4613      	mov	r3, r2
 800d166:	005b      	lsls	r3, r3, #1
 800d168:	4413      	add	r3, r2
 800d16a:	00db      	lsls	r3, r3, #3
 800d16c:	440b      	add	r3, r1
 800d16e:	3312      	adds	r3, #18
 800d170:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d172:	2b04      	cmp	r3, #4
 800d174:	d903      	bls.n	800d17e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f7ff ff80 	bl	800d07c <etharp_free_entry>
 800d17c:	e04a      	b.n	800d214 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d17e:	492b      	ldr	r1, [pc, #172]	; (800d22c <etharp_tmr+0x14c>)
 800d180:	687a      	ldr	r2, [r7, #4]
 800d182:	4613      	mov	r3, r2
 800d184:	005b      	lsls	r3, r3, #1
 800d186:	4413      	add	r3, r2
 800d188:	00db      	lsls	r3, r3, #3
 800d18a:	440b      	add	r3, r1
 800d18c:	3314      	adds	r3, #20
 800d18e:	781b      	ldrb	r3, [r3, #0]
 800d190:	2b03      	cmp	r3, #3
 800d192:	d10a      	bne.n	800d1aa <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d194:	4925      	ldr	r1, [pc, #148]	; (800d22c <etharp_tmr+0x14c>)
 800d196:	687a      	ldr	r2, [r7, #4]
 800d198:	4613      	mov	r3, r2
 800d19a:	005b      	lsls	r3, r3, #1
 800d19c:	4413      	add	r3, r2
 800d19e:	00db      	lsls	r3, r3, #3
 800d1a0:	440b      	add	r3, r1
 800d1a2:	3314      	adds	r3, #20
 800d1a4:	2204      	movs	r2, #4
 800d1a6:	701a      	strb	r2, [r3, #0]
 800d1a8:	e034      	b.n	800d214 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d1aa:	4920      	ldr	r1, [pc, #128]	; (800d22c <etharp_tmr+0x14c>)
 800d1ac:	687a      	ldr	r2, [r7, #4]
 800d1ae:	4613      	mov	r3, r2
 800d1b0:	005b      	lsls	r3, r3, #1
 800d1b2:	4413      	add	r3, r2
 800d1b4:	00db      	lsls	r3, r3, #3
 800d1b6:	440b      	add	r3, r1
 800d1b8:	3314      	adds	r3, #20
 800d1ba:	781b      	ldrb	r3, [r3, #0]
 800d1bc:	2b04      	cmp	r3, #4
 800d1be:	d10a      	bne.n	800d1d6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d1c0:	491a      	ldr	r1, [pc, #104]	; (800d22c <etharp_tmr+0x14c>)
 800d1c2:	687a      	ldr	r2, [r7, #4]
 800d1c4:	4613      	mov	r3, r2
 800d1c6:	005b      	lsls	r3, r3, #1
 800d1c8:	4413      	add	r3, r2
 800d1ca:	00db      	lsls	r3, r3, #3
 800d1cc:	440b      	add	r3, r1
 800d1ce:	3314      	adds	r3, #20
 800d1d0:	2202      	movs	r2, #2
 800d1d2:	701a      	strb	r2, [r3, #0]
 800d1d4:	e01e      	b.n	800d214 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d1d6:	4915      	ldr	r1, [pc, #84]	; (800d22c <etharp_tmr+0x14c>)
 800d1d8:	687a      	ldr	r2, [r7, #4]
 800d1da:	4613      	mov	r3, r2
 800d1dc:	005b      	lsls	r3, r3, #1
 800d1de:	4413      	add	r3, r2
 800d1e0:	00db      	lsls	r3, r3, #3
 800d1e2:	440b      	add	r3, r1
 800d1e4:	3314      	adds	r3, #20
 800d1e6:	781b      	ldrb	r3, [r3, #0]
 800d1e8:	2b01      	cmp	r3, #1
 800d1ea:	d113      	bne.n	800d214 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d1ec:	490f      	ldr	r1, [pc, #60]	; (800d22c <etharp_tmr+0x14c>)
 800d1ee:	687a      	ldr	r2, [r7, #4]
 800d1f0:	4613      	mov	r3, r2
 800d1f2:	005b      	lsls	r3, r3, #1
 800d1f4:	4413      	add	r3, r2
 800d1f6:	00db      	lsls	r3, r3, #3
 800d1f8:	440b      	add	r3, r1
 800d1fa:	3308      	adds	r3, #8
 800d1fc:	6818      	ldr	r0, [r3, #0]
 800d1fe:	687a      	ldr	r2, [r7, #4]
 800d200:	4613      	mov	r3, r2
 800d202:	005b      	lsls	r3, r3, #1
 800d204:	4413      	add	r3, r2
 800d206:	00db      	lsls	r3, r3, #3
 800d208:	4a08      	ldr	r2, [pc, #32]	; (800d22c <etharp_tmr+0x14c>)
 800d20a:	4413      	add	r3, r2
 800d20c:	3304      	adds	r3, #4
 800d20e:	4619      	mov	r1, r3
 800d210:	f000 fe6e 	bl	800def0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	3301      	adds	r3, #1
 800d218:	607b      	str	r3, [r7, #4]
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2b09      	cmp	r3, #9
 800d21e:	f77f af65 	ble.w	800d0ec <etharp_tmr+0xc>
      }
    }
  }
}
 800d222:	bf00      	nop
 800d224:	bf00      	nop
 800d226:	3708      	adds	r7, #8
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}
 800d22c:	20000114 	.word	0x20000114

0800d230 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b08a      	sub	sp, #40	; 0x28
 800d234:	af00      	add	r7, sp, #0
 800d236:	60f8      	str	r0, [r7, #12]
 800d238:	460b      	mov	r3, r1
 800d23a:	607a      	str	r2, [r7, #4]
 800d23c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d23e:	230a      	movs	r3, #10
 800d240:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d242:	230a      	movs	r3, #10
 800d244:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800d246:	230a      	movs	r3, #10
 800d248:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800d24a:	2300      	movs	r3, #0
 800d24c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800d24e:	230a      	movs	r3, #10
 800d250:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d252:	2300      	movs	r3, #0
 800d254:	83bb      	strh	r3, [r7, #28]
 800d256:	2300      	movs	r3, #0
 800d258:	837b      	strh	r3, [r7, #26]
 800d25a:	2300      	movs	r3, #0
 800d25c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d25e:	2300      	movs	r3, #0
 800d260:	843b      	strh	r3, [r7, #32]
 800d262:	e0ae      	b.n	800d3c2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800d264:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d268:	49a6      	ldr	r1, [pc, #664]	; (800d504 <etharp_find_entry+0x2d4>)
 800d26a:	4613      	mov	r3, r2
 800d26c:	005b      	lsls	r3, r3, #1
 800d26e:	4413      	add	r3, r2
 800d270:	00db      	lsls	r3, r3, #3
 800d272:	440b      	add	r3, r1
 800d274:	3314      	adds	r3, #20
 800d276:	781b      	ldrb	r3, [r3, #0]
 800d278:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d27a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d27e:	2b0a      	cmp	r3, #10
 800d280:	d105      	bne.n	800d28e <etharp_find_entry+0x5e>
 800d282:	7dfb      	ldrb	r3, [r7, #23]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d102      	bne.n	800d28e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800d288:	8c3b      	ldrh	r3, [r7, #32]
 800d28a:	847b      	strh	r3, [r7, #34]	; 0x22
 800d28c:	e095      	b.n	800d3ba <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800d28e:	7dfb      	ldrb	r3, [r7, #23]
 800d290:	2b00      	cmp	r3, #0
 800d292:	f000 8092 	beq.w	800d3ba <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800d296:	7dfb      	ldrb	r3, [r7, #23]
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d009      	beq.n	800d2b0 <etharp_find_entry+0x80>
 800d29c:	7dfb      	ldrb	r3, [r7, #23]
 800d29e:	2b01      	cmp	r3, #1
 800d2a0:	d806      	bhi.n	800d2b0 <etharp_find_entry+0x80>
 800d2a2:	4b99      	ldr	r3, [pc, #612]	; (800d508 <etharp_find_entry+0x2d8>)
 800d2a4:	f240 1223 	movw	r2, #291	; 0x123
 800d2a8:	4998      	ldr	r1, [pc, #608]	; (800d50c <etharp_find_entry+0x2dc>)
 800d2aa:	4899      	ldr	r0, [pc, #612]	; (800d510 <etharp_find_entry+0x2e0>)
 800d2ac:	f002 fa08 	bl	800f6c0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d020      	beq.n	800d2f8 <etharp_find_entry+0xc8>
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	6819      	ldr	r1, [r3, #0]
 800d2ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d2be:	4891      	ldr	r0, [pc, #580]	; (800d504 <etharp_find_entry+0x2d4>)
 800d2c0:	4613      	mov	r3, r2
 800d2c2:	005b      	lsls	r3, r3, #1
 800d2c4:	4413      	add	r3, r2
 800d2c6:	00db      	lsls	r3, r3, #3
 800d2c8:	4403      	add	r3, r0
 800d2ca:	3304      	adds	r3, #4
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	4299      	cmp	r1, r3
 800d2d0:	d112      	bne.n	800d2f8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d00c      	beq.n	800d2f2 <etharp_find_entry+0xc2>
 800d2d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d2dc:	4989      	ldr	r1, [pc, #548]	; (800d504 <etharp_find_entry+0x2d4>)
 800d2de:	4613      	mov	r3, r2
 800d2e0:	005b      	lsls	r3, r3, #1
 800d2e2:	4413      	add	r3, r2
 800d2e4:	00db      	lsls	r3, r3, #3
 800d2e6:	440b      	add	r3, r1
 800d2e8:	3308      	adds	r3, #8
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	687a      	ldr	r2, [r7, #4]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d102      	bne.n	800d2f8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800d2f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d2f6:	e100      	b.n	800d4fa <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d2f8:	7dfb      	ldrb	r3, [r7, #23]
 800d2fa:	2b01      	cmp	r3, #1
 800d2fc:	d140      	bne.n	800d380 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800d2fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d302:	4980      	ldr	r1, [pc, #512]	; (800d504 <etharp_find_entry+0x2d4>)
 800d304:	4613      	mov	r3, r2
 800d306:	005b      	lsls	r3, r3, #1
 800d308:	4413      	add	r3, r2
 800d30a:	00db      	lsls	r3, r3, #3
 800d30c:	440b      	add	r3, r1
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d01a      	beq.n	800d34a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800d314:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d318:	497a      	ldr	r1, [pc, #488]	; (800d504 <etharp_find_entry+0x2d4>)
 800d31a:	4613      	mov	r3, r2
 800d31c:	005b      	lsls	r3, r3, #1
 800d31e:	4413      	add	r3, r2
 800d320:	00db      	lsls	r3, r3, #3
 800d322:	440b      	add	r3, r1
 800d324:	3312      	adds	r3, #18
 800d326:	881b      	ldrh	r3, [r3, #0]
 800d328:	8bba      	ldrh	r2, [r7, #28]
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d845      	bhi.n	800d3ba <etharp_find_entry+0x18a>
            old_queue = i;
 800d32e:	8c3b      	ldrh	r3, [r7, #32]
 800d330:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800d332:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d336:	4973      	ldr	r1, [pc, #460]	; (800d504 <etharp_find_entry+0x2d4>)
 800d338:	4613      	mov	r3, r2
 800d33a:	005b      	lsls	r3, r3, #1
 800d33c:	4413      	add	r3, r2
 800d33e:	00db      	lsls	r3, r3, #3
 800d340:	440b      	add	r3, r1
 800d342:	3312      	adds	r3, #18
 800d344:	881b      	ldrh	r3, [r3, #0]
 800d346:	83bb      	strh	r3, [r7, #28]
 800d348:	e037      	b.n	800d3ba <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800d34a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d34e:	496d      	ldr	r1, [pc, #436]	; (800d504 <etharp_find_entry+0x2d4>)
 800d350:	4613      	mov	r3, r2
 800d352:	005b      	lsls	r3, r3, #1
 800d354:	4413      	add	r3, r2
 800d356:	00db      	lsls	r3, r3, #3
 800d358:	440b      	add	r3, r1
 800d35a:	3312      	adds	r3, #18
 800d35c:	881b      	ldrh	r3, [r3, #0]
 800d35e:	8b7a      	ldrh	r2, [r7, #26]
 800d360:	429a      	cmp	r2, r3
 800d362:	d82a      	bhi.n	800d3ba <etharp_find_entry+0x18a>
            old_pending = i;
 800d364:	8c3b      	ldrh	r3, [r7, #32]
 800d366:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800d368:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d36c:	4965      	ldr	r1, [pc, #404]	; (800d504 <etharp_find_entry+0x2d4>)
 800d36e:	4613      	mov	r3, r2
 800d370:	005b      	lsls	r3, r3, #1
 800d372:	4413      	add	r3, r2
 800d374:	00db      	lsls	r3, r3, #3
 800d376:	440b      	add	r3, r1
 800d378:	3312      	adds	r3, #18
 800d37a:	881b      	ldrh	r3, [r3, #0]
 800d37c:	837b      	strh	r3, [r7, #26]
 800d37e:	e01c      	b.n	800d3ba <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d380:	7dfb      	ldrb	r3, [r7, #23]
 800d382:	2b01      	cmp	r3, #1
 800d384:	d919      	bls.n	800d3ba <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d386:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d38a:	495e      	ldr	r1, [pc, #376]	; (800d504 <etharp_find_entry+0x2d4>)
 800d38c:	4613      	mov	r3, r2
 800d38e:	005b      	lsls	r3, r3, #1
 800d390:	4413      	add	r3, r2
 800d392:	00db      	lsls	r3, r3, #3
 800d394:	440b      	add	r3, r1
 800d396:	3312      	adds	r3, #18
 800d398:	881b      	ldrh	r3, [r3, #0]
 800d39a:	8b3a      	ldrh	r2, [r7, #24]
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d80c      	bhi.n	800d3ba <etharp_find_entry+0x18a>
            old_stable = i;
 800d3a0:	8c3b      	ldrh	r3, [r7, #32]
 800d3a2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800d3a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d3a8:	4956      	ldr	r1, [pc, #344]	; (800d504 <etharp_find_entry+0x2d4>)
 800d3aa:	4613      	mov	r3, r2
 800d3ac:	005b      	lsls	r3, r3, #1
 800d3ae:	4413      	add	r3, r2
 800d3b0:	00db      	lsls	r3, r3, #3
 800d3b2:	440b      	add	r3, r1
 800d3b4:	3312      	adds	r3, #18
 800d3b6:	881b      	ldrh	r3, [r3, #0]
 800d3b8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d3ba:	8c3b      	ldrh	r3, [r7, #32]
 800d3bc:	3301      	adds	r3, #1
 800d3be:	b29b      	uxth	r3, r3
 800d3c0:	843b      	strh	r3, [r7, #32]
 800d3c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d3c6:	2b09      	cmp	r3, #9
 800d3c8:	f77f af4c 	ble.w	800d264 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d3cc:	7afb      	ldrb	r3, [r7, #11]
 800d3ce:	f003 0302 	and.w	r3, r3, #2
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d108      	bne.n	800d3e8 <etharp_find_entry+0x1b8>
 800d3d6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d3da:	2b0a      	cmp	r3, #10
 800d3dc:	d107      	bne.n	800d3ee <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d3de:	7afb      	ldrb	r3, [r7, #11]
 800d3e0:	f003 0301 	and.w	r3, r3, #1
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d102      	bne.n	800d3ee <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800d3e8:	f04f 33ff 	mov.w	r3, #4294967295
 800d3ec:	e085      	b.n	800d4fa <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d3ee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d3f2:	2b09      	cmp	r3, #9
 800d3f4:	dc02      	bgt.n	800d3fc <etharp_find_entry+0x1cc>
    i = empty;
 800d3f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d3f8:	843b      	strh	r3, [r7, #32]
 800d3fa:	e039      	b.n	800d470 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d3fc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d400:	2b09      	cmp	r3, #9
 800d402:	dc14      	bgt.n	800d42e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800d404:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d406:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d408:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d40c:	493d      	ldr	r1, [pc, #244]	; (800d504 <etharp_find_entry+0x2d4>)
 800d40e:	4613      	mov	r3, r2
 800d410:	005b      	lsls	r3, r3, #1
 800d412:	4413      	add	r3, r2
 800d414:	00db      	lsls	r3, r3, #3
 800d416:	440b      	add	r3, r1
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d018      	beq.n	800d450 <etharp_find_entry+0x220>
 800d41e:	4b3a      	ldr	r3, [pc, #232]	; (800d508 <etharp_find_entry+0x2d8>)
 800d420:	f240 126d 	movw	r2, #365	; 0x16d
 800d424:	493b      	ldr	r1, [pc, #236]	; (800d514 <etharp_find_entry+0x2e4>)
 800d426:	483a      	ldr	r0, [pc, #232]	; (800d510 <etharp_find_entry+0x2e0>)
 800d428:	f002 f94a 	bl	800f6c0 <iprintf>
 800d42c:	e010      	b.n	800d450 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d42e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d432:	2b09      	cmp	r3, #9
 800d434:	dc02      	bgt.n	800d43c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800d436:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d438:	843b      	strh	r3, [r7, #32]
 800d43a:	e009      	b.n	800d450 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d43c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d440:	2b09      	cmp	r3, #9
 800d442:	dc02      	bgt.n	800d44a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d444:	8bfb      	ldrh	r3, [r7, #30]
 800d446:	843b      	strh	r3, [r7, #32]
 800d448:	e002      	b.n	800d450 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800d44a:	f04f 33ff 	mov.w	r3, #4294967295
 800d44e:	e054      	b.n	800d4fa <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d450:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d454:	2b09      	cmp	r3, #9
 800d456:	dd06      	ble.n	800d466 <etharp_find_entry+0x236>
 800d458:	4b2b      	ldr	r3, [pc, #172]	; (800d508 <etharp_find_entry+0x2d8>)
 800d45a:	f240 127f 	movw	r2, #383	; 0x17f
 800d45e:	492e      	ldr	r1, [pc, #184]	; (800d518 <etharp_find_entry+0x2e8>)
 800d460:	482b      	ldr	r0, [pc, #172]	; (800d510 <etharp_find_entry+0x2e0>)
 800d462:	f002 f92d 	bl	800f6c0 <iprintf>
    etharp_free_entry(i);
 800d466:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d46a:	4618      	mov	r0, r3
 800d46c:	f7ff fe06 	bl	800d07c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d470:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d474:	2b09      	cmp	r3, #9
 800d476:	dd06      	ble.n	800d486 <etharp_find_entry+0x256>
 800d478:	4b23      	ldr	r3, [pc, #140]	; (800d508 <etharp_find_entry+0x2d8>)
 800d47a:	f240 1283 	movw	r2, #387	; 0x183
 800d47e:	4926      	ldr	r1, [pc, #152]	; (800d518 <etharp_find_entry+0x2e8>)
 800d480:	4823      	ldr	r0, [pc, #140]	; (800d510 <etharp_find_entry+0x2e0>)
 800d482:	f002 f91d 	bl	800f6c0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d486:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d48a:	491e      	ldr	r1, [pc, #120]	; (800d504 <etharp_find_entry+0x2d4>)
 800d48c:	4613      	mov	r3, r2
 800d48e:	005b      	lsls	r3, r3, #1
 800d490:	4413      	add	r3, r2
 800d492:	00db      	lsls	r3, r3, #3
 800d494:	440b      	add	r3, r1
 800d496:	3314      	adds	r3, #20
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d006      	beq.n	800d4ac <etharp_find_entry+0x27c>
 800d49e:	4b1a      	ldr	r3, [pc, #104]	; (800d508 <etharp_find_entry+0x2d8>)
 800d4a0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800d4a4:	491d      	ldr	r1, [pc, #116]	; (800d51c <etharp_find_entry+0x2ec>)
 800d4a6:	481a      	ldr	r0, [pc, #104]	; (800d510 <etharp_find_entry+0x2e0>)
 800d4a8:	f002 f90a 	bl	800f6c0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d00b      	beq.n	800d4ca <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d4b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	6819      	ldr	r1, [r3, #0]
 800d4ba:	4812      	ldr	r0, [pc, #72]	; (800d504 <etharp_find_entry+0x2d4>)
 800d4bc:	4613      	mov	r3, r2
 800d4be:	005b      	lsls	r3, r3, #1
 800d4c0:	4413      	add	r3, r2
 800d4c2:	00db      	lsls	r3, r3, #3
 800d4c4:	4403      	add	r3, r0
 800d4c6:	3304      	adds	r3, #4
 800d4c8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d4ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d4ce:	490d      	ldr	r1, [pc, #52]	; (800d504 <etharp_find_entry+0x2d4>)
 800d4d0:	4613      	mov	r3, r2
 800d4d2:	005b      	lsls	r3, r3, #1
 800d4d4:	4413      	add	r3, r2
 800d4d6:	00db      	lsls	r3, r3, #3
 800d4d8:	440b      	add	r3, r1
 800d4da:	3312      	adds	r3, #18
 800d4dc:	2200      	movs	r2, #0
 800d4de:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d4e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d4e4:	4907      	ldr	r1, [pc, #28]	; (800d504 <etharp_find_entry+0x2d4>)
 800d4e6:	4613      	mov	r3, r2
 800d4e8:	005b      	lsls	r3, r3, #1
 800d4ea:	4413      	add	r3, r2
 800d4ec:	00db      	lsls	r3, r3, #3
 800d4ee:	440b      	add	r3, r1
 800d4f0:	3308      	adds	r3, #8
 800d4f2:	687a      	ldr	r2, [r7, #4]
 800d4f4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800d4f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3728      	adds	r7, #40	; 0x28
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}
 800d502:	bf00      	nop
 800d504:	20000114 	.word	0x20000114
 800d508:	08012e98 	.word	0x08012e98
 800d50c:	08012ed0 	.word	0x08012ed0
 800d510:	08012f10 	.word	0x08012f10
 800d514:	08012f38 	.word	0x08012f38
 800d518:	08012f50 	.word	0x08012f50
 800d51c:	08012f64 	.word	0x08012f64

0800d520 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b088      	sub	sp, #32
 800d524:	af02      	add	r7, sp, #8
 800d526:	60f8      	str	r0, [r7, #12]
 800d528:	60b9      	str	r1, [r7, #8]
 800d52a:	607a      	str	r2, [r7, #4]
 800d52c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d534:	2b06      	cmp	r3, #6
 800d536:	d006      	beq.n	800d546 <etharp_update_arp_entry+0x26>
 800d538:	4b48      	ldr	r3, [pc, #288]	; (800d65c <etharp_update_arp_entry+0x13c>)
 800d53a:	f240 12a9 	movw	r2, #425	; 0x1a9
 800d53e:	4948      	ldr	r1, [pc, #288]	; (800d660 <etharp_update_arp_entry+0x140>)
 800d540:	4848      	ldr	r0, [pc, #288]	; (800d664 <etharp_update_arp_entry+0x144>)
 800d542:	f002 f8bd 	bl	800f6c0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d012      	beq.n	800d572 <etharp_update_arp_entry+0x52>
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d00e      	beq.n	800d572 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	68f9      	ldr	r1, [r7, #12]
 800d55a:	4618      	mov	r0, r3
 800d55c:	f001 f8fe 	bl	800e75c <ip4_addr_isbroadcast_u32>
 800d560:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d562:	2b00      	cmp	r3, #0
 800d564:	d105      	bne.n	800d572 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d56e:	2be0      	cmp	r3, #224	; 0xe0
 800d570:	d102      	bne.n	800d578 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d572:	f06f 030f 	mvn.w	r3, #15
 800d576:	e06c      	b.n	800d652 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d578:	78fb      	ldrb	r3, [r7, #3]
 800d57a:	68fa      	ldr	r2, [r7, #12]
 800d57c:	4619      	mov	r1, r3
 800d57e:	68b8      	ldr	r0, [r7, #8]
 800d580:	f7ff fe56 	bl	800d230 <etharp_find_entry>
 800d584:	4603      	mov	r3, r0
 800d586:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d588:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	da02      	bge.n	800d596 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d590:	8afb      	ldrh	r3, [r7, #22]
 800d592:	b25b      	sxtb	r3, r3
 800d594:	e05d      	b.n	800d652 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d596:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d59a:	4933      	ldr	r1, [pc, #204]	; (800d668 <etharp_update_arp_entry+0x148>)
 800d59c:	4613      	mov	r3, r2
 800d59e:	005b      	lsls	r3, r3, #1
 800d5a0:	4413      	add	r3, r2
 800d5a2:	00db      	lsls	r3, r3, #3
 800d5a4:	440b      	add	r3, r1
 800d5a6:	3314      	adds	r3, #20
 800d5a8:	2202      	movs	r2, #2
 800d5aa:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d5ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d5b0:	492d      	ldr	r1, [pc, #180]	; (800d668 <etharp_update_arp_entry+0x148>)
 800d5b2:	4613      	mov	r3, r2
 800d5b4:	005b      	lsls	r3, r3, #1
 800d5b6:	4413      	add	r3, r2
 800d5b8:	00db      	lsls	r3, r3, #3
 800d5ba:	440b      	add	r3, r1
 800d5bc:	3308      	adds	r3, #8
 800d5be:	68fa      	ldr	r2, [r7, #12]
 800d5c0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d5c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d5c6:	4613      	mov	r3, r2
 800d5c8:	005b      	lsls	r3, r3, #1
 800d5ca:	4413      	add	r3, r2
 800d5cc:	00db      	lsls	r3, r3, #3
 800d5ce:	3308      	adds	r3, #8
 800d5d0:	4a25      	ldr	r2, [pc, #148]	; (800d668 <etharp_update_arp_entry+0x148>)
 800d5d2:	4413      	add	r3, r2
 800d5d4:	3304      	adds	r3, #4
 800d5d6:	2206      	movs	r2, #6
 800d5d8:	6879      	ldr	r1, [r7, #4]
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f002 f840 	bl	800f660 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d5e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d5e4:	4920      	ldr	r1, [pc, #128]	; (800d668 <etharp_update_arp_entry+0x148>)
 800d5e6:	4613      	mov	r3, r2
 800d5e8:	005b      	lsls	r3, r3, #1
 800d5ea:	4413      	add	r3, r2
 800d5ec:	00db      	lsls	r3, r3, #3
 800d5ee:	440b      	add	r3, r1
 800d5f0:	3312      	adds	r3, #18
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d5f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d5fa:	491b      	ldr	r1, [pc, #108]	; (800d668 <etharp_update_arp_entry+0x148>)
 800d5fc:	4613      	mov	r3, r2
 800d5fe:	005b      	lsls	r3, r3, #1
 800d600:	4413      	add	r3, r2
 800d602:	00db      	lsls	r3, r3, #3
 800d604:	440b      	add	r3, r1
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d021      	beq.n	800d650 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d60c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d610:	4915      	ldr	r1, [pc, #84]	; (800d668 <etharp_update_arp_entry+0x148>)
 800d612:	4613      	mov	r3, r2
 800d614:	005b      	lsls	r3, r3, #1
 800d616:	4413      	add	r3, r2
 800d618:	00db      	lsls	r3, r3, #3
 800d61a:	440b      	add	r3, r1
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d620:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d624:	4910      	ldr	r1, [pc, #64]	; (800d668 <etharp_update_arp_entry+0x148>)
 800d626:	4613      	mov	r3, r2
 800d628:	005b      	lsls	r3, r3, #1
 800d62a:	4413      	add	r3, r2
 800d62c:	00db      	lsls	r3, r3, #3
 800d62e:	440b      	add	r3, r1
 800d630:	2200      	movs	r2, #0
 800d632:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d63a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d63e:	9300      	str	r3, [sp, #0]
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6939      	ldr	r1, [r7, #16]
 800d644:	68f8      	ldr	r0, [r7, #12]
 800d646:	f001 ff91 	bl	800f56c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d64a:	6938      	ldr	r0, [r7, #16]
 800d64c:	f7f8 fe92 	bl	8006374 <pbuf_free>
  }
  return ERR_OK;
 800d650:	2300      	movs	r3, #0
}
 800d652:	4618      	mov	r0, r3
 800d654:	3718      	adds	r7, #24
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}
 800d65a:	bf00      	nop
 800d65c:	08012e98 	.word	0x08012e98
 800d660:	08012f90 	.word	0x08012f90
 800d664:	08012f10 	.word	0x08012f10
 800d668:	20000114 	.word	0x20000114

0800d66c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b084      	sub	sp, #16
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d674:	2300      	movs	r3, #0
 800d676:	60fb      	str	r3, [r7, #12]
 800d678:	e01e      	b.n	800d6b8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800d67a:	4913      	ldr	r1, [pc, #76]	; (800d6c8 <etharp_cleanup_netif+0x5c>)
 800d67c:	68fa      	ldr	r2, [r7, #12]
 800d67e:	4613      	mov	r3, r2
 800d680:	005b      	lsls	r3, r3, #1
 800d682:	4413      	add	r3, r2
 800d684:	00db      	lsls	r3, r3, #3
 800d686:	440b      	add	r3, r1
 800d688:	3314      	adds	r3, #20
 800d68a:	781b      	ldrb	r3, [r3, #0]
 800d68c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d68e:	7afb      	ldrb	r3, [r7, #11]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d00e      	beq.n	800d6b2 <etharp_cleanup_netif+0x46>
 800d694:	490c      	ldr	r1, [pc, #48]	; (800d6c8 <etharp_cleanup_netif+0x5c>)
 800d696:	68fa      	ldr	r2, [r7, #12]
 800d698:	4613      	mov	r3, r2
 800d69a:	005b      	lsls	r3, r3, #1
 800d69c:	4413      	add	r3, r2
 800d69e:	00db      	lsls	r3, r3, #3
 800d6a0:	440b      	add	r3, r1
 800d6a2:	3308      	adds	r3, #8
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	687a      	ldr	r2, [r7, #4]
 800d6a8:	429a      	cmp	r2, r3
 800d6aa:	d102      	bne.n	800d6b2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800d6ac:	68f8      	ldr	r0, [r7, #12]
 800d6ae:	f7ff fce5 	bl	800d07c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	3301      	adds	r3, #1
 800d6b6:	60fb      	str	r3, [r7, #12]
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	2b09      	cmp	r3, #9
 800d6bc:	dddd      	ble.n	800d67a <etharp_cleanup_netif+0xe>
    }
  }
}
 800d6be:	bf00      	nop
 800d6c0:	bf00      	nop
 800d6c2:	3710      	adds	r7, #16
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	20000114 	.word	0x20000114

0800d6cc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d6cc:	b5b0      	push	{r4, r5, r7, lr}
 800d6ce:	b08a      	sub	sp, #40	; 0x28
 800d6d0:	af04      	add	r7, sp, #16
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d107      	bne.n	800d6ec <etharp_input+0x20>
 800d6dc:	4b3d      	ldr	r3, [pc, #244]	; (800d7d4 <etharp_input+0x108>)
 800d6de:	f240 228a 	movw	r2, #650	; 0x28a
 800d6e2:	493d      	ldr	r1, [pc, #244]	; (800d7d8 <etharp_input+0x10c>)
 800d6e4:	483d      	ldr	r0, [pc, #244]	; (800d7dc <etharp_input+0x110>)
 800d6e6:	f001 ffeb 	bl	800f6c0 <iprintf>
 800d6ea:	e06f      	b.n	800d7cc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	685b      	ldr	r3, [r3, #4]
 800d6f0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d6f2:	693b      	ldr	r3, [r7, #16]
 800d6f4:	881b      	ldrh	r3, [r3, #0]
 800d6f6:	b29b      	uxth	r3, r3
 800d6f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d6fc:	d10c      	bne.n	800d718 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d6fe:	693b      	ldr	r3, [r7, #16]
 800d700:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d702:	2b06      	cmp	r3, #6
 800d704:	d108      	bne.n	800d718 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d706:	693b      	ldr	r3, [r7, #16]
 800d708:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d70a:	2b04      	cmp	r3, #4
 800d70c:	d104      	bne.n	800d718 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d70e:	693b      	ldr	r3, [r7, #16]
 800d710:	885b      	ldrh	r3, [r3, #2]
 800d712:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d714:	2b08      	cmp	r3, #8
 800d716:	d003      	beq.n	800d720 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f7f8 fe2b 	bl	8006374 <pbuf_free>
    return;
 800d71e:	e055      	b.n	800d7cc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d720:	693b      	ldr	r3, [r7, #16]
 800d722:	330e      	adds	r3, #14
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d728:	693b      	ldr	r3, [r7, #16]
 800d72a:	3318      	adds	r3, #24
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	3304      	adds	r3, #4
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d102      	bne.n	800d740 <etharp_input+0x74>
    for_us = 0;
 800d73a:	2300      	movs	r3, #0
 800d73c:	75fb      	strb	r3, [r7, #23]
 800d73e:	e009      	b.n	800d754 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d740:	68ba      	ldr	r2, [r7, #8]
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	3304      	adds	r3, #4
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	429a      	cmp	r2, r3
 800d74a:	bf0c      	ite	eq
 800d74c:	2301      	moveq	r3, #1
 800d74e:	2300      	movne	r3, #0
 800d750:	b2db      	uxtb	r3, r3
 800d752:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	f103 0208 	add.w	r2, r3, #8
 800d75a:	7dfb      	ldrb	r3, [r7, #23]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d001      	beq.n	800d764 <etharp_input+0x98>
 800d760:	2301      	movs	r3, #1
 800d762:	e000      	b.n	800d766 <etharp_input+0x9a>
 800d764:	2302      	movs	r3, #2
 800d766:	f107 010c 	add.w	r1, r7, #12
 800d76a:	6838      	ldr	r0, [r7, #0]
 800d76c:	f7ff fed8 	bl	800d520 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	88db      	ldrh	r3, [r3, #6]
 800d774:	b29b      	uxth	r3, r3
 800d776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d77a:	d003      	beq.n	800d784 <etharp_input+0xb8>
 800d77c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d780:	d01e      	beq.n	800d7c0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800d782:	e020      	b.n	800d7c6 <etharp_input+0xfa>
      if (for_us) {
 800d784:	7dfb      	ldrb	r3, [r7, #23]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d01c      	beq.n	800d7c4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d7a0:	693a      	ldr	r2, [r7, #16]
 800d7a2:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d7a4:	2102      	movs	r1, #2
 800d7a6:	9103      	str	r1, [sp, #12]
 800d7a8:	f107 010c 	add.w	r1, r7, #12
 800d7ac:	9102      	str	r1, [sp, #8]
 800d7ae:	9201      	str	r2, [sp, #4]
 800d7b0:	9300      	str	r3, [sp, #0]
 800d7b2:	462b      	mov	r3, r5
 800d7b4:	4622      	mov	r2, r4
 800d7b6:	4601      	mov	r1, r0
 800d7b8:	6838      	ldr	r0, [r7, #0]
 800d7ba:	f000 faeb 	bl	800dd94 <etharp_raw>
      break;
 800d7be:	e001      	b.n	800d7c4 <etharp_input+0xf8>
      break;
 800d7c0:	bf00      	nop
 800d7c2:	e000      	b.n	800d7c6 <etharp_input+0xfa>
      break;
 800d7c4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f7f8 fdd4 	bl	8006374 <pbuf_free>
}
 800d7cc:	3718      	adds	r7, #24
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bdb0      	pop	{r4, r5, r7, pc}
 800d7d2:	bf00      	nop
 800d7d4:	08012e98 	.word	0x08012e98
 800d7d8:	08012fe8 	.word	0x08012fe8
 800d7dc:	08012f10 	.word	0x08012f10

0800d7e0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b086      	sub	sp, #24
 800d7e4:	af02      	add	r7, sp, #8
 800d7e6:	60f8      	str	r0, [r7, #12]
 800d7e8:	60b9      	str	r1, [r7, #8]
 800d7ea:	4613      	mov	r3, r2
 800d7ec:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d7ee:	79fa      	ldrb	r2, [r7, #7]
 800d7f0:	4944      	ldr	r1, [pc, #272]	; (800d904 <etharp_output_to_arp_index+0x124>)
 800d7f2:	4613      	mov	r3, r2
 800d7f4:	005b      	lsls	r3, r3, #1
 800d7f6:	4413      	add	r3, r2
 800d7f8:	00db      	lsls	r3, r3, #3
 800d7fa:	440b      	add	r3, r1
 800d7fc:	3314      	adds	r3, #20
 800d7fe:	781b      	ldrb	r3, [r3, #0]
 800d800:	2b01      	cmp	r3, #1
 800d802:	d806      	bhi.n	800d812 <etharp_output_to_arp_index+0x32>
 800d804:	4b40      	ldr	r3, [pc, #256]	; (800d908 <etharp_output_to_arp_index+0x128>)
 800d806:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d80a:	4940      	ldr	r1, [pc, #256]	; (800d90c <etharp_output_to_arp_index+0x12c>)
 800d80c:	4840      	ldr	r0, [pc, #256]	; (800d910 <etharp_output_to_arp_index+0x130>)
 800d80e:	f001 ff57 	bl	800f6c0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d812:	79fa      	ldrb	r2, [r7, #7]
 800d814:	493b      	ldr	r1, [pc, #236]	; (800d904 <etharp_output_to_arp_index+0x124>)
 800d816:	4613      	mov	r3, r2
 800d818:	005b      	lsls	r3, r3, #1
 800d81a:	4413      	add	r3, r2
 800d81c:	00db      	lsls	r3, r3, #3
 800d81e:	440b      	add	r3, r1
 800d820:	3314      	adds	r3, #20
 800d822:	781b      	ldrb	r3, [r3, #0]
 800d824:	2b02      	cmp	r3, #2
 800d826:	d153      	bne.n	800d8d0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d828:	79fa      	ldrb	r2, [r7, #7]
 800d82a:	4936      	ldr	r1, [pc, #216]	; (800d904 <etharp_output_to_arp_index+0x124>)
 800d82c:	4613      	mov	r3, r2
 800d82e:	005b      	lsls	r3, r3, #1
 800d830:	4413      	add	r3, r2
 800d832:	00db      	lsls	r3, r3, #3
 800d834:	440b      	add	r3, r1
 800d836:	3312      	adds	r3, #18
 800d838:	881b      	ldrh	r3, [r3, #0]
 800d83a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800d83e:	d919      	bls.n	800d874 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d840:	79fa      	ldrb	r2, [r7, #7]
 800d842:	4613      	mov	r3, r2
 800d844:	005b      	lsls	r3, r3, #1
 800d846:	4413      	add	r3, r2
 800d848:	00db      	lsls	r3, r3, #3
 800d84a:	4a2e      	ldr	r2, [pc, #184]	; (800d904 <etharp_output_to_arp_index+0x124>)
 800d84c:	4413      	add	r3, r2
 800d84e:	3304      	adds	r3, #4
 800d850:	4619      	mov	r1, r3
 800d852:	68f8      	ldr	r0, [r7, #12]
 800d854:	f000 fb4c 	bl	800def0 <etharp_request>
 800d858:	4603      	mov	r3, r0
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d138      	bne.n	800d8d0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d85e:	79fa      	ldrb	r2, [r7, #7]
 800d860:	4928      	ldr	r1, [pc, #160]	; (800d904 <etharp_output_to_arp_index+0x124>)
 800d862:	4613      	mov	r3, r2
 800d864:	005b      	lsls	r3, r3, #1
 800d866:	4413      	add	r3, r2
 800d868:	00db      	lsls	r3, r3, #3
 800d86a:	440b      	add	r3, r1
 800d86c:	3314      	adds	r3, #20
 800d86e:	2203      	movs	r2, #3
 800d870:	701a      	strb	r2, [r3, #0]
 800d872:	e02d      	b.n	800d8d0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d874:	79fa      	ldrb	r2, [r7, #7]
 800d876:	4923      	ldr	r1, [pc, #140]	; (800d904 <etharp_output_to_arp_index+0x124>)
 800d878:	4613      	mov	r3, r2
 800d87a:	005b      	lsls	r3, r3, #1
 800d87c:	4413      	add	r3, r2
 800d87e:	00db      	lsls	r3, r3, #3
 800d880:	440b      	add	r3, r1
 800d882:	3312      	adds	r3, #18
 800d884:	881b      	ldrh	r3, [r3, #0]
 800d886:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800d88a:	d321      	bcc.n	800d8d0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d88c:	79fa      	ldrb	r2, [r7, #7]
 800d88e:	4613      	mov	r3, r2
 800d890:	005b      	lsls	r3, r3, #1
 800d892:	4413      	add	r3, r2
 800d894:	00db      	lsls	r3, r3, #3
 800d896:	4a1b      	ldr	r2, [pc, #108]	; (800d904 <etharp_output_to_arp_index+0x124>)
 800d898:	4413      	add	r3, r2
 800d89a:	1d19      	adds	r1, r3, #4
 800d89c:	79fa      	ldrb	r2, [r7, #7]
 800d89e:	4613      	mov	r3, r2
 800d8a0:	005b      	lsls	r3, r3, #1
 800d8a2:	4413      	add	r3, r2
 800d8a4:	00db      	lsls	r3, r3, #3
 800d8a6:	3308      	adds	r3, #8
 800d8a8:	4a16      	ldr	r2, [pc, #88]	; (800d904 <etharp_output_to_arp_index+0x124>)
 800d8aa:	4413      	add	r3, r2
 800d8ac:	3304      	adds	r3, #4
 800d8ae:	461a      	mov	r2, r3
 800d8b0:	68f8      	ldr	r0, [r7, #12]
 800d8b2:	f000 fafb 	bl	800deac <etharp_request_dst>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d109      	bne.n	800d8d0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d8bc:	79fa      	ldrb	r2, [r7, #7]
 800d8be:	4911      	ldr	r1, [pc, #68]	; (800d904 <etharp_output_to_arp_index+0x124>)
 800d8c0:	4613      	mov	r3, r2
 800d8c2:	005b      	lsls	r3, r3, #1
 800d8c4:	4413      	add	r3, r2
 800d8c6:	00db      	lsls	r3, r3, #3
 800d8c8:	440b      	add	r3, r1
 800d8ca:	3314      	adds	r3, #20
 800d8cc:	2203      	movs	r2, #3
 800d8ce:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800d8d6:	79fa      	ldrb	r2, [r7, #7]
 800d8d8:	4613      	mov	r3, r2
 800d8da:	005b      	lsls	r3, r3, #1
 800d8dc:	4413      	add	r3, r2
 800d8de:	00db      	lsls	r3, r3, #3
 800d8e0:	3308      	adds	r3, #8
 800d8e2:	4a08      	ldr	r2, [pc, #32]	; (800d904 <etharp_output_to_arp_index+0x124>)
 800d8e4:	4413      	add	r3, r2
 800d8e6:	3304      	adds	r3, #4
 800d8e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d8ec:	9200      	str	r2, [sp, #0]
 800d8ee:	460a      	mov	r2, r1
 800d8f0:	68b9      	ldr	r1, [r7, #8]
 800d8f2:	68f8      	ldr	r0, [r7, #12]
 800d8f4:	f001 fe3a 	bl	800f56c <ethernet_output>
 800d8f8:	4603      	mov	r3, r0
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3710      	adds	r7, #16
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop
 800d904:	20000114 	.word	0x20000114
 800d908:	08012e98 	.word	0x08012e98
 800d90c:	08013008 	.word	0x08013008
 800d910:	08012f10 	.word	0x08012f10

0800d914 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b08a      	sub	sp, #40	; 0x28
 800d918:	af02      	add	r7, sp, #8
 800d91a:	60f8      	str	r0, [r7, #12]
 800d91c:	60b9      	str	r1, [r7, #8]
 800d91e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d106      	bne.n	800d938 <etharp_output+0x24>
 800d92a:	4b73      	ldr	r3, [pc, #460]	; (800daf8 <etharp_output+0x1e4>)
 800d92c:	f240 321e 	movw	r2, #798	; 0x31e
 800d930:	4972      	ldr	r1, [pc, #456]	; (800dafc <etharp_output+0x1e8>)
 800d932:	4873      	ldr	r0, [pc, #460]	; (800db00 <etharp_output+0x1ec>)
 800d934:	f001 fec4 	bl	800f6c0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d106      	bne.n	800d94c <etharp_output+0x38>
 800d93e:	4b6e      	ldr	r3, [pc, #440]	; (800daf8 <etharp_output+0x1e4>)
 800d940:	f240 321f 	movw	r2, #799	; 0x31f
 800d944:	496f      	ldr	r1, [pc, #444]	; (800db04 <etharp_output+0x1f0>)
 800d946:	486e      	ldr	r0, [pc, #440]	; (800db00 <etharp_output+0x1ec>)
 800d948:	f001 feba 	bl	800f6c0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d106      	bne.n	800d960 <etharp_output+0x4c>
 800d952:	4b69      	ldr	r3, [pc, #420]	; (800daf8 <etharp_output+0x1e4>)
 800d954:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d958:	496b      	ldr	r1, [pc, #428]	; (800db08 <etharp_output+0x1f4>)
 800d95a:	4869      	ldr	r0, [pc, #420]	; (800db00 <etharp_output+0x1ec>)
 800d95c:	f001 feb0 	bl	800f6c0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	68f9      	ldr	r1, [r7, #12]
 800d966:	4618      	mov	r0, r3
 800d968:	f000 fef8 	bl	800e75c <ip4_addr_isbroadcast_u32>
 800d96c:	4603      	mov	r3, r0
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d002      	beq.n	800d978 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d972:	4b66      	ldr	r3, [pc, #408]	; (800db0c <etharp_output+0x1f8>)
 800d974:	61fb      	str	r3, [r7, #28]
 800d976:	e0af      	b.n	800dad8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d980:	2be0      	cmp	r3, #224	; 0xe0
 800d982:	d118      	bne.n	800d9b6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d984:	2301      	movs	r3, #1
 800d986:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d988:	2300      	movs	r3, #0
 800d98a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d98c:	235e      	movs	r3, #94	; 0x5e
 800d98e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	3301      	adds	r3, #1
 800d994:	781b      	ldrb	r3, [r3, #0]
 800d996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d99a:	b2db      	uxtb	r3, r3
 800d99c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	3302      	adds	r3, #2
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	3303      	adds	r3, #3
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d9ae:	f107 0310 	add.w	r3, r7, #16
 800d9b2:	61fb      	str	r3, [r7, #28]
 800d9b4:	e090      	b.n	800dad8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681a      	ldr	r2, [r3, #0]
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	3304      	adds	r3, #4
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	405a      	eors	r2, r3
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	3308      	adds	r3, #8
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	4013      	ands	r3, r2
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d012      	beq.n	800d9f4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d9d4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800d9d8:	4293      	cmp	r3, r2
 800d9da:	d00b      	beq.n	800d9f4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	330c      	adds	r3, #12
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d003      	beq.n	800d9ee <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	330c      	adds	r3, #12
 800d9ea:	61bb      	str	r3, [r7, #24]
 800d9ec:	e002      	b.n	800d9f4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d9ee:	f06f 0303 	mvn.w	r3, #3
 800d9f2:	e07d      	b.n	800daf0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d9f4:	4b46      	ldr	r3, [pc, #280]	; (800db10 <etharp_output+0x1fc>)
 800d9f6:	781b      	ldrb	r3, [r3, #0]
 800d9f8:	4619      	mov	r1, r3
 800d9fa:	4a46      	ldr	r2, [pc, #280]	; (800db14 <etharp_output+0x200>)
 800d9fc:	460b      	mov	r3, r1
 800d9fe:	005b      	lsls	r3, r3, #1
 800da00:	440b      	add	r3, r1
 800da02:	00db      	lsls	r3, r3, #3
 800da04:	4413      	add	r3, r2
 800da06:	3314      	adds	r3, #20
 800da08:	781b      	ldrb	r3, [r3, #0]
 800da0a:	2b01      	cmp	r3, #1
 800da0c:	d925      	bls.n	800da5a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800da0e:	4b40      	ldr	r3, [pc, #256]	; (800db10 <etharp_output+0x1fc>)
 800da10:	781b      	ldrb	r3, [r3, #0]
 800da12:	4619      	mov	r1, r3
 800da14:	4a3f      	ldr	r2, [pc, #252]	; (800db14 <etharp_output+0x200>)
 800da16:	460b      	mov	r3, r1
 800da18:	005b      	lsls	r3, r3, #1
 800da1a:	440b      	add	r3, r1
 800da1c:	00db      	lsls	r3, r3, #3
 800da1e:	4413      	add	r3, r2
 800da20:	3308      	adds	r3, #8
 800da22:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800da24:	68fa      	ldr	r2, [r7, #12]
 800da26:	429a      	cmp	r2, r3
 800da28:	d117      	bne.n	800da5a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800da2a:	69bb      	ldr	r3, [r7, #24]
 800da2c:	681a      	ldr	r2, [r3, #0]
 800da2e:	4b38      	ldr	r3, [pc, #224]	; (800db10 <etharp_output+0x1fc>)
 800da30:	781b      	ldrb	r3, [r3, #0]
 800da32:	4618      	mov	r0, r3
 800da34:	4937      	ldr	r1, [pc, #220]	; (800db14 <etharp_output+0x200>)
 800da36:	4603      	mov	r3, r0
 800da38:	005b      	lsls	r3, r3, #1
 800da3a:	4403      	add	r3, r0
 800da3c:	00db      	lsls	r3, r3, #3
 800da3e:	440b      	add	r3, r1
 800da40:	3304      	adds	r3, #4
 800da42:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800da44:	429a      	cmp	r2, r3
 800da46:	d108      	bne.n	800da5a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800da48:	4b31      	ldr	r3, [pc, #196]	; (800db10 <etharp_output+0x1fc>)
 800da4a:	781b      	ldrb	r3, [r3, #0]
 800da4c:	461a      	mov	r2, r3
 800da4e:	68b9      	ldr	r1, [r7, #8]
 800da50:	68f8      	ldr	r0, [r7, #12]
 800da52:	f7ff fec5 	bl	800d7e0 <etharp_output_to_arp_index>
 800da56:	4603      	mov	r3, r0
 800da58:	e04a      	b.n	800daf0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800da5a:	2300      	movs	r3, #0
 800da5c:	75fb      	strb	r3, [r7, #23]
 800da5e:	e031      	b.n	800dac4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800da60:	7dfa      	ldrb	r2, [r7, #23]
 800da62:	492c      	ldr	r1, [pc, #176]	; (800db14 <etharp_output+0x200>)
 800da64:	4613      	mov	r3, r2
 800da66:	005b      	lsls	r3, r3, #1
 800da68:	4413      	add	r3, r2
 800da6a:	00db      	lsls	r3, r3, #3
 800da6c:	440b      	add	r3, r1
 800da6e:	3314      	adds	r3, #20
 800da70:	781b      	ldrb	r3, [r3, #0]
 800da72:	2b01      	cmp	r3, #1
 800da74:	d923      	bls.n	800dabe <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800da76:	7dfa      	ldrb	r2, [r7, #23]
 800da78:	4926      	ldr	r1, [pc, #152]	; (800db14 <etharp_output+0x200>)
 800da7a:	4613      	mov	r3, r2
 800da7c:	005b      	lsls	r3, r3, #1
 800da7e:	4413      	add	r3, r2
 800da80:	00db      	lsls	r3, r3, #3
 800da82:	440b      	add	r3, r1
 800da84:	3308      	adds	r3, #8
 800da86:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800da88:	68fa      	ldr	r2, [r7, #12]
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d117      	bne.n	800dabe <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800da8e:	69bb      	ldr	r3, [r7, #24]
 800da90:	6819      	ldr	r1, [r3, #0]
 800da92:	7dfa      	ldrb	r2, [r7, #23]
 800da94:	481f      	ldr	r0, [pc, #124]	; (800db14 <etharp_output+0x200>)
 800da96:	4613      	mov	r3, r2
 800da98:	005b      	lsls	r3, r3, #1
 800da9a:	4413      	add	r3, r2
 800da9c:	00db      	lsls	r3, r3, #3
 800da9e:	4403      	add	r3, r0
 800daa0:	3304      	adds	r3, #4
 800daa2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800daa4:	4299      	cmp	r1, r3
 800daa6:	d10a      	bne.n	800dabe <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800daa8:	4a19      	ldr	r2, [pc, #100]	; (800db10 <etharp_output+0x1fc>)
 800daaa:	7dfb      	ldrb	r3, [r7, #23]
 800daac:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800daae:	7dfb      	ldrb	r3, [r7, #23]
 800dab0:	461a      	mov	r2, r3
 800dab2:	68b9      	ldr	r1, [r7, #8]
 800dab4:	68f8      	ldr	r0, [r7, #12]
 800dab6:	f7ff fe93 	bl	800d7e0 <etharp_output_to_arp_index>
 800daba:	4603      	mov	r3, r0
 800dabc:	e018      	b.n	800daf0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800dabe:	7dfb      	ldrb	r3, [r7, #23]
 800dac0:	3301      	adds	r3, #1
 800dac2:	75fb      	strb	r3, [r7, #23]
 800dac4:	7dfb      	ldrb	r3, [r7, #23]
 800dac6:	2b09      	cmp	r3, #9
 800dac8:	d9ca      	bls.n	800da60 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800daca:	68ba      	ldr	r2, [r7, #8]
 800dacc:	69b9      	ldr	r1, [r7, #24]
 800dace:	68f8      	ldr	r0, [r7, #12]
 800dad0:	f000 f822 	bl	800db18 <etharp_query>
 800dad4:	4603      	mov	r3, r0
 800dad6:	e00b      	b.n	800daf0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800dade:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dae2:	9300      	str	r3, [sp, #0]
 800dae4:	69fb      	ldr	r3, [r7, #28]
 800dae6:	68b9      	ldr	r1, [r7, #8]
 800dae8:	68f8      	ldr	r0, [r7, #12]
 800daea:	f001 fd3f 	bl	800f56c <ethernet_output>
 800daee:	4603      	mov	r3, r0
}
 800daf0:	4618      	mov	r0, r3
 800daf2:	3720      	adds	r7, #32
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}
 800daf8:	08012e98 	.word	0x08012e98
 800dafc:	08012fe8 	.word	0x08012fe8
 800db00:	08012f10 	.word	0x08012f10
 800db04:	08013038 	.word	0x08013038
 800db08:	08012fd8 	.word	0x08012fd8
 800db0c:	08013640 	.word	0x08013640
 800db10:	20000204 	.word	0x20000204
 800db14:	20000114 	.word	0x20000114

0800db18 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b08c      	sub	sp, #48	; 0x30
 800db1c:	af02      	add	r7, sp, #8
 800db1e:	60f8      	str	r0, [r7, #12]
 800db20:	60b9      	str	r1, [r7, #8]
 800db22:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	3326      	adds	r3, #38	; 0x26
 800db28:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800db2a:	23ff      	movs	r3, #255	; 0xff
 800db2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800db30:	2300      	movs	r3, #0
 800db32:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	68f9      	ldr	r1, [r7, #12]
 800db3a:	4618      	mov	r0, r3
 800db3c:	f000 fe0e 	bl	800e75c <ip4_addr_isbroadcast_u32>
 800db40:	4603      	mov	r3, r0
 800db42:	2b00      	cmp	r3, #0
 800db44:	d10c      	bne.n	800db60 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800db46:	68bb      	ldr	r3, [r7, #8]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800db4e:	2be0      	cmp	r3, #224	; 0xe0
 800db50:	d006      	beq.n	800db60 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d003      	beq.n	800db60 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d102      	bne.n	800db66 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800db60:	f06f 030f 	mvn.w	r3, #15
 800db64:	e101      	b.n	800dd6a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800db66:	68fa      	ldr	r2, [r7, #12]
 800db68:	2101      	movs	r1, #1
 800db6a:	68b8      	ldr	r0, [r7, #8]
 800db6c:	f7ff fb60 	bl	800d230 <etharp_find_entry>
 800db70:	4603      	mov	r3, r0
 800db72:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800db74:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	da02      	bge.n	800db82 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800db7c:	8a7b      	ldrh	r3, [r7, #18]
 800db7e:	b25b      	sxtb	r3, r3
 800db80:	e0f3      	b.n	800dd6a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800db82:	8a7b      	ldrh	r3, [r7, #18]
 800db84:	2b7e      	cmp	r3, #126	; 0x7e
 800db86:	d906      	bls.n	800db96 <etharp_query+0x7e>
 800db88:	4b7a      	ldr	r3, [pc, #488]	; (800dd74 <etharp_query+0x25c>)
 800db8a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800db8e:	497a      	ldr	r1, [pc, #488]	; (800dd78 <etharp_query+0x260>)
 800db90:	487a      	ldr	r0, [pc, #488]	; (800dd7c <etharp_query+0x264>)
 800db92:	f001 fd95 	bl	800f6c0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800db96:	8a7b      	ldrh	r3, [r7, #18]
 800db98:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800db9a:	7c7a      	ldrb	r2, [r7, #17]
 800db9c:	4978      	ldr	r1, [pc, #480]	; (800dd80 <etharp_query+0x268>)
 800db9e:	4613      	mov	r3, r2
 800dba0:	005b      	lsls	r3, r3, #1
 800dba2:	4413      	add	r3, r2
 800dba4:	00db      	lsls	r3, r3, #3
 800dba6:	440b      	add	r3, r1
 800dba8:	3314      	adds	r3, #20
 800dbaa:	781b      	ldrb	r3, [r3, #0]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d115      	bne.n	800dbdc <etharp_query+0xc4>
    is_new_entry = 1;
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800dbb4:	7c7a      	ldrb	r2, [r7, #17]
 800dbb6:	4972      	ldr	r1, [pc, #456]	; (800dd80 <etharp_query+0x268>)
 800dbb8:	4613      	mov	r3, r2
 800dbba:	005b      	lsls	r3, r3, #1
 800dbbc:	4413      	add	r3, r2
 800dbbe:	00db      	lsls	r3, r3, #3
 800dbc0:	440b      	add	r3, r1
 800dbc2:	3314      	adds	r3, #20
 800dbc4:	2201      	movs	r2, #1
 800dbc6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800dbc8:	7c7a      	ldrb	r2, [r7, #17]
 800dbca:	496d      	ldr	r1, [pc, #436]	; (800dd80 <etharp_query+0x268>)
 800dbcc:	4613      	mov	r3, r2
 800dbce:	005b      	lsls	r3, r3, #1
 800dbd0:	4413      	add	r3, r2
 800dbd2:	00db      	lsls	r3, r3, #3
 800dbd4:	440b      	add	r3, r1
 800dbd6:	3308      	adds	r3, #8
 800dbd8:	68fa      	ldr	r2, [r7, #12]
 800dbda:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800dbdc:	7c7a      	ldrb	r2, [r7, #17]
 800dbde:	4968      	ldr	r1, [pc, #416]	; (800dd80 <etharp_query+0x268>)
 800dbe0:	4613      	mov	r3, r2
 800dbe2:	005b      	lsls	r3, r3, #1
 800dbe4:	4413      	add	r3, r2
 800dbe6:	00db      	lsls	r3, r3, #3
 800dbe8:	440b      	add	r3, r1
 800dbea:	3314      	adds	r3, #20
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	2b01      	cmp	r3, #1
 800dbf0:	d011      	beq.n	800dc16 <etharp_query+0xfe>
 800dbf2:	7c7a      	ldrb	r2, [r7, #17]
 800dbf4:	4962      	ldr	r1, [pc, #392]	; (800dd80 <etharp_query+0x268>)
 800dbf6:	4613      	mov	r3, r2
 800dbf8:	005b      	lsls	r3, r3, #1
 800dbfa:	4413      	add	r3, r2
 800dbfc:	00db      	lsls	r3, r3, #3
 800dbfe:	440b      	add	r3, r1
 800dc00:	3314      	adds	r3, #20
 800dc02:	781b      	ldrb	r3, [r3, #0]
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	d806      	bhi.n	800dc16 <etharp_query+0xfe>
 800dc08:	4b5a      	ldr	r3, [pc, #360]	; (800dd74 <etharp_query+0x25c>)
 800dc0a:	f240 32cd 	movw	r2, #973	; 0x3cd
 800dc0e:	495d      	ldr	r1, [pc, #372]	; (800dd84 <etharp_query+0x26c>)
 800dc10:	485a      	ldr	r0, [pc, #360]	; (800dd7c <etharp_query+0x264>)
 800dc12:	f001 fd55 	bl	800f6c0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800dc16:	6a3b      	ldr	r3, [r7, #32]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d102      	bne.n	800dc22 <etharp_query+0x10a>
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d10c      	bne.n	800dc3c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800dc22:	68b9      	ldr	r1, [r7, #8]
 800dc24:	68f8      	ldr	r0, [r7, #12]
 800dc26:	f000 f963 	bl	800def0 <etharp_request>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d102      	bne.n	800dc3c <etharp_query+0x124>
      return result;
 800dc36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dc3a:	e096      	b.n	800dd6a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d106      	bne.n	800dc50 <etharp_query+0x138>
 800dc42:	4b4c      	ldr	r3, [pc, #304]	; (800dd74 <etharp_query+0x25c>)
 800dc44:	f240 32e1 	movw	r2, #993	; 0x3e1
 800dc48:	494f      	ldr	r1, [pc, #316]	; (800dd88 <etharp_query+0x270>)
 800dc4a:	484c      	ldr	r0, [pc, #304]	; (800dd7c <etharp_query+0x264>)
 800dc4c:	f001 fd38 	bl	800f6c0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800dc50:	7c7a      	ldrb	r2, [r7, #17]
 800dc52:	494b      	ldr	r1, [pc, #300]	; (800dd80 <etharp_query+0x268>)
 800dc54:	4613      	mov	r3, r2
 800dc56:	005b      	lsls	r3, r3, #1
 800dc58:	4413      	add	r3, r2
 800dc5a:	00db      	lsls	r3, r3, #3
 800dc5c:	440b      	add	r3, r1
 800dc5e:	3314      	adds	r3, #20
 800dc60:	781b      	ldrb	r3, [r3, #0]
 800dc62:	2b01      	cmp	r3, #1
 800dc64:	d917      	bls.n	800dc96 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800dc66:	4a49      	ldr	r2, [pc, #292]	; (800dd8c <etharp_query+0x274>)
 800dc68:	7c7b      	ldrb	r3, [r7, #17]
 800dc6a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800dc6c:	7c7a      	ldrb	r2, [r7, #17]
 800dc6e:	4613      	mov	r3, r2
 800dc70:	005b      	lsls	r3, r3, #1
 800dc72:	4413      	add	r3, r2
 800dc74:	00db      	lsls	r3, r3, #3
 800dc76:	3308      	adds	r3, #8
 800dc78:	4a41      	ldr	r2, [pc, #260]	; (800dd80 <etharp_query+0x268>)
 800dc7a:	4413      	add	r3, r2
 800dc7c:	3304      	adds	r3, #4
 800dc7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dc82:	9200      	str	r2, [sp, #0]
 800dc84:	697a      	ldr	r2, [r7, #20]
 800dc86:	6879      	ldr	r1, [r7, #4]
 800dc88:	68f8      	ldr	r0, [r7, #12]
 800dc8a:	f001 fc6f 	bl	800f56c <ethernet_output>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dc94:	e067      	b.n	800dd66 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800dc96:	7c7a      	ldrb	r2, [r7, #17]
 800dc98:	4939      	ldr	r1, [pc, #228]	; (800dd80 <etharp_query+0x268>)
 800dc9a:	4613      	mov	r3, r2
 800dc9c:	005b      	lsls	r3, r3, #1
 800dc9e:	4413      	add	r3, r2
 800dca0:	00db      	lsls	r3, r3, #3
 800dca2:	440b      	add	r3, r1
 800dca4:	3314      	adds	r3, #20
 800dca6:	781b      	ldrb	r3, [r3, #0]
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	d15c      	bne.n	800dd66 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800dcac:	2300      	movs	r3, #0
 800dcae:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800dcb4:	e01c      	b.n	800dcf0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800dcb6:	69fb      	ldr	r3, [r7, #28]
 800dcb8:	895a      	ldrh	r2, [r3, #10]
 800dcba:	69fb      	ldr	r3, [r7, #28]
 800dcbc:	891b      	ldrh	r3, [r3, #8]
 800dcbe:	429a      	cmp	r2, r3
 800dcc0:	d10a      	bne.n	800dcd8 <etharp_query+0x1c0>
 800dcc2:	69fb      	ldr	r3, [r7, #28]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d006      	beq.n	800dcd8 <etharp_query+0x1c0>
 800dcca:	4b2a      	ldr	r3, [pc, #168]	; (800dd74 <etharp_query+0x25c>)
 800dccc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800dcd0:	492f      	ldr	r1, [pc, #188]	; (800dd90 <etharp_query+0x278>)
 800dcd2:	482a      	ldr	r0, [pc, #168]	; (800dd7c <etharp_query+0x264>)
 800dcd4:	f001 fcf4 	bl	800f6c0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800dcd8:	69fb      	ldr	r3, [r7, #28]
 800dcda:	7b1b      	ldrb	r3, [r3, #12]
 800dcdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d002      	beq.n	800dcea <etharp_query+0x1d2>
        copy_needed = 1;
 800dce4:	2301      	movs	r3, #1
 800dce6:	61bb      	str	r3, [r7, #24]
        break;
 800dce8:	e005      	b.n	800dcf6 <etharp_query+0x1de>
      }
      p = p->next;
 800dcea:	69fb      	ldr	r3, [r7, #28]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	61fb      	str	r3, [r7, #28]
    while (p) {
 800dcf0:	69fb      	ldr	r3, [r7, #28]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d1df      	bne.n	800dcb6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800dcf6:	69bb      	ldr	r3, [r7, #24]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d007      	beq.n	800dd0c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800dcfc:	687a      	ldr	r2, [r7, #4]
 800dcfe:	f44f 7120 	mov.w	r1, #640	; 0x280
 800dd02:	200e      	movs	r0, #14
 800dd04:	f7f8 fe34 	bl	8006970 <pbuf_clone>
 800dd08:	61f8      	str	r0, [r7, #28]
 800dd0a:	e004      	b.n	800dd16 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800dd10:	69f8      	ldr	r0, [r7, #28]
 800dd12:	f7f8 fbcf 	bl	80064b4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800dd16:	69fb      	ldr	r3, [r7, #28]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d021      	beq.n	800dd60 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800dd1c:	7c7a      	ldrb	r2, [r7, #17]
 800dd1e:	4918      	ldr	r1, [pc, #96]	; (800dd80 <etharp_query+0x268>)
 800dd20:	4613      	mov	r3, r2
 800dd22:	005b      	lsls	r3, r3, #1
 800dd24:	4413      	add	r3, r2
 800dd26:	00db      	lsls	r3, r3, #3
 800dd28:	440b      	add	r3, r1
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d00a      	beq.n	800dd46 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800dd30:	7c7a      	ldrb	r2, [r7, #17]
 800dd32:	4913      	ldr	r1, [pc, #76]	; (800dd80 <etharp_query+0x268>)
 800dd34:	4613      	mov	r3, r2
 800dd36:	005b      	lsls	r3, r3, #1
 800dd38:	4413      	add	r3, r2
 800dd3a:	00db      	lsls	r3, r3, #3
 800dd3c:	440b      	add	r3, r1
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	4618      	mov	r0, r3
 800dd42:	f7f8 fb17 	bl	8006374 <pbuf_free>
      }
      arp_table[i].q = p;
 800dd46:	7c7a      	ldrb	r2, [r7, #17]
 800dd48:	490d      	ldr	r1, [pc, #52]	; (800dd80 <etharp_query+0x268>)
 800dd4a:	4613      	mov	r3, r2
 800dd4c:	005b      	lsls	r3, r3, #1
 800dd4e:	4413      	add	r3, r2
 800dd50:	00db      	lsls	r3, r3, #3
 800dd52:	440b      	add	r3, r1
 800dd54:	69fa      	ldr	r2, [r7, #28]
 800dd56:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800dd58:	2300      	movs	r3, #0
 800dd5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dd5e:	e002      	b.n	800dd66 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800dd60:	23ff      	movs	r3, #255	; 0xff
 800dd62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800dd66:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3728      	adds	r7, #40	; 0x28
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}
 800dd72:	bf00      	nop
 800dd74:	08012e98 	.word	0x08012e98
 800dd78:	08013044 	.word	0x08013044
 800dd7c:	08012f10 	.word	0x08012f10
 800dd80:	20000114 	.word	0x20000114
 800dd84:	08013054 	.word	0x08013054
 800dd88:	08013038 	.word	0x08013038
 800dd8c:	20000204 	.word	0x20000204
 800dd90:	0801307c 	.word	0x0801307c

0800dd94 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b08a      	sub	sp, #40	; 0x28
 800dd98:	af02      	add	r7, sp, #8
 800dd9a:	60f8      	str	r0, [r7, #12]
 800dd9c:	60b9      	str	r1, [r7, #8]
 800dd9e:	607a      	str	r2, [r7, #4]
 800dda0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800dda2:	2300      	movs	r3, #0
 800dda4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d106      	bne.n	800ddba <etharp_raw+0x26>
 800ddac:	4b3a      	ldr	r3, [pc, #232]	; (800de98 <etharp_raw+0x104>)
 800ddae:	f240 4257 	movw	r2, #1111	; 0x457
 800ddb2:	493a      	ldr	r1, [pc, #232]	; (800de9c <etharp_raw+0x108>)
 800ddb4:	483a      	ldr	r0, [pc, #232]	; (800dea0 <etharp_raw+0x10c>)
 800ddb6:	f001 fc83 	bl	800f6c0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800ddba:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ddbe:	211c      	movs	r1, #28
 800ddc0:	200e      	movs	r0, #14
 800ddc2:	f7f7 fff3 	bl	8005dac <pbuf_alloc>
 800ddc6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800ddc8:	69bb      	ldr	r3, [r7, #24]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d102      	bne.n	800ddd4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800ddce:	f04f 33ff 	mov.w	r3, #4294967295
 800ddd2:	e05d      	b.n	800de90 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800ddd4:	69bb      	ldr	r3, [r7, #24]
 800ddd6:	895b      	ldrh	r3, [r3, #10]
 800ddd8:	2b1b      	cmp	r3, #27
 800ddda:	d806      	bhi.n	800ddea <etharp_raw+0x56>
 800dddc:	4b2e      	ldr	r3, [pc, #184]	; (800de98 <etharp_raw+0x104>)
 800ddde:	f240 4262 	movw	r2, #1122	; 0x462
 800dde2:	4930      	ldr	r1, [pc, #192]	; (800dea4 <etharp_raw+0x110>)
 800dde4:	482e      	ldr	r0, [pc, #184]	; (800dea0 <etharp_raw+0x10c>)
 800dde6:	f001 fc6b 	bl	800f6c0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800ddea:	69bb      	ldr	r3, [r7, #24]
 800ddec:	685b      	ldr	r3, [r3, #4]
 800ddee:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800ddf0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f7f7 f80a 	bl	8004e0c <lwip_htons>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	461a      	mov	r2, r3
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800de06:	2b06      	cmp	r3, #6
 800de08:	d006      	beq.n	800de18 <etharp_raw+0x84>
 800de0a:	4b23      	ldr	r3, [pc, #140]	; (800de98 <etharp_raw+0x104>)
 800de0c:	f240 4269 	movw	r2, #1129	; 0x469
 800de10:	4925      	ldr	r1, [pc, #148]	; (800dea8 <etharp_raw+0x114>)
 800de12:	4823      	ldr	r0, [pc, #140]	; (800dea0 <etharp_raw+0x10c>)
 800de14:	f001 fc54 	bl	800f6c0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800de18:	697b      	ldr	r3, [r7, #20]
 800de1a:	3308      	adds	r3, #8
 800de1c:	2206      	movs	r2, #6
 800de1e:	6839      	ldr	r1, [r7, #0]
 800de20:	4618      	mov	r0, r3
 800de22:	f001 fc1d 	bl	800f660 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	3312      	adds	r3, #18
 800de2a:	2206      	movs	r2, #6
 800de2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800de2e:	4618      	mov	r0, r3
 800de30:	f001 fc16 	bl	800f660 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800de34:	697b      	ldr	r3, [r7, #20]
 800de36:	330e      	adds	r3, #14
 800de38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de3a:	6812      	ldr	r2, [r2, #0]
 800de3c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800de3e:	697b      	ldr	r3, [r7, #20]
 800de40:	3318      	adds	r3, #24
 800de42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de44:	6812      	ldr	r2, [r2, #0]
 800de46:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800de48:	697b      	ldr	r3, [r7, #20]
 800de4a:	2200      	movs	r2, #0
 800de4c:	701a      	strb	r2, [r3, #0]
 800de4e:	2200      	movs	r2, #0
 800de50:	f042 0201 	orr.w	r2, r2, #1
 800de54:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	2200      	movs	r2, #0
 800de5a:	f042 0208 	orr.w	r2, r2, #8
 800de5e:	709a      	strb	r2, [r3, #2]
 800de60:	2200      	movs	r2, #0
 800de62:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800de64:	697b      	ldr	r3, [r7, #20]
 800de66:	2206      	movs	r2, #6
 800de68:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800de6a:	697b      	ldr	r3, [r7, #20]
 800de6c:	2204      	movs	r2, #4
 800de6e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800de70:	f640 0306 	movw	r3, #2054	; 0x806
 800de74:	9300      	str	r3, [sp, #0]
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	68ba      	ldr	r2, [r7, #8]
 800de7a:	69b9      	ldr	r1, [r7, #24]
 800de7c:	68f8      	ldr	r0, [r7, #12]
 800de7e:	f001 fb75 	bl	800f56c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800de82:	69b8      	ldr	r0, [r7, #24]
 800de84:	f7f8 fa76 	bl	8006374 <pbuf_free>
  p = NULL;
 800de88:	2300      	movs	r3, #0
 800de8a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800de8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800de90:	4618      	mov	r0, r3
 800de92:	3720      	adds	r7, #32
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}
 800de98:	08012e98 	.word	0x08012e98
 800de9c:	08012fe8 	.word	0x08012fe8
 800dea0:	08012f10 	.word	0x08012f10
 800dea4:	08013098 	.word	0x08013098
 800dea8:	080130cc 	.word	0x080130cc

0800deac <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b088      	sub	sp, #32
 800deb0:	af04      	add	r7, sp, #16
 800deb2:	60f8      	str	r0, [r7, #12]
 800deb4:	60b9      	str	r1, [r7, #8]
 800deb6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dec8:	2201      	movs	r2, #1
 800deca:	9203      	str	r2, [sp, #12]
 800decc:	68ba      	ldr	r2, [r7, #8]
 800dece:	9202      	str	r2, [sp, #8]
 800ded0:	4a06      	ldr	r2, [pc, #24]	; (800deec <etharp_request_dst+0x40>)
 800ded2:	9201      	str	r2, [sp, #4]
 800ded4:	9300      	str	r3, [sp, #0]
 800ded6:	4603      	mov	r3, r0
 800ded8:	687a      	ldr	r2, [r7, #4]
 800deda:	68f8      	ldr	r0, [r7, #12]
 800dedc:	f7ff ff5a 	bl	800dd94 <etharp_raw>
 800dee0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	3710      	adds	r7, #16
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}
 800deea:	bf00      	nop
 800deec:	08013648 	.word	0x08013648

0800def0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b082      	sub	sp, #8
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
 800def8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800defa:	4a05      	ldr	r2, [pc, #20]	; (800df10 <etharp_request+0x20>)
 800defc:	6839      	ldr	r1, [r7, #0]
 800defe:	6878      	ldr	r0, [r7, #4]
 800df00:	f7ff ffd4 	bl	800deac <etharp_request_dst>
 800df04:	4603      	mov	r3, r0
}
 800df06:	4618      	mov	r0, r3
 800df08:	3708      	adds	r7, #8
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}
 800df0e:	bf00      	nop
 800df10:	08013640 	.word	0x08013640

0800df14 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b08e      	sub	sp, #56	; 0x38
 800df18:	af04      	add	r7, sp, #16
 800df1a:	6078      	str	r0, [r7, #4]
 800df1c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800df1e:	4b79      	ldr	r3, [pc, #484]	; (800e104 <icmp_input+0x1f0>)
 800df20:	689b      	ldr	r3, [r3, #8]
 800df22:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800df24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	f003 030f 	and.w	r3, r3, #15
 800df2c:	b2db      	uxtb	r3, r3
 800df2e:	009b      	lsls	r3, r3, #2
 800df30:	b2db      	uxtb	r3, r3
 800df32:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800df34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df36:	2b13      	cmp	r3, #19
 800df38:	f240 80cd 	bls.w	800e0d6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	895b      	ldrh	r3, [r3, #10]
 800df40:	2b03      	cmp	r3, #3
 800df42:	f240 80ca 	bls.w	800e0da <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	685b      	ldr	r3, [r3, #4]
 800df4a:	781b      	ldrb	r3, [r3, #0]
 800df4c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800df50:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800df54:	2b00      	cmp	r3, #0
 800df56:	f000 80b7 	beq.w	800e0c8 <icmp_input+0x1b4>
 800df5a:	2b08      	cmp	r3, #8
 800df5c:	f040 80b7 	bne.w	800e0ce <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800df60:	4b69      	ldr	r3, [pc, #420]	; (800e108 <icmp_input+0x1f4>)
 800df62:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800df64:	4b67      	ldr	r3, [pc, #412]	; (800e104 <icmp_input+0x1f0>)
 800df66:	695b      	ldr	r3, [r3, #20]
 800df68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df6c:	2be0      	cmp	r3, #224	; 0xe0
 800df6e:	f000 80bb 	beq.w	800e0e8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800df72:	4b64      	ldr	r3, [pc, #400]	; (800e104 <icmp_input+0x1f0>)
 800df74:	695b      	ldr	r3, [r3, #20]
 800df76:	4a63      	ldr	r2, [pc, #396]	; (800e104 <icmp_input+0x1f0>)
 800df78:	6812      	ldr	r2, [r2, #0]
 800df7a:	4611      	mov	r1, r2
 800df7c:	4618      	mov	r0, r3
 800df7e:	f000 fbed 	bl	800e75c <ip4_addr_isbroadcast_u32>
 800df82:	4603      	mov	r3, r0
 800df84:	2b00      	cmp	r3, #0
 800df86:	f040 80b1 	bne.w	800e0ec <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	891b      	ldrh	r3, [r3, #8]
 800df8e:	2b07      	cmp	r3, #7
 800df90:	f240 80a5 	bls.w	800e0de <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800df94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df96:	330e      	adds	r3, #14
 800df98:	4619      	mov	r1, r3
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f7f8 f954 	bl	8006248 <pbuf_add_header>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d04b      	beq.n	800e03e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	891a      	ldrh	r2, [r3, #8]
 800dfaa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dfac:	4413      	add	r3, r2
 800dfae:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	891b      	ldrh	r3, [r3, #8]
 800dfb4:	8b7a      	ldrh	r2, [r7, #26]
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	f0c0 809a 	bcc.w	800e0f0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800dfbc:	8b7b      	ldrh	r3, [r7, #26]
 800dfbe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dfc2:	4619      	mov	r1, r3
 800dfc4:	200e      	movs	r0, #14
 800dfc6:	f7f7 fef1 	bl	8005dac <pbuf_alloc>
 800dfca:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800dfcc:	697b      	ldr	r3, [r7, #20]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	f000 8090 	beq.w	800e0f4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	895b      	ldrh	r3, [r3, #10]
 800dfd8:	461a      	mov	r2, r3
 800dfda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dfdc:	3308      	adds	r3, #8
 800dfde:	429a      	cmp	r2, r3
 800dfe0:	d203      	bcs.n	800dfea <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800dfe2:	6978      	ldr	r0, [r7, #20]
 800dfe4:	f7f8 f9c6 	bl	8006374 <pbuf_free>
          goto icmperr;
 800dfe8:	e085      	b.n	800e0f6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	685b      	ldr	r3, [r3, #4]
 800dfee:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dff2:	4618      	mov	r0, r3
 800dff4:	f001 fb34 	bl	800f660 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800dff8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dffa:	4619      	mov	r1, r3
 800dffc:	6978      	ldr	r0, [r7, #20]
 800dffe:	f7f8 f933 	bl	8006268 <pbuf_remove_header>
 800e002:	4603      	mov	r3, r0
 800e004:	2b00      	cmp	r3, #0
 800e006:	d009      	beq.n	800e01c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e008:	4b40      	ldr	r3, [pc, #256]	; (800e10c <icmp_input+0x1f8>)
 800e00a:	22b6      	movs	r2, #182	; 0xb6
 800e00c:	4940      	ldr	r1, [pc, #256]	; (800e110 <icmp_input+0x1fc>)
 800e00e:	4841      	ldr	r0, [pc, #260]	; (800e114 <icmp_input+0x200>)
 800e010:	f001 fb56 	bl	800f6c0 <iprintf>
          pbuf_free(r);
 800e014:	6978      	ldr	r0, [r7, #20]
 800e016:	f7f8 f9ad 	bl	8006374 <pbuf_free>
          goto icmperr;
 800e01a:	e06c      	b.n	800e0f6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800e01c:	6879      	ldr	r1, [r7, #4]
 800e01e:	6978      	ldr	r0, [r7, #20]
 800e020:	f7f8 fad0 	bl	80065c4 <pbuf_copy>
 800e024:	4603      	mov	r3, r0
 800e026:	2b00      	cmp	r3, #0
 800e028:	d003      	beq.n	800e032 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800e02a:	6978      	ldr	r0, [r7, #20]
 800e02c:	f7f8 f9a2 	bl	8006374 <pbuf_free>
          goto icmperr;
 800e030:	e061      	b.n	800e0f6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f7f8 f99e 	bl	8006374 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	607b      	str	r3, [r7, #4]
 800e03c:	e00f      	b.n	800e05e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e03e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e040:	330e      	adds	r3, #14
 800e042:	4619      	mov	r1, r3
 800e044:	6878      	ldr	r0, [r7, #4]
 800e046:	f7f8 f90f 	bl	8006268 <pbuf_remove_header>
 800e04a:	4603      	mov	r3, r0
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d006      	beq.n	800e05e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e050:	4b2e      	ldr	r3, [pc, #184]	; (800e10c <icmp_input+0x1f8>)
 800e052:	22c7      	movs	r2, #199	; 0xc7
 800e054:	4930      	ldr	r1, [pc, #192]	; (800e118 <icmp_input+0x204>)
 800e056:	482f      	ldr	r0, [pc, #188]	; (800e114 <icmp_input+0x200>)
 800e058:	f001 fb32 	bl	800f6c0 <iprintf>
          goto icmperr;
 800e05c:	e04b      	b.n	800e0f6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	685b      	ldr	r3, [r3, #4]
 800e062:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800e064:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e066:	4619      	mov	r1, r3
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	f7f8 f8ed 	bl	8006248 <pbuf_add_header>
 800e06e:	4603      	mov	r3, r0
 800e070:	2b00      	cmp	r3, #0
 800e072:	d12b      	bne.n	800e0cc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	685b      	ldr	r3, [r3, #4]
 800e078:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800e07a:	69fb      	ldr	r3, [r7, #28]
 800e07c:	681a      	ldr	r2, [r3, #0]
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e082:	4b20      	ldr	r3, [pc, #128]	; (800e104 <icmp_input+0x1f0>)
 800e084:	691a      	ldr	r2, [r3, #16]
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	2200      	movs	r2, #0
 800e08e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800e090:	693b      	ldr	r3, [r7, #16]
 800e092:	2200      	movs	r2, #0
 800e094:	709a      	strb	r2, [r3, #2]
 800e096:	2200      	movs	r2, #0
 800e098:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	22ff      	movs	r2, #255	; 0xff
 800e09e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	729a      	strb	r2, [r3, #10]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	9302      	str	r3, [sp, #8]
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	9301      	str	r3, [sp, #4]
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	9300      	str	r3, [sp, #0]
 800e0b6:	23ff      	movs	r3, #255	; 0xff
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	69f9      	ldr	r1, [r7, #28]
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f000 fa75 	bl	800e5ac <ip4_output_if>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800e0c6:	e001      	b.n	800e0cc <icmp_input+0x1b8>
      break;
 800e0c8:	bf00      	nop
 800e0ca:	e000      	b.n	800e0ce <icmp_input+0x1ba>
      break;
 800e0cc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f7f8 f950 	bl	8006374 <pbuf_free>
  return;
 800e0d4:	e013      	b.n	800e0fe <icmp_input+0x1ea>
    goto lenerr;
 800e0d6:	bf00      	nop
 800e0d8:	e002      	b.n	800e0e0 <icmp_input+0x1cc>
    goto lenerr;
 800e0da:	bf00      	nop
 800e0dc:	e000      	b.n	800e0e0 <icmp_input+0x1cc>
        goto lenerr;
 800e0de:	bf00      	nop
lenerr:
  pbuf_free(p);
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f7f8 f947 	bl	8006374 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e0e6:	e00a      	b.n	800e0fe <icmp_input+0x1ea>
        goto icmperr;
 800e0e8:	bf00      	nop
 800e0ea:	e004      	b.n	800e0f6 <icmp_input+0x1e2>
        goto icmperr;
 800e0ec:	bf00      	nop
 800e0ee:	e002      	b.n	800e0f6 <icmp_input+0x1e2>
          goto icmperr;
 800e0f0:	bf00      	nop
 800e0f2:	e000      	b.n	800e0f6 <icmp_input+0x1e2>
          goto icmperr;
 800e0f4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f7f8 f93c 	bl	8006374 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e0fc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e0fe:	3728      	adds	r7, #40	; 0x28
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}
 800e104:	200033f4 	.word	0x200033f4
 800e108:	20003408 	.word	0x20003408
 800e10c:	08013110 	.word	0x08013110
 800e110:	08013148 	.word	0x08013148
 800e114:	08013180 	.word	0x08013180
 800e118:	080131a8 	.word	0x080131a8

0800e11c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b082      	sub	sp, #8
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
 800e124:	460b      	mov	r3, r1
 800e126:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800e128:	78fb      	ldrb	r3, [r7, #3]
 800e12a:	461a      	mov	r2, r3
 800e12c:	2103      	movs	r1, #3
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f000 f814 	bl	800e15c <icmp_send_response>
}
 800e134:	bf00      	nop
 800e136:	3708      	adds	r7, #8
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}

0800e13c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b082      	sub	sp, #8
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
 800e144:	460b      	mov	r3, r1
 800e146:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800e148:	78fb      	ldrb	r3, [r7, #3]
 800e14a:	461a      	mov	r2, r3
 800e14c:	210b      	movs	r1, #11
 800e14e:	6878      	ldr	r0, [r7, #4]
 800e150:	f000 f804 	bl	800e15c <icmp_send_response>
}
 800e154:	bf00      	nop
 800e156:	3708      	adds	r7, #8
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}

0800e15c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b08c      	sub	sp, #48	; 0x30
 800e160:	af04      	add	r7, sp, #16
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	460b      	mov	r3, r1
 800e166:	70fb      	strb	r3, [r7, #3]
 800e168:	4613      	mov	r3, r2
 800e16a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e16c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e170:	2124      	movs	r1, #36	; 0x24
 800e172:	2022      	movs	r0, #34	; 0x22
 800e174:	f7f7 fe1a 	bl	8005dac <pbuf_alloc>
 800e178:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800e17a:	69fb      	ldr	r3, [r7, #28]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d04c      	beq.n	800e21a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e180:	69fb      	ldr	r3, [r7, #28]
 800e182:	895b      	ldrh	r3, [r3, #10]
 800e184:	2b23      	cmp	r3, #35	; 0x23
 800e186:	d806      	bhi.n	800e196 <icmp_send_response+0x3a>
 800e188:	4b26      	ldr	r3, [pc, #152]	; (800e224 <icmp_send_response+0xc8>)
 800e18a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800e18e:	4926      	ldr	r1, [pc, #152]	; (800e228 <icmp_send_response+0xcc>)
 800e190:	4826      	ldr	r0, [pc, #152]	; (800e22c <icmp_send_response+0xd0>)
 800e192:	f001 fa95 	bl	800f6c0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	685b      	ldr	r3, [r3, #4]
 800e19a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e19c:	69fb      	ldr	r3, [r7, #28]
 800e19e:	685b      	ldr	r3, [r3, #4]
 800e1a0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	78fa      	ldrb	r2, [r7, #3]
 800e1a6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800e1a8:	697b      	ldr	r3, [r7, #20]
 800e1aa:	78ba      	ldrb	r2, [r7, #2]
 800e1ac:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	711a      	strb	r2, [r3, #4]
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	719a      	strb	r2, [r3, #6]
 800e1be:	2200      	movs	r2, #0
 800e1c0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e1c2:	69fb      	ldr	r3, [r7, #28]
 800e1c4:	685b      	ldr	r3, [r3, #4]
 800e1c6:	f103 0008 	add.w	r0, r3, #8
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	685b      	ldr	r3, [r3, #4]
 800e1ce:	221c      	movs	r2, #28
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	f001 fa45 	bl	800f660 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e1d6:	69bb      	ldr	r3, [r7, #24]
 800e1d8:	68db      	ldr	r3, [r3, #12]
 800e1da:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e1dc:	f107 030c 	add.w	r3, r7, #12
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f000 f825 	bl	800e230 <ip4_route>
 800e1e6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800e1e8:	693b      	ldr	r3, [r7, #16]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d011      	beq.n	800e212 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	709a      	strb	r2, [r3, #2]
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e1f8:	f107 020c 	add.w	r2, r7, #12
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	9302      	str	r3, [sp, #8]
 800e200:	2301      	movs	r3, #1
 800e202:	9301      	str	r3, [sp, #4]
 800e204:	2300      	movs	r3, #0
 800e206:	9300      	str	r3, [sp, #0]
 800e208:	23ff      	movs	r3, #255	; 0xff
 800e20a:	2100      	movs	r1, #0
 800e20c:	69f8      	ldr	r0, [r7, #28]
 800e20e:	f000 f9cd 	bl	800e5ac <ip4_output_if>
  }
  pbuf_free(q);
 800e212:	69f8      	ldr	r0, [r7, #28]
 800e214:	f7f8 f8ae 	bl	8006374 <pbuf_free>
 800e218:	e000      	b.n	800e21c <icmp_send_response+0xc0>
    return;
 800e21a:	bf00      	nop
}
 800e21c:	3720      	adds	r7, #32
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}
 800e222:	bf00      	nop
 800e224:	08013110 	.word	0x08013110
 800e228:	080131dc 	.word	0x080131dc
 800e22c:	08013180 	.word	0x08013180

0800e230 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800e230:	b480      	push	{r7}
 800e232:	b085      	sub	sp, #20
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800e238:	4b33      	ldr	r3, [pc, #204]	; (800e308 <ip4_route+0xd8>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	60fb      	str	r3, [r7, #12]
 800e23e:	e036      	b.n	800e2ae <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e246:	f003 0301 	and.w	r3, r3, #1
 800e24a:	b2db      	uxtb	r3, r3
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d02b      	beq.n	800e2a8 <ip4_route+0x78>
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e256:	089b      	lsrs	r3, r3, #2
 800e258:	f003 0301 	and.w	r3, r3, #1
 800e25c:	b2db      	uxtb	r3, r3
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d022      	beq.n	800e2a8 <ip4_route+0x78>
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	3304      	adds	r3, #4
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d01d      	beq.n	800e2a8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681a      	ldr	r2, [r3, #0]
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	3304      	adds	r3, #4
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	405a      	eors	r2, r3
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	3308      	adds	r3, #8
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	4013      	ands	r3, r2
 800e280:	2b00      	cmp	r3, #0
 800e282:	d101      	bne.n	800e288 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	e038      	b.n	800e2fa <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e28e:	f003 0302 	and.w	r3, r3, #2
 800e292:	2b00      	cmp	r3, #0
 800e294:	d108      	bne.n	800e2a8 <ip4_route+0x78>
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681a      	ldr	r2, [r3, #0]
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	330c      	adds	r3, #12
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	d101      	bne.n	800e2a8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	e028      	b.n	800e2fa <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	60fb      	str	r3, [r7, #12]
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d1c5      	bne.n	800e240 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e2b4:	4b15      	ldr	r3, [pc, #84]	; (800e30c <ip4_route+0xdc>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d01a      	beq.n	800e2f2 <ip4_route+0xc2>
 800e2bc:	4b13      	ldr	r3, [pc, #76]	; (800e30c <ip4_route+0xdc>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e2c4:	f003 0301 	and.w	r3, r3, #1
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d012      	beq.n	800e2f2 <ip4_route+0xc2>
 800e2cc:	4b0f      	ldr	r3, [pc, #60]	; (800e30c <ip4_route+0xdc>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e2d4:	f003 0304 	and.w	r3, r3, #4
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d00a      	beq.n	800e2f2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e2dc:	4b0b      	ldr	r3, [pc, #44]	; (800e30c <ip4_route+0xdc>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	3304      	adds	r3, #4
 800e2e2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d004      	beq.n	800e2f2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	b2db      	uxtb	r3, r3
 800e2ee:	2b7f      	cmp	r3, #127	; 0x7f
 800e2f0:	d101      	bne.n	800e2f6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	e001      	b.n	800e2fa <ip4_route+0xca>
  }

  return netif_default;
 800e2f6:	4b05      	ldr	r3, [pc, #20]	; (800e30c <ip4_route+0xdc>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3714      	adds	r7, #20
 800e2fe:	46bd      	mov	sp, r7
 800e300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e304:	4770      	bx	lr
 800e306:	bf00      	nop
 800e308:	20006928 	.word	0x20006928
 800e30c:	2000692c 	.word	0x2000692c

0800e310 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b082      	sub	sp, #8
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e31e:	f003 0301 	and.w	r3, r3, #1
 800e322:	b2db      	uxtb	r3, r3
 800e324:	2b00      	cmp	r3, #0
 800e326:	d016      	beq.n	800e356 <ip4_input_accept+0x46>
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	3304      	adds	r3, #4
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d011      	beq.n	800e356 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e332:	4b0b      	ldr	r3, [pc, #44]	; (800e360 <ip4_input_accept+0x50>)
 800e334:	695a      	ldr	r2, [r3, #20]
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	3304      	adds	r3, #4
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d008      	beq.n	800e352 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e340:	4b07      	ldr	r3, [pc, #28]	; (800e360 <ip4_input_accept+0x50>)
 800e342:	695b      	ldr	r3, [r3, #20]
 800e344:	6879      	ldr	r1, [r7, #4]
 800e346:	4618      	mov	r0, r3
 800e348:	f000 fa08 	bl	800e75c <ip4_addr_isbroadcast_u32>
 800e34c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d001      	beq.n	800e356 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800e352:	2301      	movs	r3, #1
 800e354:	e000      	b.n	800e358 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800e356:	2300      	movs	r3, #0
}
 800e358:	4618      	mov	r0, r3
 800e35a:	3708      	adds	r7, #8
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}
 800e360:	200033f4 	.word	0x200033f4

0800e364 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b086      	sub	sp, #24
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	685b      	ldr	r3, [r3, #4]
 800e372:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800e374:	697b      	ldr	r3, [r7, #20]
 800e376:	781b      	ldrb	r3, [r3, #0]
 800e378:	091b      	lsrs	r3, r3, #4
 800e37a:	b2db      	uxtb	r3, r3
 800e37c:	2b04      	cmp	r3, #4
 800e37e:	d004      	beq.n	800e38a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f7f7 fff7 	bl	8006374 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800e386:	2300      	movs	r3, #0
 800e388:	e107      	b.n	800e59a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800e38a:	697b      	ldr	r3, [r7, #20]
 800e38c:	781b      	ldrb	r3, [r3, #0]
 800e38e:	f003 030f 	and.w	r3, r3, #15
 800e392:	b2db      	uxtb	r3, r3
 800e394:	009b      	lsls	r3, r3, #2
 800e396:	b2db      	uxtb	r3, r3
 800e398:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e39a:	697b      	ldr	r3, [r7, #20]
 800e39c:	885b      	ldrh	r3, [r3, #2]
 800e39e:	b29b      	uxth	r3, r3
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f7f6 fd33 	bl	8004e0c <lwip_htons>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	891b      	ldrh	r3, [r3, #8]
 800e3ae:	89ba      	ldrh	r2, [r7, #12]
 800e3b0:	429a      	cmp	r2, r3
 800e3b2:	d204      	bcs.n	800e3be <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800e3b4:	89bb      	ldrh	r3, [r7, #12]
 800e3b6:	4619      	mov	r1, r3
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f7f7 fe55 	bl	8006068 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	895b      	ldrh	r3, [r3, #10]
 800e3c2:	89fa      	ldrh	r2, [r7, #14]
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	d807      	bhi.n	800e3d8 <ip4_input+0x74>
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	891b      	ldrh	r3, [r3, #8]
 800e3cc:	89ba      	ldrh	r2, [r7, #12]
 800e3ce:	429a      	cmp	r2, r3
 800e3d0:	d802      	bhi.n	800e3d8 <ip4_input+0x74>
 800e3d2:	89fb      	ldrh	r3, [r7, #14]
 800e3d4:	2b13      	cmp	r3, #19
 800e3d6:	d804      	bhi.n	800e3e2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f7f7 ffcb 	bl	8006374 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	e0db      	b.n	800e59a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e3e2:	697b      	ldr	r3, [r7, #20]
 800e3e4:	691b      	ldr	r3, [r3, #16]
 800e3e6:	4a6f      	ldr	r2, [pc, #444]	; (800e5a4 <ip4_input+0x240>)
 800e3e8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e3ea:	697b      	ldr	r3, [r7, #20]
 800e3ec:	68db      	ldr	r3, [r3, #12]
 800e3ee:	4a6d      	ldr	r2, [pc, #436]	; (800e5a4 <ip4_input+0x240>)
 800e3f0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e3f2:	4b6c      	ldr	r3, [pc, #432]	; (800e5a4 <ip4_input+0x240>)
 800e3f4:	695b      	ldr	r3, [r3, #20]
 800e3f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e3fa:	2be0      	cmp	r3, #224	; 0xe0
 800e3fc:	d112      	bne.n	800e424 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e404:	f003 0301 	and.w	r3, r3, #1
 800e408:	b2db      	uxtb	r3, r3
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d007      	beq.n	800e41e <ip4_input+0xba>
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	3304      	adds	r3, #4
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d002      	beq.n	800e41e <ip4_input+0xba>
      netif = inp;
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	613b      	str	r3, [r7, #16]
 800e41c:	e02a      	b.n	800e474 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e41e:	2300      	movs	r3, #0
 800e420:	613b      	str	r3, [r7, #16]
 800e422:	e027      	b.n	800e474 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800e424:	6838      	ldr	r0, [r7, #0]
 800e426:	f7ff ff73 	bl	800e310 <ip4_input_accept>
 800e42a:	4603      	mov	r3, r0
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d002      	beq.n	800e436 <ip4_input+0xd2>
      netif = inp;
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	613b      	str	r3, [r7, #16]
 800e434:	e01e      	b.n	800e474 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e436:	2300      	movs	r3, #0
 800e438:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e43a:	4b5a      	ldr	r3, [pc, #360]	; (800e5a4 <ip4_input+0x240>)
 800e43c:	695b      	ldr	r3, [r3, #20]
 800e43e:	b2db      	uxtb	r3, r3
 800e440:	2b7f      	cmp	r3, #127	; 0x7f
 800e442:	d017      	beq.n	800e474 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800e444:	4b58      	ldr	r3, [pc, #352]	; (800e5a8 <ip4_input+0x244>)
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	613b      	str	r3, [r7, #16]
 800e44a:	e00e      	b.n	800e46a <ip4_input+0x106>
          if (netif == inp) {
 800e44c:	693a      	ldr	r2, [r7, #16]
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	429a      	cmp	r2, r3
 800e452:	d006      	beq.n	800e462 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800e454:	6938      	ldr	r0, [r7, #16]
 800e456:	f7ff ff5b 	bl	800e310 <ip4_input_accept>
 800e45a:	4603      	mov	r3, r0
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d108      	bne.n	800e472 <ip4_input+0x10e>
 800e460:	e000      	b.n	800e464 <ip4_input+0x100>
            continue;
 800e462:	bf00      	nop
        NETIF_FOREACH(netif) {
 800e464:	693b      	ldr	r3, [r7, #16]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	613b      	str	r3, [r7, #16]
 800e46a:	693b      	ldr	r3, [r7, #16]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d1ed      	bne.n	800e44c <ip4_input+0xe8>
 800e470:	e000      	b.n	800e474 <ip4_input+0x110>
            break;
 800e472:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e474:	4b4b      	ldr	r3, [pc, #300]	; (800e5a4 <ip4_input+0x240>)
 800e476:	691b      	ldr	r3, [r3, #16]
 800e478:	6839      	ldr	r1, [r7, #0]
 800e47a:	4618      	mov	r0, r3
 800e47c:	f000 f96e 	bl	800e75c <ip4_addr_isbroadcast_u32>
 800e480:	4603      	mov	r3, r0
 800e482:	2b00      	cmp	r3, #0
 800e484:	d105      	bne.n	800e492 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e486:	4b47      	ldr	r3, [pc, #284]	; (800e5a4 <ip4_input+0x240>)
 800e488:	691b      	ldr	r3, [r3, #16]
 800e48a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e48e:	2be0      	cmp	r3, #224	; 0xe0
 800e490:	d104      	bne.n	800e49c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	f7f7 ff6e 	bl	8006374 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e498:	2300      	movs	r3, #0
 800e49a:	e07e      	b.n	800e59a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e49c:	693b      	ldr	r3, [r7, #16]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d104      	bne.n	800e4ac <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f7f7 ff66 	bl	8006374 <pbuf_free>
    return ERR_OK;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	e076      	b.n	800e59a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e4ac:	697b      	ldr	r3, [r7, #20]
 800e4ae:	88db      	ldrh	r3, [r3, #6]
 800e4b0:	b29b      	uxth	r3, r3
 800e4b2:	461a      	mov	r2, r3
 800e4b4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800e4b8:	4013      	ands	r3, r2
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d00b      	beq.n	800e4d6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f000 fc92 	bl	800ede8 <ip4_reass>
 800e4c4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d101      	bne.n	800e4d0 <ip4_input+0x16c>
      return ERR_OK;
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	e064      	b.n	800e59a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	685b      	ldr	r3, [r3, #4]
 800e4d4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e4d6:	4a33      	ldr	r2, [pc, #204]	; (800e5a4 <ip4_input+0x240>)
 800e4d8:	693b      	ldr	r3, [r7, #16]
 800e4da:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e4dc:	4a31      	ldr	r2, [pc, #196]	; (800e5a4 <ip4_input+0x240>)
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e4e2:	4a30      	ldr	r2, [pc, #192]	; (800e5a4 <ip4_input+0x240>)
 800e4e4:	697b      	ldr	r3, [r7, #20]
 800e4e6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	781b      	ldrb	r3, [r3, #0]
 800e4ec:	f003 030f 	and.w	r3, r3, #15
 800e4f0:	b2db      	uxtb	r3, r3
 800e4f2:	009b      	lsls	r3, r3, #2
 800e4f4:	b2db      	uxtb	r3, r3
 800e4f6:	b29a      	uxth	r2, r3
 800e4f8:	4b2a      	ldr	r3, [pc, #168]	; (800e5a4 <ip4_input+0x240>)
 800e4fa:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e4fc:	89fb      	ldrh	r3, [r7, #14]
 800e4fe:	4619      	mov	r1, r3
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	f7f7 feb1 	bl	8006268 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800e506:	697b      	ldr	r3, [r7, #20]
 800e508:	7a5b      	ldrb	r3, [r3, #9]
 800e50a:	2b11      	cmp	r3, #17
 800e50c:	d006      	beq.n	800e51c <ip4_input+0x1b8>
 800e50e:	2b11      	cmp	r3, #17
 800e510:	dc13      	bgt.n	800e53a <ip4_input+0x1d6>
 800e512:	2b01      	cmp	r3, #1
 800e514:	d00c      	beq.n	800e530 <ip4_input+0x1cc>
 800e516:	2b06      	cmp	r3, #6
 800e518:	d005      	beq.n	800e526 <ip4_input+0x1c2>
 800e51a:	e00e      	b.n	800e53a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800e51c:	6839      	ldr	r1, [r7, #0]
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	f7fe fc68 	bl	800cdf4 <udp_input>
        break;
 800e524:	e026      	b.n	800e574 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800e526:	6839      	ldr	r1, [r7, #0]
 800e528:	6878      	ldr	r0, [r7, #4]
 800e52a:	f7fa f88d 	bl	8008648 <tcp_input>
        break;
 800e52e:	e021      	b.n	800e574 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e530:	6839      	ldr	r1, [r7, #0]
 800e532:	6878      	ldr	r0, [r7, #4]
 800e534:	f7ff fcee 	bl	800df14 <icmp_input>
        break;
 800e538:	e01c      	b.n	800e574 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e53a:	4b1a      	ldr	r3, [pc, #104]	; (800e5a4 <ip4_input+0x240>)
 800e53c:	695b      	ldr	r3, [r3, #20]
 800e53e:	6939      	ldr	r1, [r7, #16]
 800e540:	4618      	mov	r0, r3
 800e542:	f000 f90b 	bl	800e75c <ip4_addr_isbroadcast_u32>
 800e546:	4603      	mov	r3, r0
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d10f      	bne.n	800e56c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e54c:	4b15      	ldr	r3, [pc, #84]	; (800e5a4 <ip4_input+0x240>)
 800e54e:	695b      	ldr	r3, [r3, #20]
 800e550:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e554:	2be0      	cmp	r3, #224	; 0xe0
 800e556:	d009      	beq.n	800e56c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e558:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e55c:	4619      	mov	r1, r3
 800e55e:	6878      	ldr	r0, [r7, #4]
 800e560:	f7f7 fef5 	bl	800634e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e564:	2102      	movs	r1, #2
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f7ff fdd8 	bl	800e11c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	f7f7 ff01 	bl	8006374 <pbuf_free>
        break;
 800e572:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e574:	4b0b      	ldr	r3, [pc, #44]	; (800e5a4 <ip4_input+0x240>)
 800e576:	2200      	movs	r2, #0
 800e578:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e57a:	4b0a      	ldr	r3, [pc, #40]	; (800e5a4 <ip4_input+0x240>)
 800e57c:	2200      	movs	r2, #0
 800e57e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e580:	4b08      	ldr	r3, [pc, #32]	; (800e5a4 <ip4_input+0x240>)
 800e582:	2200      	movs	r2, #0
 800e584:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e586:	4b07      	ldr	r3, [pc, #28]	; (800e5a4 <ip4_input+0x240>)
 800e588:	2200      	movs	r2, #0
 800e58a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e58c:	4b05      	ldr	r3, [pc, #20]	; (800e5a4 <ip4_input+0x240>)
 800e58e:	2200      	movs	r2, #0
 800e590:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e592:	4b04      	ldr	r3, [pc, #16]	; (800e5a4 <ip4_input+0x240>)
 800e594:	2200      	movs	r2, #0
 800e596:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e598:	2300      	movs	r3, #0
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	3718      	adds	r7, #24
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd80      	pop	{r7, pc}
 800e5a2:	bf00      	nop
 800e5a4:	200033f4 	.word	0x200033f4
 800e5a8:	20006928 	.word	0x20006928

0800e5ac <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b08a      	sub	sp, #40	; 0x28
 800e5b0:	af04      	add	r7, sp, #16
 800e5b2:	60f8      	str	r0, [r7, #12]
 800e5b4:	60b9      	str	r1, [r7, #8]
 800e5b6:	607a      	str	r2, [r7, #4]
 800e5b8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d009      	beq.n	800e5d8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d003      	beq.n	800e5d2 <ip4_output_if+0x26>
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d102      	bne.n	800e5d8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5d4:	3304      	adds	r3, #4
 800e5d6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e5d8:	78fa      	ldrb	r2, [r7, #3]
 800e5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5dc:	9302      	str	r3, [sp, #8]
 800e5de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e5e2:	9301      	str	r3, [sp, #4]
 800e5e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e5e8:	9300      	str	r3, [sp, #0]
 800e5ea:	4613      	mov	r3, r2
 800e5ec:	687a      	ldr	r2, [r7, #4]
 800e5ee:	6979      	ldr	r1, [r7, #20]
 800e5f0:	68f8      	ldr	r0, [r7, #12]
 800e5f2:	f000 f805 	bl	800e600 <ip4_output_if_src>
 800e5f6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	3718      	adds	r7, #24
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}

0800e600 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b088      	sub	sp, #32
 800e604:	af00      	add	r7, sp, #0
 800e606:	60f8      	str	r0, [r7, #12]
 800e608:	60b9      	str	r1, [r7, #8]
 800e60a:	607a      	str	r2, [r7, #4]
 800e60c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	7b9b      	ldrb	r3, [r3, #14]
 800e612:	2b01      	cmp	r3, #1
 800e614:	d006      	beq.n	800e624 <ip4_output_if_src+0x24>
 800e616:	4b4b      	ldr	r3, [pc, #300]	; (800e744 <ip4_output_if_src+0x144>)
 800e618:	f44f 7255 	mov.w	r2, #852	; 0x354
 800e61c:	494a      	ldr	r1, [pc, #296]	; (800e748 <ip4_output_if_src+0x148>)
 800e61e:	484b      	ldr	r0, [pc, #300]	; (800e74c <ip4_output_if_src+0x14c>)
 800e620:	f001 f84e 	bl	800f6c0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d060      	beq.n	800e6ec <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e62a:	2314      	movs	r3, #20
 800e62c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800e62e:	2114      	movs	r1, #20
 800e630:	68f8      	ldr	r0, [r7, #12]
 800e632:	f7f7 fe09 	bl	8006248 <pbuf_add_header>
 800e636:	4603      	mov	r3, r0
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d002      	beq.n	800e642 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e63c:	f06f 0301 	mvn.w	r3, #1
 800e640:	e07c      	b.n	800e73c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	685b      	ldr	r3, [r3, #4]
 800e646:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	895b      	ldrh	r3, [r3, #10]
 800e64c:	2b13      	cmp	r3, #19
 800e64e:	d806      	bhi.n	800e65e <ip4_output_if_src+0x5e>
 800e650:	4b3c      	ldr	r3, [pc, #240]	; (800e744 <ip4_output_if_src+0x144>)
 800e652:	f44f 7262 	mov.w	r2, #904	; 0x388
 800e656:	493e      	ldr	r1, [pc, #248]	; (800e750 <ip4_output_if_src+0x150>)
 800e658:	483c      	ldr	r0, [pc, #240]	; (800e74c <ip4_output_if_src+0x14c>)
 800e65a:	f001 f831 	bl	800f6c0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e65e:	69fb      	ldr	r3, [r7, #28]
 800e660:	78fa      	ldrb	r2, [r7, #3]
 800e662:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e664:	69fb      	ldr	r3, [r7, #28]
 800e666:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e66a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681a      	ldr	r2, [r3, #0]
 800e670:	69fb      	ldr	r3, [r7, #28]
 800e672:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e674:	8b7b      	ldrh	r3, [r7, #26]
 800e676:	089b      	lsrs	r3, r3, #2
 800e678:	b29b      	uxth	r3, r3
 800e67a:	b2db      	uxtb	r3, r3
 800e67c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e680:	b2da      	uxtb	r2, r3
 800e682:	69fb      	ldr	r3, [r7, #28]
 800e684:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e686:	69fb      	ldr	r3, [r7, #28]
 800e688:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e68c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	891b      	ldrh	r3, [r3, #8]
 800e692:	4618      	mov	r0, r3
 800e694:	f7f6 fbba 	bl	8004e0c <lwip_htons>
 800e698:	4603      	mov	r3, r0
 800e69a:	461a      	mov	r2, r3
 800e69c:	69fb      	ldr	r3, [r7, #28]
 800e69e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e6a0:	69fb      	ldr	r3, [r7, #28]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	719a      	strb	r2, [r3, #6]
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e6aa:	4b2a      	ldr	r3, [pc, #168]	; (800e754 <ip4_output_if_src+0x154>)
 800e6ac:	881b      	ldrh	r3, [r3, #0]
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f7f6 fbac 	bl	8004e0c <lwip_htons>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	461a      	mov	r2, r3
 800e6b8:	69fb      	ldr	r3, [r7, #28]
 800e6ba:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e6bc:	4b25      	ldr	r3, [pc, #148]	; (800e754 <ip4_output_if_src+0x154>)
 800e6be:	881b      	ldrh	r3, [r3, #0]
 800e6c0:	3301      	adds	r3, #1
 800e6c2:	b29a      	uxth	r2, r3
 800e6c4:	4b23      	ldr	r3, [pc, #140]	; (800e754 <ip4_output_if_src+0x154>)
 800e6c6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d104      	bne.n	800e6d8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e6ce:	4b22      	ldr	r3, [pc, #136]	; (800e758 <ip4_output_if_src+0x158>)
 800e6d0:	681a      	ldr	r2, [r3, #0]
 800e6d2:	69fb      	ldr	r3, [r7, #28]
 800e6d4:	60da      	str	r2, [r3, #12]
 800e6d6:	e003      	b.n	800e6e0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	681a      	ldr	r2, [r3, #0]
 800e6dc:	69fb      	ldr	r3, [r7, #28]
 800e6de:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e6e0:	69fb      	ldr	r3, [r7, #28]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	729a      	strb	r2, [r3, #10]
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	72da      	strb	r2, [r3, #11]
 800e6ea:	e00f      	b.n	800e70c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	895b      	ldrh	r3, [r3, #10]
 800e6f0:	2b13      	cmp	r3, #19
 800e6f2:	d802      	bhi.n	800e6fa <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e6f4:	f06f 0301 	mvn.w	r3, #1
 800e6f8:	e020      	b.n	800e73c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	685b      	ldr	r3, [r3, #4]
 800e6fe:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e700:	69fb      	ldr	r3, [r7, #28]
 800e702:	691b      	ldr	r3, [r3, #16]
 800e704:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e706:	f107 0314 	add.w	r3, r7, #20
 800e70a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e70e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e710:	2b00      	cmp	r3, #0
 800e712:	d00c      	beq.n	800e72e <ip4_output_if_src+0x12e>
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	891a      	ldrh	r2, [r3, #8]
 800e718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e71a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e71c:	429a      	cmp	r2, r3
 800e71e:	d906      	bls.n	800e72e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800e720:	687a      	ldr	r2, [r7, #4]
 800e722:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e724:	68f8      	ldr	r0, [r7, #12]
 800e726:	f000 fd4d 	bl	800f1c4 <ip4_frag>
 800e72a:	4603      	mov	r3, r0
 800e72c:	e006      	b.n	800e73c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e730:	695b      	ldr	r3, [r3, #20]
 800e732:	687a      	ldr	r2, [r7, #4]
 800e734:	68f9      	ldr	r1, [r7, #12]
 800e736:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e738:	4798      	blx	r3
 800e73a:	4603      	mov	r3, r0
}
 800e73c:	4618      	mov	r0, r3
 800e73e:	3720      	adds	r7, #32
 800e740:	46bd      	mov	sp, r7
 800e742:	bd80      	pop	{r7, pc}
 800e744:	08013208 	.word	0x08013208
 800e748:	0801323c 	.word	0x0801323c
 800e74c:	08013248 	.word	0x08013248
 800e750:	08013270 	.word	0x08013270
 800e754:	20000206 	.word	0x20000206
 800e758:	0801363c 	.word	0x0801363c

0800e75c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e75c:	b480      	push	{r7}
 800e75e:	b085      	sub	sp, #20
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
 800e764:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e770:	d002      	beq.n	800e778 <ip4_addr_isbroadcast_u32+0x1c>
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d101      	bne.n	800e77c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e778:	2301      	movs	r3, #1
 800e77a:	e02a      	b.n	800e7d2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e782:	f003 0302 	and.w	r3, r3, #2
 800e786:	2b00      	cmp	r3, #0
 800e788:	d101      	bne.n	800e78e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e78a:	2300      	movs	r3, #0
 800e78c:	e021      	b.n	800e7d2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	3304      	adds	r3, #4
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	687a      	ldr	r2, [r7, #4]
 800e796:	429a      	cmp	r2, r3
 800e798:	d101      	bne.n	800e79e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e79a:	2300      	movs	r3, #0
 800e79c:	e019      	b.n	800e7d2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e79e:	68fa      	ldr	r2, [r7, #12]
 800e7a0:	683b      	ldr	r3, [r7, #0]
 800e7a2:	3304      	adds	r3, #4
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	405a      	eors	r2, r3
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	3308      	adds	r3, #8
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	4013      	ands	r3, r2
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d10d      	bne.n	800e7d0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	3308      	adds	r3, #8
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	43da      	mvns	r2, r3
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	3308      	adds	r3, #8
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e7c8:	429a      	cmp	r2, r3
 800e7ca:	d101      	bne.n	800e7d0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e7cc:	2301      	movs	r3, #1
 800e7ce:	e000      	b.n	800e7d2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e7d0:	2300      	movs	r3, #0
  }
}
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	3714      	adds	r7, #20
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7dc:	4770      	bx	lr
	...

0800e7e0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b084      	sub	sp, #16
 800e7e4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e7ea:	4b12      	ldr	r3, [pc, #72]	; (800e834 <ip_reass_tmr+0x54>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e7f0:	e018      	b.n	800e824 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	7fdb      	ldrb	r3, [r3, #31]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d00b      	beq.n	800e812 <ip_reass_tmr+0x32>
      r->timer--;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	7fdb      	ldrb	r3, [r3, #31]
 800e7fe:	3b01      	subs	r3, #1
 800e800:	b2da      	uxtb	r2, r3
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	60fb      	str	r3, [r7, #12]
 800e810:	e008      	b.n	800e824 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e81c:	68b9      	ldr	r1, [r7, #8]
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f000 f80a 	bl	800e838 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d1e3      	bne.n	800e7f2 <ip_reass_tmr+0x12>
    }
  }
}
 800e82a:	bf00      	nop
 800e82c:	bf00      	nop
 800e82e:	3710      	adds	r7, #16
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}
 800e834:	20000208 	.word	0x20000208

0800e838 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b088      	sub	sp, #32
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
 800e840:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e842:	2300      	movs	r3, #0
 800e844:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e846:	683a      	ldr	r2, [r7, #0]
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d105      	bne.n	800e85a <ip_reass_free_complete_datagram+0x22>
 800e84e:	4b45      	ldr	r3, [pc, #276]	; (800e964 <ip_reass_free_complete_datagram+0x12c>)
 800e850:	22ab      	movs	r2, #171	; 0xab
 800e852:	4945      	ldr	r1, [pc, #276]	; (800e968 <ip_reass_free_complete_datagram+0x130>)
 800e854:	4845      	ldr	r0, [pc, #276]	; (800e96c <ip_reass_free_complete_datagram+0x134>)
 800e856:	f000 ff33 	bl	800f6c0 <iprintf>
  if (prev != NULL) {
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d00a      	beq.n	800e876 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	687a      	ldr	r2, [r7, #4]
 800e866:	429a      	cmp	r2, r3
 800e868:	d005      	beq.n	800e876 <ip_reass_free_complete_datagram+0x3e>
 800e86a:	4b3e      	ldr	r3, [pc, #248]	; (800e964 <ip_reass_free_complete_datagram+0x12c>)
 800e86c:	22ad      	movs	r2, #173	; 0xad
 800e86e:	4940      	ldr	r1, [pc, #256]	; (800e970 <ip_reass_free_complete_datagram+0x138>)
 800e870:	483e      	ldr	r0, [pc, #248]	; (800e96c <ip_reass_free_complete_datagram+0x134>)
 800e872:	f000 ff25 	bl	800f6c0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	685b      	ldr	r3, [r3, #4]
 800e87a:	685b      	ldr	r3, [r3, #4]
 800e87c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e87e:	697b      	ldr	r3, [r7, #20]
 800e880:	889b      	ldrh	r3, [r3, #4]
 800e882:	b29b      	uxth	r3, r3
 800e884:	2b00      	cmp	r3, #0
 800e886:	d12a      	bne.n	800e8de <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	685b      	ldr	r3, [r3, #4]
 800e88c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	681a      	ldr	r2, [r3, #0]
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e896:	69bb      	ldr	r3, [r7, #24]
 800e898:	6858      	ldr	r0, [r3, #4]
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	3308      	adds	r3, #8
 800e89e:	2214      	movs	r2, #20
 800e8a0:	4619      	mov	r1, r3
 800e8a2:	f000 fedd 	bl	800f660 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e8a6:	2101      	movs	r1, #1
 800e8a8:	69b8      	ldr	r0, [r7, #24]
 800e8aa:	f7ff fc47 	bl	800e13c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e8ae:	69b8      	ldr	r0, [r7, #24]
 800e8b0:	f7f7 fde8 	bl	8006484 <pbuf_clen>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e8b8:	8bfa      	ldrh	r2, [r7, #30]
 800e8ba:	8a7b      	ldrh	r3, [r7, #18]
 800e8bc:	4413      	add	r3, r2
 800e8be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e8c2:	db05      	blt.n	800e8d0 <ip_reass_free_complete_datagram+0x98>
 800e8c4:	4b27      	ldr	r3, [pc, #156]	; (800e964 <ip_reass_free_complete_datagram+0x12c>)
 800e8c6:	22bc      	movs	r2, #188	; 0xbc
 800e8c8:	492a      	ldr	r1, [pc, #168]	; (800e974 <ip_reass_free_complete_datagram+0x13c>)
 800e8ca:	4828      	ldr	r0, [pc, #160]	; (800e96c <ip_reass_free_complete_datagram+0x134>)
 800e8cc:	f000 fef8 	bl	800f6c0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e8d0:	8bfa      	ldrh	r2, [r7, #30]
 800e8d2:	8a7b      	ldrh	r3, [r7, #18]
 800e8d4:	4413      	add	r3, r2
 800e8d6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e8d8:	69b8      	ldr	r0, [r7, #24]
 800e8da:	f7f7 fd4b 	bl	8006374 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	685b      	ldr	r3, [r3, #4]
 800e8e2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e8e4:	e01f      	b.n	800e926 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e8e6:	69bb      	ldr	r3, [r7, #24]
 800e8e8:	685b      	ldr	r3, [r3, #4]
 800e8ea:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e8ec:	69bb      	ldr	r3, [r7, #24]
 800e8ee:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e8f0:	697b      	ldr	r3, [r7, #20]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e8f6:	68f8      	ldr	r0, [r7, #12]
 800e8f8:	f7f7 fdc4 	bl	8006484 <pbuf_clen>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e900:	8bfa      	ldrh	r2, [r7, #30]
 800e902:	8a7b      	ldrh	r3, [r7, #18]
 800e904:	4413      	add	r3, r2
 800e906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e90a:	db05      	blt.n	800e918 <ip_reass_free_complete_datagram+0xe0>
 800e90c:	4b15      	ldr	r3, [pc, #84]	; (800e964 <ip_reass_free_complete_datagram+0x12c>)
 800e90e:	22cc      	movs	r2, #204	; 0xcc
 800e910:	4918      	ldr	r1, [pc, #96]	; (800e974 <ip_reass_free_complete_datagram+0x13c>)
 800e912:	4816      	ldr	r0, [pc, #88]	; (800e96c <ip_reass_free_complete_datagram+0x134>)
 800e914:	f000 fed4 	bl	800f6c0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e918:	8bfa      	ldrh	r2, [r7, #30]
 800e91a:	8a7b      	ldrh	r3, [r7, #18]
 800e91c:	4413      	add	r3, r2
 800e91e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e920:	68f8      	ldr	r0, [r7, #12]
 800e922:	f7f7 fd27 	bl	8006374 <pbuf_free>
  while (p != NULL) {
 800e926:	69bb      	ldr	r3, [r7, #24]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d1dc      	bne.n	800e8e6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e92c:	6839      	ldr	r1, [r7, #0]
 800e92e:	6878      	ldr	r0, [r7, #4]
 800e930:	f000 f8c2 	bl	800eab8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e934:	4b10      	ldr	r3, [pc, #64]	; (800e978 <ip_reass_free_complete_datagram+0x140>)
 800e936:	881b      	ldrh	r3, [r3, #0]
 800e938:	8bfa      	ldrh	r2, [r7, #30]
 800e93a:	429a      	cmp	r2, r3
 800e93c:	d905      	bls.n	800e94a <ip_reass_free_complete_datagram+0x112>
 800e93e:	4b09      	ldr	r3, [pc, #36]	; (800e964 <ip_reass_free_complete_datagram+0x12c>)
 800e940:	22d2      	movs	r2, #210	; 0xd2
 800e942:	490e      	ldr	r1, [pc, #56]	; (800e97c <ip_reass_free_complete_datagram+0x144>)
 800e944:	4809      	ldr	r0, [pc, #36]	; (800e96c <ip_reass_free_complete_datagram+0x134>)
 800e946:	f000 febb 	bl	800f6c0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e94a:	4b0b      	ldr	r3, [pc, #44]	; (800e978 <ip_reass_free_complete_datagram+0x140>)
 800e94c:	881a      	ldrh	r2, [r3, #0]
 800e94e:	8bfb      	ldrh	r3, [r7, #30]
 800e950:	1ad3      	subs	r3, r2, r3
 800e952:	b29a      	uxth	r2, r3
 800e954:	4b08      	ldr	r3, [pc, #32]	; (800e978 <ip_reass_free_complete_datagram+0x140>)
 800e956:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e958:	8bfb      	ldrh	r3, [r7, #30]
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	3720      	adds	r7, #32
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}
 800e962:	bf00      	nop
 800e964:	080132a0 	.word	0x080132a0
 800e968:	080132dc 	.word	0x080132dc
 800e96c:	080132e8 	.word	0x080132e8
 800e970:	08013310 	.word	0x08013310
 800e974:	08013324 	.word	0x08013324
 800e978:	2000020c 	.word	0x2000020c
 800e97c:	08013344 	.word	0x08013344

0800e980 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b08a      	sub	sp, #40	; 0x28
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
 800e988:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e98a:	2300      	movs	r3, #0
 800e98c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e98e:	2300      	movs	r3, #0
 800e990:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e992:	2300      	movs	r3, #0
 800e994:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e996:	2300      	movs	r3, #0
 800e998:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e99a:	2300      	movs	r3, #0
 800e99c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e99e:	4b28      	ldr	r3, [pc, #160]	; (800ea40 <ip_reass_remove_oldest_datagram+0xc0>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e9a4:	e030      	b.n	800ea08 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a8:	695a      	ldr	r2, [r3, #20]
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	68db      	ldr	r3, [r3, #12]
 800e9ae:	429a      	cmp	r2, r3
 800e9b0:	d10c      	bne.n	800e9cc <ip_reass_remove_oldest_datagram+0x4c>
 800e9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b4:	699a      	ldr	r2, [r3, #24]
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	691b      	ldr	r3, [r3, #16]
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	d106      	bne.n	800e9cc <ip_reass_remove_oldest_datagram+0x4c>
 800e9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c0:	899a      	ldrh	r2, [r3, #12]
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	889b      	ldrh	r3, [r3, #4]
 800e9c6:	b29b      	uxth	r3, r3
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d014      	beq.n	800e9f6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	3301      	adds	r3, #1
 800e9d0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e9d2:	6a3b      	ldr	r3, [r7, #32]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d104      	bne.n	800e9e2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9da:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e9dc:	69fb      	ldr	r3, [r7, #28]
 800e9de:	61bb      	str	r3, [r7, #24]
 800e9e0:	e009      	b.n	800e9f6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e4:	7fda      	ldrb	r2, [r3, #31]
 800e9e6:	6a3b      	ldr	r3, [r7, #32]
 800e9e8:	7fdb      	ldrb	r3, [r3, #31]
 800e9ea:	429a      	cmp	r2, r3
 800e9ec:	d803      	bhi.n	800e9f6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e9f2:	69fb      	ldr	r3, [r7, #28]
 800e9f4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d001      	beq.n	800ea02 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea00:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800ea02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ea08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d1cb      	bne.n	800e9a6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800ea0e:	6a3b      	ldr	r3, [r7, #32]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d008      	beq.n	800ea26 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800ea14:	69b9      	ldr	r1, [r7, #24]
 800ea16:	6a38      	ldr	r0, [r7, #32]
 800ea18:	f7ff ff0e 	bl	800e838 <ip_reass_free_complete_datagram>
 800ea1c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800ea1e:	697a      	ldr	r2, [r7, #20]
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	4413      	add	r3, r2
 800ea24:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800ea26:	697a      	ldr	r2, [r7, #20]
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	429a      	cmp	r2, r3
 800ea2c:	da02      	bge.n	800ea34 <ip_reass_remove_oldest_datagram+0xb4>
 800ea2e:	693b      	ldr	r3, [r7, #16]
 800ea30:	2b01      	cmp	r3, #1
 800ea32:	dcac      	bgt.n	800e98e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800ea34:	697b      	ldr	r3, [r7, #20]
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3728      	adds	r7, #40	; 0x28
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}
 800ea3e:	bf00      	nop
 800ea40:	20000208 	.word	0x20000208

0800ea44 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b084      	sub	sp, #16
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
 800ea4c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ea4e:	2004      	movs	r0, #4
 800ea50:	f7f6 fe32 	bl	80056b8 <memp_malloc>
 800ea54:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d110      	bne.n	800ea7e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800ea5c:	6839      	ldr	r1, [r7, #0]
 800ea5e:	6878      	ldr	r0, [r7, #4]
 800ea60:	f7ff ff8e 	bl	800e980 <ip_reass_remove_oldest_datagram>
 800ea64:	4602      	mov	r2, r0
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	dc03      	bgt.n	800ea74 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ea6c:	2004      	movs	r0, #4
 800ea6e:	f7f6 fe23 	bl	80056b8 <memp_malloc>
 800ea72:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d101      	bne.n	800ea7e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	e016      	b.n	800eaac <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800ea7e:	2220      	movs	r2, #32
 800ea80:	2100      	movs	r1, #0
 800ea82:	68f8      	ldr	r0, [r7, #12]
 800ea84:	f000 fe14 	bl	800f6b0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	220f      	movs	r2, #15
 800ea8c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800ea8e:	4b09      	ldr	r3, [pc, #36]	; (800eab4 <ip_reass_enqueue_new_datagram+0x70>)
 800ea90:	681a      	ldr	r2, [r3, #0]
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800ea96:	4a07      	ldr	r2, [pc, #28]	; (800eab4 <ip_reass_enqueue_new_datagram+0x70>)
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	3308      	adds	r3, #8
 800eaa0:	2214      	movs	r2, #20
 800eaa2:	6879      	ldr	r1, [r7, #4]
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f000 fddb 	bl	800f660 <memcpy>
  return ipr;
 800eaaa:	68fb      	ldr	r3, [r7, #12]
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3710      	adds	r7, #16
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}
 800eab4:	20000208 	.word	0x20000208

0800eab8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b082      	sub	sp, #8
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800eac2:	4b10      	ldr	r3, [pc, #64]	; (800eb04 <ip_reass_dequeue_datagram+0x4c>)
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	687a      	ldr	r2, [r7, #4]
 800eac8:	429a      	cmp	r2, r3
 800eaca:	d104      	bne.n	800ead6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	4a0c      	ldr	r2, [pc, #48]	; (800eb04 <ip_reass_dequeue_datagram+0x4c>)
 800ead2:	6013      	str	r3, [r2, #0]
 800ead4:	e00d      	b.n	800eaf2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d106      	bne.n	800eaea <ip_reass_dequeue_datagram+0x32>
 800eadc:	4b0a      	ldr	r3, [pc, #40]	; (800eb08 <ip_reass_dequeue_datagram+0x50>)
 800eade:	f240 1245 	movw	r2, #325	; 0x145
 800eae2:	490a      	ldr	r1, [pc, #40]	; (800eb0c <ip_reass_dequeue_datagram+0x54>)
 800eae4:	480a      	ldr	r0, [pc, #40]	; (800eb10 <ip_reass_dequeue_datagram+0x58>)
 800eae6:	f000 fdeb 	bl	800f6c0 <iprintf>
    prev->next = ipr->next;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681a      	ldr	r2, [r3, #0]
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800eaf2:	6879      	ldr	r1, [r7, #4]
 800eaf4:	2004      	movs	r0, #4
 800eaf6:	f7f6 fe2b 	bl	8005750 <memp_free>
}
 800eafa:	bf00      	nop
 800eafc:	3708      	adds	r7, #8
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}
 800eb02:	bf00      	nop
 800eb04:	20000208 	.word	0x20000208
 800eb08:	080132a0 	.word	0x080132a0
 800eb0c:	08013368 	.word	0x08013368
 800eb10:	080132e8 	.word	0x080132e8

0800eb14 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b08c      	sub	sp, #48	; 0x30
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	60f8      	str	r0, [r7, #12]
 800eb1c:	60b9      	str	r1, [r7, #8]
 800eb1e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800eb20:	2300      	movs	r3, #0
 800eb22:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800eb24:	2301      	movs	r3, #1
 800eb26:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	685b      	ldr	r3, [r3, #4]
 800eb2c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800eb2e:	69fb      	ldr	r3, [r7, #28]
 800eb30:	885b      	ldrh	r3, [r3, #2]
 800eb32:	b29b      	uxth	r3, r3
 800eb34:	4618      	mov	r0, r3
 800eb36:	f7f6 f969 	bl	8004e0c <lwip_htons>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800eb3e:	69fb      	ldr	r3, [r7, #28]
 800eb40:	781b      	ldrb	r3, [r3, #0]
 800eb42:	f003 030f 	and.w	r3, r3, #15
 800eb46:	b2db      	uxtb	r3, r3
 800eb48:	009b      	lsls	r3, r3, #2
 800eb4a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800eb4c:	7e7b      	ldrb	r3, [r7, #25]
 800eb4e:	b29b      	uxth	r3, r3
 800eb50:	8b7a      	ldrh	r2, [r7, #26]
 800eb52:	429a      	cmp	r2, r3
 800eb54:	d202      	bcs.n	800eb5c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800eb56:	f04f 33ff 	mov.w	r3, #4294967295
 800eb5a:	e135      	b.n	800edc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800eb5c:	7e7b      	ldrb	r3, [r7, #25]
 800eb5e:	b29b      	uxth	r3, r3
 800eb60:	8b7a      	ldrh	r2, [r7, #26]
 800eb62:	1ad3      	subs	r3, r2, r3
 800eb64:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800eb66:	69fb      	ldr	r3, [r7, #28]
 800eb68:	88db      	ldrh	r3, [r3, #6]
 800eb6a:	b29b      	uxth	r3, r3
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f7f6 f94d 	bl	8004e0c <lwip_htons>
 800eb72:	4603      	mov	r3, r0
 800eb74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eb78:	b29b      	uxth	r3, r3
 800eb7a:	00db      	lsls	r3, r3, #3
 800eb7c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	685b      	ldr	r3, [r3, #4]
 800eb82:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800eb84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb86:	2200      	movs	r2, #0
 800eb88:	701a      	strb	r2, [r3, #0]
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	705a      	strb	r2, [r3, #1]
 800eb8e:	2200      	movs	r2, #0
 800eb90:	709a      	strb	r2, [r3, #2]
 800eb92:	2200      	movs	r2, #0
 800eb94:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800eb96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb98:	8afa      	ldrh	r2, [r7, #22]
 800eb9a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800eb9c:	8afa      	ldrh	r2, [r7, #22]
 800eb9e:	8b7b      	ldrh	r3, [r7, #26]
 800eba0:	4413      	add	r3, r2
 800eba2:	b29a      	uxth	r2, r3
 800eba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800eba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebaa:	88db      	ldrh	r3, [r3, #6]
 800ebac:	b29b      	uxth	r3, r3
 800ebae:	8afa      	ldrh	r2, [r7, #22]
 800ebb0:	429a      	cmp	r2, r3
 800ebb2:	d902      	bls.n	800ebba <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ebb4:	f04f 33ff 	mov.w	r3, #4294967295
 800ebb8:	e106      	b.n	800edc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	685b      	ldr	r3, [r3, #4]
 800ebbe:	627b      	str	r3, [r7, #36]	; 0x24
 800ebc0:	e068      	b.n	800ec94 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800ebc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebc4:	685b      	ldr	r3, [r3, #4]
 800ebc6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800ebc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebca:	889b      	ldrh	r3, [r3, #4]
 800ebcc:	b29a      	uxth	r2, r3
 800ebce:	693b      	ldr	r3, [r7, #16]
 800ebd0:	889b      	ldrh	r3, [r3, #4]
 800ebd2:	b29b      	uxth	r3, r3
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d235      	bcs.n	800ec44 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800ebd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebdc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800ebde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d020      	beq.n	800ec26 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800ebe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe6:	889b      	ldrh	r3, [r3, #4]
 800ebe8:	b29a      	uxth	r2, r3
 800ebea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebec:	88db      	ldrh	r3, [r3, #6]
 800ebee:	b29b      	uxth	r3, r3
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	d307      	bcc.n	800ec04 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800ebf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf6:	88db      	ldrh	r3, [r3, #6]
 800ebf8:	b29a      	uxth	r2, r3
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	889b      	ldrh	r3, [r3, #4]
 800ebfe:	b29b      	uxth	r3, r3
 800ec00:	429a      	cmp	r2, r3
 800ec02:	d902      	bls.n	800ec0a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ec04:	f04f 33ff 	mov.w	r3, #4294967295
 800ec08:	e0de      	b.n	800edc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800ec0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec0c:	68ba      	ldr	r2, [r7, #8]
 800ec0e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800ec10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec12:	88db      	ldrh	r3, [r3, #6]
 800ec14:	b29a      	uxth	r2, r3
 800ec16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec18:	889b      	ldrh	r3, [r3, #4]
 800ec1a:	b29b      	uxth	r3, r3
 800ec1c:	429a      	cmp	r2, r3
 800ec1e:	d03d      	beq.n	800ec9c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800ec20:	2300      	movs	r3, #0
 800ec22:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800ec24:	e03a      	b.n	800ec9c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800ec26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec28:	88db      	ldrh	r3, [r3, #6]
 800ec2a:	b29a      	uxth	r2, r3
 800ec2c:	693b      	ldr	r3, [r7, #16]
 800ec2e:	889b      	ldrh	r3, [r3, #4]
 800ec30:	b29b      	uxth	r3, r3
 800ec32:	429a      	cmp	r2, r3
 800ec34:	d902      	bls.n	800ec3c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ec36:	f04f 33ff 	mov.w	r3, #4294967295
 800ec3a:	e0c5      	b.n	800edc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	68ba      	ldr	r2, [r7, #8]
 800ec40:	605a      	str	r2, [r3, #4]
      break;
 800ec42:	e02b      	b.n	800ec9c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800ec44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec46:	889b      	ldrh	r3, [r3, #4]
 800ec48:	b29a      	uxth	r2, r3
 800ec4a:	693b      	ldr	r3, [r7, #16]
 800ec4c:	889b      	ldrh	r3, [r3, #4]
 800ec4e:	b29b      	uxth	r3, r3
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d102      	bne.n	800ec5a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ec54:	f04f 33ff 	mov.w	r3, #4294967295
 800ec58:	e0b6      	b.n	800edc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800ec5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec5c:	889b      	ldrh	r3, [r3, #4]
 800ec5e:	b29a      	uxth	r2, r3
 800ec60:	693b      	ldr	r3, [r7, #16]
 800ec62:	88db      	ldrh	r3, [r3, #6]
 800ec64:	b29b      	uxth	r3, r3
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d202      	bcs.n	800ec70 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ec6a:	f04f 33ff 	mov.w	r3, #4294967295
 800ec6e:	e0ab      	b.n	800edc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800ec70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d009      	beq.n	800ec8a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800ec76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec78:	88db      	ldrh	r3, [r3, #6]
 800ec7a:	b29a      	uxth	r2, r3
 800ec7c:	693b      	ldr	r3, [r7, #16]
 800ec7e:	889b      	ldrh	r3, [r3, #4]
 800ec80:	b29b      	uxth	r3, r3
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d001      	beq.n	800ec8a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800ec86:	2300      	movs	r3, #0
 800ec88:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800ec8a:	693b      	ldr	r3, [r7, #16]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800ec90:	693b      	ldr	r3, [r7, #16]
 800ec92:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800ec94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d193      	bne.n	800ebc2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800ec9a:	e000      	b.n	800ec9e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800ec9c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800ec9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d12d      	bne.n	800ed00 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800eca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d01c      	beq.n	800ece4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800ecaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecac:	88db      	ldrh	r3, [r3, #6]
 800ecae:	b29a      	uxth	r2, r3
 800ecb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecb2:	889b      	ldrh	r3, [r3, #4]
 800ecb4:	b29b      	uxth	r3, r3
 800ecb6:	429a      	cmp	r2, r3
 800ecb8:	d906      	bls.n	800ecc8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800ecba:	4b45      	ldr	r3, [pc, #276]	; (800edd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ecbc:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800ecc0:	4944      	ldr	r1, [pc, #272]	; (800edd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800ecc2:	4845      	ldr	r0, [pc, #276]	; (800edd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ecc4:	f000 fcfc 	bl	800f6c0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800ecc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecca:	68ba      	ldr	r2, [r7, #8]
 800eccc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800ecce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecd0:	88db      	ldrh	r3, [r3, #6]
 800ecd2:	b29a      	uxth	r2, r3
 800ecd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecd6:	889b      	ldrh	r3, [r3, #4]
 800ecd8:	b29b      	uxth	r3, r3
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d010      	beq.n	800ed00 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800ecde:	2300      	movs	r3, #0
 800ece0:	623b      	str	r3, [r7, #32]
 800ece2:	e00d      	b.n	800ed00 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	685b      	ldr	r3, [r3, #4]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d006      	beq.n	800ecfa <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800ecec:	4b38      	ldr	r3, [pc, #224]	; (800edd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ecee:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800ecf2:	493a      	ldr	r1, [pc, #232]	; (800eddc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800ecf4:	4838      	ldr	r0, [pc, #224]	; (800edd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ecf6:	f000 fce3 	bl	800f6c0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	68ba      	ldr	r2, [r7, #8]
 800ecfe:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d105      	bne.n	800ed12 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	7f9b      	ldrb	r3, [r3, #30]
 800ed0a:	f003 0301 	and.w	r3, r3, #1
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d059      	beq.n	800edc6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800ed12:	6a3b      	ldr	r3, [r7, #32]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d04f      	beq.n	800edb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	685b      	ldr	r3, [r3, #4]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d006      	beq.n	800ed2e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	685b      	ldr	r3, [r3, #4]
 800ed24:	685b      	ldr	r3, [r3, #4]
 800ed26:	889b      	ldrh	r3, [r3, #4]
 800ed28:	b29b      	uxth	r3, r3
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d002      	beq.n	800ed34 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800ed2e:	2300      	movs	r3, #0
 800ed30:	623b      	str	r3, [r7, #32]
 800ed32:	e041      	b.n	800edb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800ed34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed36:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800ed38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800ed3e:	e012      	b.n	800ed66 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800ed40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed42:	685b      	ldr	r3, [r3, #4]
 800ed44:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800ed46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed48:	88db      	ldrh	r3, [r3, #6]
 800ed4a:	b29a      	uxth	r2, r3
 800ed4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed4e:	889b      	ldrh	r3, [r3, #4]
 800ed50:	b29b      	uxth	r3, r3
 800ed52:	429a      	cmp	r2, r3
 800ed54:	d002      	beq.n	800ed5c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800ed56:	2300      	movs	r3, #0
 800ed58:	623b      	str	r3, [r7, #32]
            break;
 800ed5a:	e007      	b.n	800ed6c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800ed5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed5e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800ed60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800ed66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d1e9      	bne.n	800ed40 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800ed6c:	6a3b      	ldr	r3, [r7, #32]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d022      	beq.n	800edb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	685b      	ldr	r3, [r3, #4]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d106      	bne.n	800ed88 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800ed7a:	4b15      	ldr	r3, [pc, #84]	; (800edd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ed7c:	f240 12df 	movw	r2, #479	; 0x1df
 800ed80:	4917      	ldr	r1, [pc, #92]	; (800ede0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ed82:	4815      	ldr	r0, [pc, #84]	; (800edd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ed84:	f000 fc9c 	bl	800f6c0 <iprintf>
          LWIP_ASSERT("sanity check",
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	685b      	ldr	r3, [r3, #4]
 800ed8c:	685b      	ldr	r3, [r3, #4]
 800ed8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d106      	bne.n	800eda2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800ed94:	4b0e      	ldr	r3, [pc, #56]	; (800edd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ed96:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ed9a:	4911      	ldr	r1, [pc, #68]	; (800ede0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ed9c:	480e      	ldr	r0, [pc, #56]	; (800edd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ed9e:	f000 fc8f 	bl	800f6c0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800eda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d006      	beq.n	800edb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800edaa:	4b09      	ldr	r3, [pc, #36]	; (800edd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800edac:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800edb0:	490c      	ldr	r1, [pc, #48]	; (800ede4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800edb2:	4809      	ldr	r0, [pc, #36]	; (800edd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800edb4:	f000 fc84 	bl	800f6c0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800edb8:	6a3b      	ldr	r3, [r7, #32]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	bf14      	ite	ne
 800edbe:	2301      	movne	r3, #1
 800edc0:	2300      	moveq	r3, #0
 800edc2:	b2db      	uxtb	r3, r3
 800edc4:	e000      	b.n	800edc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800edc6:	2300      	movs	r3, #0
}
 800edc8:	4618      	mov	r0, r3
 800edca:	3730      	adds	r7, #48	; 0x30
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}
 800edd0:	080132a0 	.word	0x080132a0
 800edd4:	08013384 	.word	0x08013384
 800edd8:	080132e8 	.word	0x080132e8
 800eddc:	080133a4 	.word	0x080133a4
 800ede0:	080133dc 	.word	0x080133dc
 800ede4:	080133ec 	.word	0x080133ec

0800ede8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b08e      	sub	sp, #56	; 0x38
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	685b      	ldr	r3, [r3, #4]
 800edf4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800edf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edf8:	781b      	ldrb	r3, [r3, #0]
 800edfa:	f003 030f 	and.w	r3, r3, #15
 800edfe:	b2db      	uxtb	r3, r3
 800ee00:	009b      	lsls	r3, r3, #2
 800ee02:	b2db      	uxtb	r3, r3
 800ee04:	2b14      	cmp	r3, #20
 800ee06:	f040 8167 	bne.w	800f0d8 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800ee0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee0c:	88db      	ldrh	r3, [r3, #6]
 800ee0e:	b29b      	uxth	r3, r3
 800ee10:	4618      	mov	r0, r3
 800ee12:	f7f5 fffb 	bl	8004e0c <lwip_htons>
 800ee16:	4603      	mov	r3, r0
 800ee18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee1c:	b29b      	uxth	r3, r3
 800ee1e:	00db      	lsls	r3, r3, #3
 800ee20:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ee22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee24:	885b      	ldrh	r3, [r3, #2]
 800ee26:	b29b      	uxth	r3, r3
 800ee28:	4618      	mov	r0, r3
 800ee2a:	f7f5 ffef 	bl	8004e0c <lwip_htons>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800ee32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee34:	781b      	ldrb	r3, [r3, #0]
 800ee36:	f003 030f 	and.w	r3, r3, #15
 800ee3a:	b2db      	uxtb	r3, r3
 800ee3c:	009b      	lsls	r3, r3, #2
 800ee3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800ee42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ee46:	b29b      	uxth	r3, r3
 800ee48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	f0c0 8146 	bcc.w	800f0dc <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800ee50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ee54:	b29b      	uxth	r3, r3
 800ee56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ee58:	1ad3      	subs	r3, r2, r3
 800ee5a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800ee5c:	6878      	ldr	r0, [r7, #4]
 800ee5e:	f7f7 fb11 	bl	8006484 <pbuf_clen>
 800ee62:	4603      	mov	r3, r0
 800ee64:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800ee66:	4b9f      	ldr	r3, [pc, #636]	; (800f0e4 <ip4_reass+0x2fc>)
 800ee68:	881b      	ldrh	r3, [r3, #0]
 800ee6a:	461a      	mov	r2, r3
 800ee6c:	8c3b      	ldrh	r3, [r7, #32]
 800ee6e:	4413      	add	r3, r2
 800ee70:	2b0a      	cmp	r3, #10
 800ee72:	dd10      	ble.n	800ee96 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ee74:	8c3b      	ldrh	r3, [r7, #32]
 800ee76:	4619      	mov	r1, r3
 800ee78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee7a:	f7ff fd81 	bl	800e980 <ip_reass_remove_oldest_datagram>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	f000 812d 	beq.w	800f0e0 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800ee86:	4b97      	ldr	r3, [pc, #604]	; (800f0e4 <ip4_reass+0x2fc>)
 800ee88:	881b      	ldrh	r3, [r3, #0]
 800ee8a:	461a      	mov	r2, r3
 800ee8c:	8c3b      	ldrh	r3, [r7, #32]
 800ee8e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ee90:	2b0a      	cmp	r3, #10
 800ee92:	f300 8125 	bgt.w	800f0e0 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ee96:	4b94      	ldr	r3, [pc, #592]	; (800f0e8 <ip4_reass+0x300>)
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	633b      	str	r3, [r7, #48]	; 0x30
 800ee9c:	e015      	b.n	800eeca <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800ee9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eea0:	695a      	ldr	r2, [r3, #20]
 800eea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eea4:	68db      	ldr	r3, [r3, #12]
 800eea6:	429a      	cmp	r2, r3
 800eea8:	d10c      	bne.n	800eec4 <ip4_reass+0xdc>
 800eeaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeac:	699a      	ldr	r2, [r3, #24]
 800eeae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb0:	691b      	ldr	r3, [r3, #16]
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	d106      	bne.n	800eec4 <ip4_reass+0xdc>
 800eeb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeb8:	899a      	ldrh	r2, [r3, #12]
 800eeba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eebc:	889b      	ldrh	r3, [r3, #4]
 800eebe:	b29b      	uxth	r3, r3
 800eec0:	429a      	cmp	r2, r3
 800eec2:	d006      	beq.n	800eed2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800eec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	633b      	str	r3, [r7, #48]	; 0x30
 800eeca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d1e6      	bne.n	800ee9e <ip4_reass+0xb6>
 800eed0:	e000      	b.n	800eed4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800eed2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800eed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d109      	bne.n	800eeee <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800eeda:	8c3b      	ldrh	r3, [r7, #32]
 800eedc:	4619      	mov	r1, r3
 800eede:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eee0:	f7ff fdb0 	bl	800ea44 <ip_reass_enqueue_new_datagram>
 800eee4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800eee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d11c      	bne.n	800ef26 <ip4_reass+0x13e>
      goto nullreturn;
 800eeec:	e109      	b.n	800f102 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800eeee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eef0:	88db      	ldrh	r3, [r3, #6]
 800eef2:	b29b      	uxth	r3, r3
 800eef4:	4618      	mov	r0, r3
 800eef6:	f7f5 ff89 	bl	8004e0c <lwip_htons>
 800eefa:	4603      	mov	r3, r0
 800eefc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d110      	bne.n	800ef26 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ef04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef06:	89db      	ldrh	r3, [r3, #14]
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f7f5 ff7f 	bl	8004e0c <lwip_htons>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d006      	beq.n	800ef26 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ef18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef1a:	3308      	adds	r3, #8
 800ef1c:	2214      	movs	r2, #20
 800ef1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ef20:	4618      	mov	r0, r3
 800ef22:	f000 fb9d 	bl	800f660 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ef26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef28:	88db      	ldrh	r3, [r3, #6]
 800ef2a:	b29b      	uxth	r3, r3
 800ef2c:	f003 0320 	and.w	r3, r3, #32
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	bf0c      	ite	eq
 800ef34:	2301      	moveq	r3, #1
 800ef36:	2300      	movne	r3, #0
 800ef38:	b2db      	uxtb	r3, r3
 800ef3a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800ef3c:	69fb      	ldr	r3, [r7, #28]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d00e      	beq.n	800ef60 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800ef42:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ef44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef46:	4413      	add	r3, r2
 800ef48:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ef4a:	8b7a      	ldrh	r2, [r7, #26]
 800ef4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	f0c0 80a0 	bcc.w	800f094 <ip4_reass+0x2ac>
 800ef54:	8b7b      	ldrh	r3, [r7, #26]
 800ef56:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800ef5a:	4293      	cmp	r3, r2
 800ef5c:	f200 809a 	bhi.w	800f094 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800ef60:	69fa      	ldr	r2, [r7, #28]
 800ef62:	6879      	ldr	r1, [r7, #4]
 800ef64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef66:	f7ff fdd5 	bl	800eb14 <ip_reass_chain_frag_into_datagram_and_validate>
 800ef6a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef72:	f000 8091 	beq.w	800f098 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ef76:	4b5b      	ldr	r3, [pc, #364]	; (800f0e4 <ip4_reass+0x2fc>)
 800ef78:	881a      	ldrh	r2, [r3, #0]
 800ef7a:	8c3b      	ldrh	r3, [r7, #32]
 800ef7c:	4413      	add	r3, r2
 800ef7e:	b29a      	uxth	r2, r3
 800ef80:	4b58      	ldr	r3, [pc, #352]	; (800f0e4 <ip4_reass+0x2fc>)
 800ef82:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ef84:	69fb      	ldr	r3, [r7, #28]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d00d      	beq.n	800efa6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ef8a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ef8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef8e:	4413      	add	r3, r2
 800ef90:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ef92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef94:	8a7a      	ldrh	r2, [r7, #18]
 800ef96:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ef98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef9a:	7f9b      	ldrb	r3, [r3, #30]
 800ef9c:	f043 0301 	orr.w	r3, r3, #1
 800efa0:	b2da      	uxtb	r2, r3
 800efa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800efa6:	697b      	ldr	r3, [r7, #20]
 800efa8:	2b01      	cmp	r3, #1
 800efaa:	d171      	bne.n	800f090 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800efac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efae:	8b9b      	ldrh	r3, [r3, #28]
 800efb0:	3314      	adds	r3, #20
 800efb2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800efb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb6:	685b      	ldr	r3, [r3, #4]
 800efb8:	685b      	ldr	r3, [r3, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800efbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efc0:	685b      	ldr	r3, [r3, #4]
 800efc2:	685b      	ldr	r3, [r3, #4]
 800efc4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800efc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efc8:	3308      	adds	r3, #8
 800efca:	2214      	movs	r2, #20
 800efcc:	4619      	mov	r1, r3
 800efce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800efd0:	f000 fb46 	bl	800f660 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800efd4:	8a3b      	ldrh	r3, [r7, #16]
 800efd6:	4618      	mov	r0, r3
 800efd8:	f7f5 ff18 	bl	8004e0c <lwip_htons>
 800efdc:	4603      	mov	r3, r0
 800efde:	461a      	mov	r2, r3
 800efe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efe2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800efe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efe6:	2200      	movs	r2, #0
 800efe8:	719a      	strb	r2, [r3, #6]
 800efea:	2200      	movs	r2, #0
 800efec:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800efee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eff0:	2200      	movs	r2, #0
 800eff2:	729a      	strb	r2, [r3, #10]
 800eff4:	2200      	movs	r2, #0
 800eff6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800eff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800effa:	685b      	ldr	r3, [r3, #4]
 800effc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800effe:	e00d      	b.n	800f01c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800f000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f002:	685b      	ldr	r3, [r3, #4]
 800f004:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800f006:	2114      	movs	r1, #20
 800f008:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f00a:	f7f7 f92d 	bl	8006268 <pbuf_remove_header>
      pbuf_cat(p, r);
 800f00e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	f7f7 fa71 	bl	80064f8 <pbuf_cat>
      r = iprh->next_pbuf;
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800f01c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d1ee      	bne.n	800f000 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f022:	4b31      	ldr	r3, [pc, #196]	; (800f0e8 <ip4_reass+0x300>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f028:	429a      	cmp	r2, r3
 800f02a:	d102      	bne.n	800f032 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800f02c:	2300      	movs	r3, #0
 800f02e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f030:	e010      	b.n	800f054 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f032:	4b2d      	ldr	r3, [pc, #180]	; (800f0e8 <ip4_reass+0x300>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f038:	e007      	b.n	800f04a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800f03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f040:	429a      	cmp	r2, r3
 800f042:	d006      	beq.n	800f052 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d1f4      	bne.n	800f03a <ip4_reass+0x252>
 800f050:	e000      	b.n	800f054 <ip4_reass+0x26c>
          break;
 800f052:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f054:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f056:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f058:	f7ff fd2e 	bl	800eab8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	f7f7 fa11 	bl	8006484 <pbuf_clen>
 800f062:	4603      	mov	r3, r0
 800f064:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f066:	4b1f      	ldr	r3, [pc, #124]	; (800f0e4 <ip4_reass+0x2fc>)
 800f068:	881b      	ldrh	r3, [r3, #0]
 800f06a:	8c3a      	ldrh	r2, [r7, #32]
 800f06c:	429a      	cmp	r2, r3
 800f06e:	d906      	bls.n	800f07e <ip4_reass+0x296>
 800f070:	4b1e      	ldr	r3, [pc, #120]	; (800f0ec <ip4_reass+0x304>)
 800f072:	f240 229b 	movw	r2, #667	; 0x29b
 800f076:	491e      	ldr	r1, [pc, #120]	; (800f0f0 <ip4_reass+0x308>)
 800f078:	481e      	ldr	r0, [pc, #120]	; (800f0f4 <ip4_reass+0x30c>)
 800f07a:	f000 fb21 	bl	800f6c0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800f07e:	4b19      	ldr	r3, [pc, #100]	; (800f0e4 <ip4_reass+0x2fc>)
 800f080:	881a      	ldrh	r2, [r3, #0]
 800f082:	8c3b      	ldrh	r3, [r7, #32]
 800f084:	1ad3      	subs	r3, r2, r3
 800f086:	b29a      	uxth	r2, r3
 800f088:	4b16      	ldr	r3, [pc, #88]	; (800f0e4 <ip4_reass+0x2fc>)
 800f08a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	e03c      	b.n	800f10a <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f090:	2300      	movs	r3, #0
 800f092:	e03a      	b.n	800f10a <ip4_reass+0x322>
      goto nullreturn_ipr;
 800f094:	bf00      	nop
 800f096:	e000      	b.n	800f09a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800f098:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800f09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d106      	bne.n	800f0ae <ip4_reass+0x2c6>
 800f0a0:	4b12      	ldr	r3, [pc, #72]	; (800f0ec <ip4_reass+0x304>)
 800f0a2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800f0a6:	4914      	ldr	r1, [pc, #80]	; (800f0f8 <ip4_reass+0x310>)
 800f0a8:	4812      	ldr	r0, [pc, #72]	; (800f0f4 <ip4_reass+0x30c>)
 800f0aa:	f000 fb09 	bl	800f6c0 <iprintf>
  if (ipr->p == NULL) {
 800f0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0b0:	685b      	ldr	r3, [r3, #4]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d124      	bne.n	800f100 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800f0b6:	4b0c      	ldr	r3, [pc, #48]	; (800f0e8 <ip4_reass+0x300>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0bc:	429a      	cmp	r2, r3
 800f0be:	d006      	beq.n	800f0ce <ip4_reass+0x2e6>
 800f0c0:	4b0a      	ldr	r3, [pc, #40]	; (800f0ec <ip4_reass+0x304>)
 800f0c2:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f0c6:	490d      	ldr	r1, [pc, #52]	; (800f0fc <ip4_reass+0x314>)
 800f0c8:	480a      	ldr	r0, [pc, #40]	; (800f0f4 <ip4_reass+0x30c>)
 800f0ca:	f000 faf9 	bl	800f6c0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800f0ce:	2100      	movs	r1, #0
 800f0d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0d2:	f7ff fcf1 	bl	800eab8 <ip_reass_dequeue_datagram>
 800f0d6:	e014      	b.n	800f102 <ip4_reass+0x31a>
    goto nullreturn;
 800f0d8:	bf00      	nop
 800f0da:	e012      	b.n	800f102 <ip4_reass+0x31a>
    goto nullreturn;
 800f0dc:	bf00      	nop
 800f0de:	e010      	b.n	800f102 <ip4_reass+0x31a>
      goto nullreturn;
 800f0e0:	bf00      	nop
 800f0e2:	e00e      	b.n	800f102 <ip4_reass+0x31a>
 800f0e4:	2000020c 	.word	0x2000020c
 800f0e8:	20000208 	.word	0x20000208
 800f0ec:	080132a0 	.word	0x080132a0
 800f0f0:	08013410 	.word	0x08013410
 800f0f4:	080132e8 	.word	0x080132e8
 800f0f8:	0801342c 	.word	0x0801342c
 800f0fc:	08013438 	.word	0x08013438
  }

nullreturn:
 800f100:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800f102:	6878      	ldr	r0, [r7, #4]
 800f104:	f7f7 f936 	bl	8006374 <pbuf_free>
  return NULL;
 800f108:	2300      	movs	r3, #0
}
 800f10a:	4618      	mov	r0, r3
 800f10c:	3738      	adds	r7, #56	; 0x38
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}
 800f112:	bf00      	nop

0800f114 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800f114:	b580      	push	{r7, lr}
 800f116:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800f118:	2005      	movs	r0, #5
 800f11a:	f7f6 facd 	bl	80056b8 <memp_malloc>
 800f11e:	4603      	mov	r3, r0
}
 800f120:	4618      	mov	r0, r3
 800f122:	bd80      	pop	{r7, pc}

0800f124 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b082      	sub	sp, #8
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d106      	bne.n	800f140 <ip_frag_free_pbuf_custom_ref+0x1c>
 800f132:	4b07      	ldr	r3, [pc, #28]	; (800f150 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800f134:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800f138:	4906      	ldr	r1, [pc, #24]	; (800f154 <ip_frag_free_pbuf_custom_ref+0x30>)
 800f13a:	4807      	ldr	r0, [pc, #28]	; (800f158 <ip_frag_free_pbuf_custom_ref+0x34>)
 800f13c:	f000 fac0 	bl	800f6c0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f140:	6879      	ldr	r1, [r7, #4]
 800f142:	2005      	movs	r0, #5
 800f144:	f7f6 fb04 	bl	8005750 <memp_free>
}
 800f148:	bf00      	nop
 800f14a:	3708      	adds	r7, #8
 800f14c:	46bd      	mov	sp, r7
 800f14e:	bd80      	pop	{r7, pc}
 800f150:	080132a0 	.word	0x080132a0
 800f154:	08013458 	.word	0x08013458
 800f158:	080132e8 	.word	0x080132e8

0800f15c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b084      	sub	sp, #16
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d106      	bne.n	800f17c <ipfrag_free_pbuf_custom+0x20>
 800f16e:	4b11      	ldr	r3, [pc, #68]	; (800f1b4 <ipfrag_free_pbuf_custom+0x58>)
 800f170:	f240 22ce 	movw	r2, #718	; 0x2ce
 800f174:	4910      	ldr	r1, [pc, #64]	; (800f1b8 <ipfrag_free_pbuf_custom+0x5c>)
 800f176:	4811      	ldr	r0, [pc, #68]	; (800f1bc <ipfrag_free_pbuf_custom+0x60>)
 800f178:	f000 faa2 	bl	800f6c0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800f17c:	68fa      	ldr	r2, [r7, #12]
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	429a      	cmp	r2, r3
 800f182:	d006      	beq.n	800f192 <ipfrag_free_pbuf_custom+0x36>
 800f184:	4b0b      	ldr	r3, [pc, #44]	; (800f1b4 <ipfrag_free_pbuf_custom+0x58>)
 800f186:	f240 22cf 	movw	r2, #719	; 0x2cf
 800f18a:	490d      	ldr	r1, [pc, #52]	; (800f1c0 <ipfrag_free_pbuf_custom+0x64>)
 800f18c:	480b      	ldr	r0, [pc, #44]	; (800f1bc <ipfrag_free_pbuf_custom+0x60>)
 800f18e:	f000 fa97 	bl	800f6c0 <iprintf>
  if (pcr->original != NULL) {
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	695b      	ldr	r3, [r3, #20]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d004      	beq.n	800f1a4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	695b      	ldr	r3, [r3, #20]
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f7f7 f8e8 	bl	8006374 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f1a4:	68f8      	ldr	r0, [r7, #12]
 800f1a6:	f7ff ffbd 	bl	800f124 <ip_frag_free_pbuf_custom_ref>
}
 800f1aa:	bf00      	nop
 800f1ac:	3710      	adds	r7, #16
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	bd80      	pop	{r7, pc}
 800f1b2:	bf00      	nop
 800f1b4:	080132a0 	.word	0x080132a0
 800f1b8:	08013464 	.word	0x08013464
 800f1bc:	080132e8 	.word	0x080132e8
 800f1c0:	08013470 	.word	0x08013470

0800f1c4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b094      	sub	sp, #80	; 0x50
 800f1c8:	af02      	add	r7, sp, #8
 800f1ca:	60f8      	str	r0, [r7, #12]
 800f1cc:	60b9      	str	r1, [r7, #8]
 800f1ce:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f1d6:	68bb      	ldr	r3, [r7, #8]
 800f1d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f1da:	3b14      	subs	r3, #20
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	da00      	bge.n	800f1e2 <ip4_frag+0x1e>
 800f1e0:	3307      	adds	r3, #7
 800f1e2:	10db      	asrs	r3, r3, #3
 800f1e4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800f1e6:	2314      	movs	r3, #20
 800f1e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	685b      	ldr	r3, [r3, #4]
 800f1ee:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800f1f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1f2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800f1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f6:	781b      	ldrb	r3, [r3, #0]
 800f1f8:	f003 030f 	and.w	r3, r3, #15
 800f1fc:	b2db      	uxtb	r3, r3
 800f1fe:	009b      	lsls	r3, r3, #2
 800f200:	b2db      	uxtb	r3, r3
 800f202:	2b14      	cmp	r3, #20
 800f204:	d002      	beq.n	800f20c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800f206:	f06f 0305 	mvn.w	r3, #5
 800f20a:	e110      	b.n	800f42e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	895b      	ldrh	r3, [r3, #10]
 800f210:	2b13      	cmp	r3, #19
 800f212:	d809      	bhi.n	800f228 <ip4_frag+0x64>
 800f214:	4b88      	ldr	r3, [pc, #544]	; (800f438 <ip4_frag+0x274>)
 800f216:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800f21a:	4988      	ldr	r1, [pc, #544]	; (800f43c <ip4_frag+0x278>)
 800f21c:	4888      	ldr	r0, [pc, #544]	; (800f440 <ip4_frag+0x27c>)
 800f21e:	f000 fa4f 	bl	800f6c0 <iprintf>
 800f222:	f06f 0305 	mvn.w	r3, #5
 800f226:	e102      	b.n	800f42e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f22a:	88db      	ldrh	r3, [r3, #6]
 800f22c:	b29b      	uxth	r3, r3
 800f22e:	4618      	mov	r0, r3
 800f230:	f7f5 fdec 	bl	8004e0c <lwip_htons>
 800f234:	4603      	mov	r3, r0
 800f236:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800f238:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f23a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f23e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800f242:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f244:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f248:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	891b      	ldrh	r3, [r3, #8]
 800f24e:	3b14      	subs	r3, #20
 800f250:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800f254:	e0e1      	b.n	800f41a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f256:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f258:	00db      	lsls	r3, r3, #3
 800f25a:	b29b      	uxth	r3, r3
 800f25c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f260:	4293      	cmp	r3, r2
 800f262:	bf28      	it	cs
 800f264:	4613      	movcs	r3, r2
 800f266:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f268:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f26c:	2114      	movs	r1, #20
 800f26e:	200e      	movs	r0, #14
 800f270:	f7f6 fd9c 	bl	8005dac <pbuf_alloc>
 800f274:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800f276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f278:	2b00      	cmp	r3, #0
 800f27a:	f000 80d5 	beq.w	800f428 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f280:	895b      	ldrh	r3, [r3, #10]
 800f282:	2b13      	cmp	r3, #19
 800f284:	d806      	bhi.n	800f294 <ip4_frag+0xd0>
 800f286:	4b6c      	ldr	r3, [pc, #432]	; (800f438 <ip4_frag+0x274>)
 800f288:	f44f 7249 	mov.w	r2, #804	; 0x324
 800f28c:	496d      	ldr	r1, [pc, #436]	; (800f444 <ip4_frag+0x280>)
 800f28e:	486c      	ldr	r0, [pc, #432]	; (800f440 <ip4_frag+0x27c>)
 800f290:	f000 fa16 	bl	800f6c0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f296:	685b      	ldr	r3, [r3, #4]
 800f298:	2214      	movs	r2, #20
 800f29a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f29c:	4618      	mov	r0, r3
 800f29e:	f000 f9df 	bl	800f660 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800f2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2a4:	685b      	ldr	r3, [r3, #4]
 800f2a6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800f2a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f2aa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800f2ae:	e064      	b.n	800f37a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	895a      	ldrh	r2, [r3, #10]
 800f2b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f2b6:	1ad3      	subs	r3, r2, r3
 800f2b8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	895b      	ldrh	r3, [r3, #10]
 800f2be:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f2c0:	429a      	cmp	r2, r3
 800f2c2:	d906      	bls.n	800f2d2 <ip4_frag+0x10e>
 800f2c4:	4b5c      	ldr	r3, [pc, #368]	; (800f438 <ip4_frag+0x274>)
 800f2c6:	f240 322d 	movw	r2, #813	; 0x32d
 800f2ca:	495f      	ldr	r1, [pc, #380]	; (800f448 <ip4_frag+0x284>)
 800f2cc:	485c      	ldr	r0, [pc, #368]	; (800f440 <ip4_frag+0x27c>)
 800f2ce:	f000 f9f7 	bl	800f6c0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f2d2:	8bfa      	ldrh	r2, [r7, #30]
 800f2d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f2d8:	4293      	cmp	r3, r2
 800f2da:	bf28      	it	cs
 800f2dc:	4613      	movcs	r3, r2
 800f2de:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f2e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d105      	bne.n	800f2f6 <ip4_frag+0x132>
        poff = 0;
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	60fb      	str	r3, [r7, #12]
        continue;
 800f2f4:	e041      	b.n	800f37a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f2f6:	f7ff ff0d 	bl	800f114 <ip_frag_alloc_pbuf_custom_ref>
 800f2fa:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800f2fc:	69bb      	ldr	r3, [r7, #24]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d103      	bne.n	800f30a <ip4_frag+0x146>
        pbuf_free(rambuf);
 800f302:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f304:	f7f7 f836 	bl	8006374 <pbuf_free>
        goto memerr;
 800f308:	e08f      	b.n	800f42a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f30a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f310:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f312:	4413      	add	r3, r2
 800f314:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800f318:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f31c:	9201      	str	r2, [sp, #4]
 800f31e:	9300      	str	r3, [sp, #0]
 800f320:	4603      	mov	r3, r0
 800f322:	2241      	movs	r2, #65	; 0x41
 800f324:	2000      	movs	r0, #0
 800f326:	f7f6 fe6b 	bl	8006000 <pbuf_alloced_custom>
 800f32a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800f32c:	697b      	ldr	r3, [r7, #20]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d106      	bne.n	800f340 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800f332:	69b8      	ldr	r0, [r7, #24]
 800f334:	f7ff fef6 	bl	800f124 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f338:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f33a:	f7f7 f81b 	bl	8006374 <pbuf_free>
        goto memerr;
 800f33e:	e074      	b.n	800f42a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800f340:	68f8      	ldr	r0, [r7, #12]
 800f342:	f7f7 f8b7 	bl	80064b4 <pbuf_ref>
      pcr->original = p;
 800f346:	69bb      	ldr	r3, [r7, #24]
 800f348:	68fa      	ldr	r2, [r7, #12]
 800f34a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f34c:	69bb      	ldr	r3, [r7, #24]
 800f34e:	4a3f      	ldr	r2, [pc, #252]	; (800f44c <ip4_frag+0x288>)
 800f350:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f352:	6979      	ldr	r1, [r7, #20]
 800f354:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f356:	f7f7 f8cf 	bl	80064f8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800f35a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f35e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f362:	1ad3      	subs	r3, r2, r3
 800f364:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800f368:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d004      	beq.n	800f37a <ip4_frag+0x1b6>
        poff = 0;
 800f370:	2300      	movs	r3, #0
 800f372:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f37a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d196      	bne.n	800f2b0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800f382:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f384:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f388:	4413      	add	r3, r2
 800f38a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f38c:	68bb      	ldr	r3, [r7, #8]
 800f38e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f390:	f1a3 0213 	sub.w	r2, r3, #19
 800f394:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f398:	429a      	cmp	r2, r3
 800f39a:	bfcc      	ite	gt
 800f39c:	2301      	movgt	r3, #1
 800f39e:	2300      	movle	r3, #0
 800f3a0:	b2db      	uxtb	r3, r3
 800f3a2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f3a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f3a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f3ac:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800f3ae:	6a3b      	ldr	r3, [r7, #32]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d002      	beq.n	800f3ba <ip4_frag+0x1f6>
 800f3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d003      	beq.n	800f3c2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800f3ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f3bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f3c0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f3c2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f7f5 fd21 	bl	8004e0c <lwip_htons>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	461a      	mov	r2, r3
 800f3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800f3d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f3d4:	3314      	adds	r3, #20
 800f3d6:	b29b      	uxth	r3, r3
 800f3d8:	4618      	mov	r0, r3
 800f3da:	f7f5 fd17 	bl	8004e0c <lwip_htons>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	461a      	mov	r2, r3
 800f3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3e4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800f3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	729a      	strb	r2, [r3, #10]
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	695b      	ldr	r3, [r3, #20]
 800f3f4:	687a      	ldr	r2, [r7, #4]
 800f3f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f3f8:	68b8      	ldr	r0, [r7, #8]
 800f3fa:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f3fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f3fe:	f7f6 ffb9 	bl	8006374 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800f402:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f406:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f408:	1ad3      	subs	r3, r2, r3
 800f40a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800f40e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800f412:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f414:	4413      	add	r3, r2
 800f416:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800f41a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f41e:	2b00      	cmp	r3, #0
 800f420:	f47f af19 	bne.w	800f256 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f424:	2300      	movs	r3, #0
 800f426:	e002      	b.n	800f42e <ip4_frag+0x26a>
      goto memerr;
 800f428:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800f42a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f42e:	4618      	mov	r0, r3
 800f430:	3748      	adds	r7, #72	; 0x48
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}
 800f436:	bf00      	nop
 800f438:	080132a0 	.word	0x080132a0
 800f43c:	0801347c 	.word	0x0801347c
 800f440:	080132e8 	.word	0x080132e8
 800f444:	08013498 	.word	0x08013498
 800f448:	080134b8 	.word	0x080134b8
 800f44c:	0800f15d 	.word	0x0800f15d

0800f450 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b086      	sub	sp, #24
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
 800f458:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800f45a:	230e      	movs	r3, #14
 800f45c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	895b      	ldrh	r3, [r3, #10]
 800f462:	2b0e      	cmp	r3, #14
 800f464:	d96e      	bls.n	800f544 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	7bdb      	ldrb	r3, [r3, #15]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d106      	bne.n	800f47c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f474:	3301      	adds	r3, #1
 800f476:	b2da      	uxtb	r2, r3
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	685b      	ldr	r3, [r3, #4]
 800f480:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800f482:	693b      	ldr	r3, [r7, #16]
 800f484:	7b1a      	ldrb	r2, [r3, #12]
 800f486:	7b5b      	ldrb	r3, [r3, #13]
 800f488:	021b      	lsls	r3, r3, #8
 800f48a:	4313      	orrs	r3, r2
 800f48c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f48e:	693b      	ldr	r3, [r7, #16]
 800f490:	781b      	ldrb	r3, [r3, #0]
 800f492:	f003 0301 	and.w	r3, r3, #1
 800f496:	2b00      	cmp	r3, #0
 800f498:	d023      	beq.n	800f4e2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f49a:	693b      	ldr	r3, [r7, #16]
 800f49c:	781b      	ldrb	r3, [r3, #0]
 800f49e:	2b01      	cmp	r3, #1
 800f4a0:	d10f      	bne.n	800f4c2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f4a2:	693b      	ldr	r3, [r7, #16]
 800f4a4:	785b      	ldrb	r3, [r3, #1]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d11b      	bne.n	800f4e2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f4ae:	2b5e      	cmp	r3, #94	; 0x5e
 800f4b0:	d117      	bne.n	800f4e2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	7b5b      	ldrb	r3, [r3, #13]
 800f4b6:	f043 0310 	orr.w	r3, r3, #16
 800f4ba:	b2da      	uxtb	r2, r3
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	735a      	strb	r2, [r3, #13]
 800f4c0:	e00f      	b.n	800f4e2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	2206      	movs	r2, #6
 800f4c6:	4928      	ldr	r1, [pc, #160]	; (800f568 <ethernet_input+0x118>)
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f000 f8bb 	bl	800f644 <memcmp>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d106      	bne.n	800f4e2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	7b5b      	ldrb	r3, [r3, #13]
 800f4d8:	f043 0308 	orr.w	r3, r3, #8
 800f4dc:	b2da      	uxtb	r2, r3
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800f4e2:	89fb      	ldrh	r3, [r7, #14]
 800f4e4:	2b08      	cmp	r3, #8
 800f4e6:	d003      	beq.n	800f4f0 <ethernet_input+0xa0>
 800f4e8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800f4ec:	d014      	beq.n	800f518 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800f4ee:	e032      	b.n	800f556 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f4f6:	f003 0308 	and.w	r3, r3, #8
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d024      	beq.n	800f548 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f4fe:	8afb      	ldrh	r3, [r7, #22]
 800f500:	4619      	mov	r1, r3
 800f502:	6878      	ldr	r0, [r7, #4]
 800f504:	f7f6 feb0 	bl	8006268 <pbuf_remove_header>
 800f508:	4603      	mov	r3, r0
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d11e      	bne.n	800f54c <ethernet_input+0xfc>
        ip4_input(p, netif);
 800f50e:	6839      	ldr	r1, [r7, #0]
 800f510:	6878      	ldr	r0, [r7, #4]
 800f512:	f7fe ff27 	bl	800e364 <ip4_input>
      break;
 800f516:	e013      	b.n	800f540 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f51e:	f003 0308 	and.w	r3, r3, #8
 800f522:	2b00      	cmp	r3, #0
 800f524:	d014      	beq.n	800f550 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f526:	8afb      	ldrh	r3, [r7, #22]
 800f528:	4619      	mov	r1, r3
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f7f6 fe9c 	bl	8006268 <pbuf_remove_header>
 800f530:	4603      	mov	r3, r0
 800f532:	2b00      	cmp	r3, #0
 800f534:	d10e      	bne.n	800f554 <ethernet_input+0x104>
        etharp_input(p, netif);
 800f536:	6839      	ldr	r1, [r7, #0]
 800f538:	6878      	ldr	r0, [r7, #4]
 800f53a:	f7fe f8c7 	bl	800d6cc <etharp_input>
      break;
 800f53e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f540:	2300      	movs	r3, #0
 800f542:	e00c      	b.n	800f55e <ethernet_input+0x10e>
    goto free_and_return;
 800f544:	bf00      	nop
 800f546:	e006      	b.n	800f556 <ethernet_input+0x106>
        goto free_and_return;
 800f548:	bf00      	nop
 800f54a:	e004      	b.n	800f556 <ethernet_input+0x106>
        goto free_and_return;
 800f54c:	bf00      	nop
 800f54e:	e002      	b.n	800f556 <ethernet_input+0x106>
        goto free_and_return;
 800f550:	bf00      	nop
 800f552:	e000      	b.n	800f556 <ethernet_input+0x106>
        goto free_and_return;
 800f554:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f556:	6878      	ldr	r0, [r7, #4]
 800f558:	f7f6 ff0c 	bl	8006374 <pbuf_free>
  return ERR_OK;
 800f55c:	2300      	movs	r3, #0
}
 800f55e:	4618      	mov	r0, r3
 800f560:	3718      	adds	r7, #24
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}
 800f566:	bf00      	nop
 800f568:	08013640 	.word	0x08013640

0800f56c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b086      	sub	sp, #24
 800f570:	af00      	add	r7, sp, #0
 800f572:	60f8      	str	r0, [r7, #12]
 800f574:	60b9      	str	r1, [r7, #8]
 800f576:	607a      	str	r2, [r7, #4]
 800f578:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f57a:	8c3b      	ldrh	r3, [r7, #32]
 800f57c:	4618      	mov	r0, r3
 800f57e:	f7f5 fc45 	bl	8004e0c <lwip_htons>
 800f582:	4603      	mov	r3, r0
 800f584:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f586:	210e      	movs	r1, #14
 800f588:	68b8      	ldr	r0, [r7, #8]
 800f58a:	f7f6 fe5d 	bl	8006248 <pbuf_add_header>
 800f58e:	4603      	mov	r3, r0
 800f590:	2b00      	cmp	r3, #0
 800f592:	d125      	bne.n	800f5e0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	685b      	ldr	r3, [r3, #4]
 800f598:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f59a:	693b      	ldr	r3, [r7, #16]
 800f59c:	8afa      	ldrh	r2, [r7, #22]
 800f59e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f5a0:	693b      	ldr	r3, [r7, #16]
 800f5a2:	2206      	movs	r2, #6
 800f5a4:	6839      	ldr	r1, [r7, #0]
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	f000 f85a 	bl	800f660 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f5ac:	693b      	ldr	r3, [r7, #16]
 800f5ae:	3306      	adds	r3, #6
 800f5b0:	2206      	movs	r2, #6
 800f5b2:	6879      	ldr	r1, [r7, #4]
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	f000 f853 	bl	800f660 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f5c0:	2b06      	cmp	r3, #6
 800f5c2:	d006      	beq.n	800f5d2 <ethernet_output+0x66>
 800f5c4:	4b0a      	ldr	r3, [pc, #40]	; (800f5f0 <ethernet_output+0x84>)
 800f5c6:	f44f 7299 	mov.w	r2, #306	; 0x132
 800f5ca:	490a      	ldr	r1, [pc, #40]	; (800f5f4 <ethernet_output+0x88>)
 800f5cc:	480a      	ldr	r0, [pc, #40]	; (800f5f8 <ethernet_output+0x8c>)
 800f5ce:	f000 f877 	bl	800f6c0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	699b      	ldr	r3, [r3, #24]
 800f5d6:	68b9      	ldr	r1, [r7, #8]
 800f5d8:	68f8      	ldr	r0, [r7, #12]
 800f5da:	4798      	blx	r3
 800f5dc:	4603      	mov	r3, r0
 800f5de:	e002      	b.n	800f5e6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f5e0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f5e2:	f06f 0301 	mvn.w	r3, #1
}
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	3718      	adds	r7, #24
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bd80      	pop	{r7, pc}
 800f5ee:	bf00      	nop
 800f5f0:	080134c8 	.word	0x080134c8
 800f5f4:	08013500 	.word	0x08013500
 800f5f8:	08013534 	.word	0x08013534

0800f5fc <__libc_init_array>:
 800f5fc:	b570      	push	{r4, r5, r6, lr}
 800f5fe:	4d0d      	ldr	r5, [pc, #52]	; (800f634 <__libc_init_array+0x38>)
 800f600:	4c0d      	ldr	r4, [pc, #52]	; (800f638 <__libc_init_array+0x3c>)
 800f602:	1b64      	subs	r4, r4, r5
 800f604:	10a4      	asrs	r4, r4, #2
 800f606:	2600      	movs	r6, #0
 800f608:	42a6      	cmp	r6, r4
 800f60a:	d109      	bne.n	800f620 <__libc_init_array+0x24>
 800f60c:	4d0b      	ldr	r5, [pc, #44]	; (800f63c <__libc_init_array+0x40>)
 800f60e:	4c0c      	ldr	r4, [pc, #48]	; (800f640 <__libc_init_array+0x44>)
 800f610:	f001 fa1a 	bl	8010a48 <_init>
 800f614:	1b64      	subs	r4, r4, r5
 800f616:	10a4      	asrs	r4, r4, #2
 800f618:	2600      	movs	r6, #0
 800f61a:	42a6      	cmp	r6, r4
 800f61c:	d105      	bne.n	800f62a <__libc_init_array+0x2e>
 800f61e:	bd70      	pop	{r4, r5, r6, pc}
 800f620:	f855 3b04 	ldr.w	r3, [r5], #4
 800f624:	4798      	blx	r3
 800f626:	3601      	adds	r6, #1
 800f628:	e7ee      	b.n	800f608 <__libc_init_array+0xc>
 800f62a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f62e:	4798      	blx	r3
 800f630:	3601      	adds	r6, #1
 800f632:	e7f2      	b.n	800f61a <__libc_init_array+0x1e>
 800f634:	080137a4 	.word	0x080137a4
 800f638:	080137a4 	.word	0x080137a4
 800f63c:	080137a4 	.word	0x080137a4
 800f640:	080137a8 	.word	0x080137a8

0800f644 <memcmp>:
 800f644:	b530      	push	{r4, r5, lr}
 800f646:	3901      	subs	r1, #1
 800f648:	2400      	movs	r4, #0
 800f64a:	42a2      	cmp	r2, r4
 800f64c:	d101      	bne.n	800f652 <memcmp+0xe>
 800f64e:	2000      	movs	r0, #0
 800f650:	e005      	b.n	800f65e <memcmp+0x1a>
 800f652:	5d03      	ldrb	r3, [r0, r4]
 800f654:	3401      	adds	r4, #1
 800f656:	5d0d      	ldrb	r5, [r1, r4]
 800f658:	42ab      	cmp	r3, r5
 800f65a:	d0f6      	beq.n	800f64a <memcmp+0x6>
 800f65c:	1b58      	subs	r0, r3, r5
 800f65e:	bd30      	pop	{r4, r5, pc}

0800f660 <memcpy>:
 800f660:	440a      	add	r2, r1
 800f662:	4291      	cmp	r1, r2
 800f664:	f100 33ff 	add.w	r3, r0, #4294967295
 800f668:	d100      	bne.n	800f66c <memcpy+0xc>
 800f66a:	4770      	bx	lr
 800f66c:	b510      	push	{r4, lr}
 800f66e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f672:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f676:	4291      	cmp	r1, r2
 800f678:	d1f9      	bne.n	800f66e <memcpy+0xe>
 800f67a:	bd10      	pop	{r4, pc}

0800f67c <memmove>:
 800f67c:	4288      	cmp	r0, r1
 800f67e:	b510      	push	{r4, lr}
 800f680:	eb01 0402 	add.w	r4, r1, r2
 800f684:	d902      	bls.n	800f68c <memmove+0x10>
 800f686:	4284      	cmp	r4, r0
 800f688:	4623      	mov	r3, r4
 800f68a:	d807      	bhi.n	800f69c <memmove+0x20>
 800f68c:	1e43      	subs	r3, r0, #1
 800f68e:	42a1      	cmp	r1, r4
 800f690:	d008      	beq.n	800f6a4 <memmove+0x28>
 800f692:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f696:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f69a:	e7f8      	b.n	800f68e <memmove+0x12>
 800f69c:	4402      	add	r2, r0
 800f69e:	4601      	mov	r1, r0
 800f6a0:	428a      	cmp	r2, r1
 800f6a2:	d100      	bne.n	800f6a6 <memmove+0x2a>
 800f6a4:	bd10      	pop	{r4, pc}
 800f6a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f6aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f6ae:	e7f7      	b.n	800f6a0 <memmove+0x24>

0800f6b0 <memset>:
 800f6b0:	4402      	add	r2, r0
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	4293      	cmp	r3, r2
 800f6b6:	d100      	bne.n	800f6ba <memset+0xa>
 800f6b8:	4770      	bx	lr
 800f6ba:	f803 1b01 	strb.w	r1, [r3], #1
 800f6be:	e7f9      	b.n	800f6b4 <memset+0x4>

0800f6c0 <iprintf>:
 800f6c0:	b40f      	push	{r0, r1, r2, r3}
 800f6c2:	4b0a      	ldr	r3, [pc, #40]	; (800f6ec <iprintf+0x2c>)
 800f6c4:	b513      	push	{r0, r1, r4, lr}
 800f6c6:	681c      	ldr	r4, [r3, #0]
 800f6c8:	b124      	cbz	r4, 800f6d4 <iprintf+0x14>
 800f6ca:	69a3      	ldr	r3, [r4, #24]
 800f6cc:	b913      	cbnz	r3, 800f6d4 <iprintf+0x14>
 800f6ce:	4620      	mov	r0, r4
 800f6d0:	f000 f8e4 	bl	800f89c <__sinit>
 800f6d4:	ab05      	add	r3, sp, #20
 800f6d6:	9a04      	ldr	r2, [sp, #16]
 800f6d8:	68a1      	ldr	r1, [r4, #8]
 800f6da:	9301      	str	r3, [sp, #4]
 800f6dc:	4620      	mov	r0, r4
 800f6de:	f000 fbc7 	bl	800fe70 <_vfiprintf_r>
 800f6e2:	b002      	add	sp, #8
 800f6e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6e8:	b004      	add	sp, #16
 800f6ea:	4770      	bx	lr
 800f6ec:	20000014 	.word	0x20000014

0800f6f0 <rand>:
 800f6f0:	4b17      	ldr	r3, [pc, #92]	; (800f750 <rand+0x60>)
 800f6f2:	b510      	push	{r4, lr}
 800f6f4:	681c      	ldr	r4, [r3, #0]
 800f6f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f6f8:	b9b3      	cbnz	r3, 800f728 <rand+0x38>
 800f6fa:	2018      	movs	r0, #24
 800f6fc:	f000 f980 	bl	800fa00 <malloc>
 800f700:	63a0      	str	r0, [r4, #56]	; 0x38
 800f702:	b928      	cbnz	r0, 800f710 <rand+0x20>
 800f704:	4602      	mov	r2, r0
 800f706:	4b13      	ldr	r3, [pc, #76]	; (800f754 <rand+0x64>)
 800f708:	4813      	ldr	r0, [pc, #76]	; (800f758 <rand+0x68>)
 800f70a:	214e      	movs	r1, #78	; 0x4e
 800f70c:	f000 f850 	bl	800f7b0 <__assert_func>
 800f710:	4a12      	ldr	r2, [pc, #72]	; (800f75c <rand+0x6c>)
 800f712:	4b13      	ldr	r3, [pc, #76]	; (800f760 <rand+0x70>)
 800f714:	e9c0 2300 	strd	r2, r3, [r0]
 800f718:	4b12      	ldr	r3, [pc, #72]	; (800f764 <rand+0x74>)
 800f71a:	6083      	str	r3, [r0, #8]
 800f71c:	230b      	movs	r3, #11
 800f71e:	8183      	strh	r3, [r0, #12]
 800f720:	2201      	movs	r2, #1
 800f722:	2300      	movs	r3, #0
 800f724:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800f728:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f72a:	480f      	ldr	r0, [pc, #60]	; (800f768 <rand+0x78>)
 800f72c:	690a      	ldr	r2, [r1, #16]
 800f72e:	694b      	ldr	r3, [r1, #20]
 800f730:	4c0e      	ldr	r4, [pc, #56]	; (800f76c <rand+0x7c>)
 800f732:	4350      	muls	r0, r2
 800f734:	fb04 0003 	mla	r0, r4, r3, r0
 800f738:	fba2 3404 	umull	r3, r4, r2, r4
 800f73c:	1c5a      	adds	r2, r3, #1
 800f73e:	4404      	add	r4, r0
 800f740:	f144 0000 	adc.w	r0, r4, #0
 800f744:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800f748:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f74c:	bd10      	pop	{r4, pc}
 800f74e:	bf00      	nop
 800f750:	20000014 	.word	0x20000014
 800f754:	08013654 	.word	0x08013654
 800f758:	0801366b 	.word	0x0801366b
 800f75c:	abcd330e 	.word	0xabcd330e
 800f760:	e66d1234 	.word	0xe66d1234
 800f764:	0005deec 	.word	0x0005deec
 800f768:	5851f42d 	.word	0x5851f42d
 800f76c:	4c957f2d 	.word	0x4c957f2d

0800f770 <siprintf>:
 800f770:	b40e      	push	{r1, r2, r3}
 800f772:	b500      	push	{lr}
 800f774:	b09c      	sub	sp, #112	; 0x70
 800f776:	ab1d      	add	r3, sp, #116	; 0x74
 800f778:	9002      	str	r0, [sp, #8]
 800f77a:	9006      	str	r0, [sp, #24]
 800f77c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f780:	4809      	ldr	r0, [pc, #36]	; (800f7a8 <siprintf+0x38>)
 800f782:	9107      	str	r1, [sp, #28]
 800f784:	9104      	str	r1, [sp, #16]
 800f786:	4909      	ldr	r1, [pc, #36]	; (800f7ac <siprintf+0x3c>)
 800f788:	f853 2b04 	ldr.w	r2, [r3], #4
 800f78c:	9105      	str	r1, [sp, #20]
 800f78e:	6800      	ldr	r0, [r0, #0]
 800f790:	9301      	str	r3, [sp, #4]
 800f792:	a902      	add	r1, sp, #8
 800f794:	f000 fa42 	bl	800fc1c <_svfiprintf_r>
 800f798:	9b02      	ldr	r3, [sp, #8]
 800f79a:	2200      	movs	r2, #0
 800f79c:	701a      	strb	r2, [r3, #0]
 800f79e:	b01c      	add	sp, #112	; 0x70
 800f7a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f7a4:	b003      	add	sp, #12
 800f7a6:	4770      	bx	lr
 800f7a8:	20000014 	.word	0x20000014
 800f7ac:	ffff0208 	.word	0xffff0208

0800f7b0 <__assert_func>:
 800f7b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f7b2:	4614      	mov	r4, r2
 800f7b4:	461a      	mov	r2, r3
 800f7b6:	4b09      	ldr	r3, [pc, #36]	; (800f7dc <__assert_func+0x2c>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	4605      	mov	r5, r0
 800f7bc:	68d8      	ldr	r0, [r3, #12]
 800f7be:	b14c      	cbz	r4, 800f7d4 <__assert_func+0x24>
 800f7c0:	4b07      	ldr	r3, [pc, #28]	; (800f7e0 <__assert_func+0x30>)
 800f7c2:	9100      	str	r1, [sp, #0]
 800f7c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f7c8:	4906      	ldr	r1, [pc, #24]	; (800f7e4 <__assert_func+0x34>)
 800f7ca:	462b      	mov	r3, r5
 800f7cc:	f000 f8e4 	bl	800f998 <fiprintf>
 800f7d0:	f000 ff38 	bl	8010644 <abort>
 800f7d4:	4b04      	ldr	r3, [pc, #16]	; (800f7e8 <__assert_func+0x38>)
 800f7d6:	461c      	mov	r4, r3
 800f7d8:	e7f3      	b.n	800f7c2 <__assert_func+0x12>
 800f7da:	bf00      	nop
 800f7dc:	20000014 	.word	0x20000014
 800f7e0:	080136ca 	.word	0x080136ca
 800f7e4:	080136d7 	.word	0x080136d7
 800f7e8:	08013705 	.word	0x08013705

0800f7ec <std>:
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	b510      	push	{r4, lr}
 800f7f0:	4604      	mov	r4, r0
 800f7f2:	e9c0 3300 	strd	r3, r3, [r0]
 800f7f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f7fa:	6083      	str	r3, [r0, #8]
 800f7fc:	8181      	strh	r1, [r0, #12]
 800f7fe:	6643      	str	r3, [r0, #100]	; 0x64
 800f800:	81c2      	strh	r2, [r0, #14]
 800f802:	6183      	str	r3, [r0, #24]
 800f804:	4619      	mov	r1, r3
 800f806:	2208      	movs	r2, #8
 800f808:	305c      	adds	r0, #92	; 0x5c
 800f80a:	f7ff ff51 	bl	800f6b0 <memset>
 800f80e:	4b05      	ldr	r3, [pc, #20]	; (800f824 <std+0x38>)
 800f810:	6263      	str	r3, [r4, #36]	; 0x24
 800f812:	4b05      	ldr	r3, [pc, #20]	; (800f828 <std+0x3c>)
 800f814:	62a3      	str	r3, [r4, #40]	; 0x28
 800f816:	4b05      	ldr	r3, [pc, #20]	; (800f82c <std+0x40>)
 800f818:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f81a:	4b05      	ldr	r3, [pc, #20]	; (800f830 <std+0x44>)
 800f81c:	6224      	str	r4, [r4, #32]
 800f81e:	6323      	str	r3, [r4, #48]	; 0x30
 800f820:	bd10      	pop	{r4, pc}
 800f822:	bf00      	nop
 800f824:	08010419 	.word	0x08010419
 800f828:	0801043b 	.word	0x0801043b
 800f82c:	08010473 	.word	0x08010473
 800f830:	08010497 	.word	0x08010497

0800f834 <_cleanup_r>:
 800f834:	4901      	ldr	r1, [pc, #4]	; (800f83c <_cleanup_r+0x8>)
 800f836:	f000 b8c1 	b.w	800f9bc <_fwalk_reent>
 800f83a:	bf00      	nop
 800f83c:	08010781 	.word	0x08010781

0800f840 <__sfmoreglue>:
 800f840:	b570      	push	{r4, r5, r6, lr}
 800f842:	1e4a      	subs	r2, r1, #1
 800f844:	2568      	movs	r5, #104	; 0x68
 800f846:	4355      	muls	r5, r2
 800f848:	460e      	mov	r6, r1
 800f84a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f84e:	f000 f92f 	bl	800fab0 <_malloc_r>
 800f852:	4604      	mov	r4, r0
 800f854:	b140      	cbz	r0, 800f868 <__sfmoreglue+0x28>
 800f856:	2100      	movs	r1, #0
 800f858:	e9c0 1600 	strd	r1, r6, [r0]
 800f85c:	300c      	adds	r0, #12
 800f85e:	60a0      	str	r0, [r4, #8]
 800f860:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f864:	f7ff ff24 	bl	800f6b0 <memset>
 800f868:	4620      	mov	r0, r4
 800f86a:	bd70      	pop	{r4, r5, r6, pc}

0800f86c <__sfp_lock_acquire>:
 800f86c:	4801      	ldr	r0, [pc, #4]	; (800f874 <__sfp_lock_acquire+0x8>)
 800f86e:	f000 b8c5 	b.w	800f9fc <__retarget_lock_acquire_recursive>
 800f872:	bf00      	nop
 800f874:	20006960 	.word	0x20006960

0800f878 <__sfp_lock_release>:
 800f878:	4801      	ldr	r0, [pc, #4]	; (800f880 <__sfp_lock_release+0x8>)
 800f87a:	f000 b8c0 	b.w	800f9fe <__retarget_lock_release_recursive>
 800f87e:	bf00      	nop
 800f880:	20006960 	.word	0x20006960

0800f884 <__sinit_lock_acquire>:
 800f884:	4801      	ldr	r0, [pc, #4]	; (800f88c <__sinit_lock_acquire+0x8>)
 800f886:	f000 b8b9 	b.w	800f9fc <__retarget_lock_acquire_recursive>
 800f88a:	bf00      	nop
 800f88c:	2000695b 	.word	0x2000695b

0800f890 <__sinit_lock_release>:
 800f890:	4801      	ldr	r0, [pc, #4]	; (800f898 <__sinit_lock_release+0x8>)
 800f892:	f000 b8b4 	b.w	800f9fe <__retarget_lock_release_recursive>
 800f896:	bf00      	nop
 800f898:	2000695b 	.word	0x2000695b

0800f89c <__sinit>:
 800f89c:	b510      	push	{r4, lr}
 800f89e:	4604      	mov	r4, r0
 800f8a0:	f7ff fff0 	bl	800f884 <__sinit_lock_acquire>
 800f8a4:	69a3      	ldr	r3, [r4, #24]
 800f8a6:	b11b      	cbz	r3, 800f8b0 <__sinit+0x14>
 800f8a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f8ac:	f7ff bff0 	b.w	800f890 <__sinit_lock_release>
 800f8b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f8b4:	6523      	str	r3, [r4, #80]	; 0x50
 800f8b6:	4b13      	ldr	r3, [pc, #76]	; (800f904 <__sinit+0x68>)
 800f8b8:	4a13      	ldr	r2, [pc, #76]	; (800f908 <__sinit+0x6c>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	62a2      	str	r2, [r4, #40]	; 0x28
 800f8be:	42a3      	cmp	r3, r4
 800f8c0:	bf04      	itt	eq
 800f8c2:	2301      	moveq	r3, #1
 800f8c4:	61a3      	streq	r3, [r4, #24]
 800f8c6:	4620      	mov	r0, r4
 800f8c8:	f000 f820 	bl	800f90c <__sfp>
 800f8cc:	6060      	str	r0, [r4, #4]
 800f8ce:	4620      	mov	r0, r4
 800f8d0:	f000 f81c 	bl	800f90c <__sfp>
 800f8d4:	60a0      	str	r0, [r4, #8]
 800f8d6:	4620      	mov	r0, r4
 800f8d8:	f000 f818 	bl	800f90c <__sfp>
 800f8dc:	2200      	movs	r2, #0
 800f8de:	60e0      	str	r0, [r4, #12]
 800f8e0:	2104      	movs	r1, #4
 800f8e2:	6860      	ldr	r0, [r4, #4]
 800f8e4:	f7ff ff82 	bl	800f7ec <std>
 800f8e8:	68a0      	ldr	r0, [r4, #8]
 800f8ea:	2201      	movs	r2, #1
 800f8ec:	2109      	movs	r1, #9
 800f8ee:	f7ff ff7d 	bl	800f7ec <std>
 800f8f2:	68e0      	ldr	r0, [r4, #12]
 800f8f4:	2202      	movs	r2, #2
 800f8f6:	2112      	movs	r1, #18
 800f8f8:	f7ff ff78 	bl	800f7ec <std>
 800f8fc:	2301      	movs	r3, #1
 800f8fe:	61a3      	str	r3, [r4, #24]
 800f900:	e7d2      	b.n	800f8a8 <__sinit+0xc>
 800f902:	bf00      	nop
 800f904:	08013650 	.word	0x08013650
 800f908:	0800f835 	.word	0x0800f835

0800f90c <__sfp>:
 800f90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f90e:	4607      	mov	r7, r0
 800f910:	f7ff ffac 	bl	800f86c <__sfp_lock_acquire>
 800f914:	4b1e      	ldr	r3, [pc, #120]	; (800f990 <__sfp+0x84>)
 800f916:	681e      	ldr	r6, [r3, #0]
 800f918:	69b3      	ldr	r3, [r6, #24]
 800f91a:	b913      	cbnz	r3, 800f922 <__sfp+0x16>
 800f91c:	4630      	mov	r0, r6
 800f91e:	f7ff ffbd 	bl	800f89c <__sinit>
 800f922:	3648      	adds	r6, #72	; 0x48
 800f924:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f928:	3b01      	subs	r3, #1
 800f92a:	d503      	bpl.n	800f934 <__sfp+0x28>
 800f92c:	6833      	ldr	r3, [r6, #0]
 800f92e:	b30b      	cbz	r3, 800f974 <__sfp+0x68>
 800f930:	6836      	ldr	r6, [r6, #0]
 800f932:	e7f7      	b.n	800f924 <__sfp+0x18>
 800f934:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f938:	b9d5      	cbnz	r5, 800f970 <__sfp+0x64>
 800f93a:	4b16      	ldr	r3, [pc, #88]	; (800f994 <__sfp+0x88>)
 800f93c:	60e3      	str	r3, [r4, #12]
 800f93e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f942:	6665      	str	r5, [r4, #100]	; 0x64
 800f944:	f000 f859 	bl	800f9fa <__retarget_lock_init_recursive>
 800f948:	f7ff ff96 	bl	800f878 <__sfp_lock_release>
 800f94c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f950:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f954:	6025      	str	r5, [r4, #0]
 800f956:	61a5      	str	r5, [r4, #24]
 800f958:	2208      	movs	r2, #8
 800f95a:	4629      	mov	r1, r5
 800f95c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f960:	f7ff fea6 	bl	800f6b0 <memset>
 800f964:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f968:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f96c:	4620      	mov	r0, r4
 800f96e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f970:	3468      	adds	r4, #104	; 0x68
 800f972:	e7d9      	b.n	800f928 <__sfp+0x1c>
 800f974:	2104      	movs	r1, #4
 800f976:	4638      	mov	r0, r7
 800f978:	f7ff ff62 	bl	800f840 <__sfmoreglue>
 800f97c:	4604      	mov	r4, r0
 800f97e:	6030      	str	r0, [r6, #0]
 800f980:	2800      	cmp	r0, #0
 800f982:	d1d5      	bne.n	800f930 <__sfp+0x24>
 800f984:	f7ff ff78 	bl	800f878 <__sfp_lock_release>
 800f988:	230c      	movs	r3, #12
 800f98a:	603b      	str	r3, [r7, #0]
 800f98c:	e7ee      	b.n	800f96c <__sfp+0x60>
 800f98e:	bf00      	nop
 800f990:	08013650 	.word	0x08013650
 800f994:	ffff0001 	.word	0xffff0001

0800f998 <fiprintf>:
 800f998:	b40e      	push	{r1, r2, r3}
 800f99a:	b503      	push	{r0, r1, lr}
 800f99c:	4601      	mov	r1, r0
 800f99e:	ab03      	add	r3, sp, #12
 800f9a0:	4805      	ldr	r0, [pc, #20]	; (800f9b8 <fiprintf+0x20>)
 800f9a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9a6:	6800      	ldr	r0, [r0, #0]
 800f9a8:	9301      	str	r3, [sp, #4]
 800f9aa:	f000 fa61 	bl	800fe70 <_vfiprintf_r>
 800f9ae:	b002      	add	sp, #8
 800f9b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f9b4:	b003      	add	sp, #12
 800f9b6:	4770      	bx	lr
 800f9b8:	20000014 	.word	0x20000014

0800f9bc <_fwalk_reent>:
 800f9bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9c0:	4606      	mov	r6, r0
 800f9c2:	4688      	mov	r8, r1
 800f9c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f9c8:	2700      	movs	r7, #0
 800f9ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f9ce:	f1b9 0901 	subs.w	r9, r9, #1
 800f9d2:	d505      	bpl.n	800f9e0 <_fwalk_reent+0x24>
 800f9d4:	6824      	ldr	r4, [r4, #0]
 800f9d6:	2c00      	cmp	r4, #0
 800f9d8:	d1f7      	bne.n	800f9ca <_fwalk_reent+0xe>
 800f9da:	4638      	mov	r0, r7
 800f9dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9e0:	89ab      	ldrh	r3, [r5, #12]
 800f9e2:	2b01      	cmp	r3, #1
 800f9e4:	d907      	bls.n	800f9f6 <_fwalk_reent+0x3a>
 800f9e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f9ea:	3301      	adds	r3, #1
 800f9ec:	d003      	beq.n	800f9f6 <_fwalk_reent+0x3a>
 800f9ee:	4629      	mov	r1, r5
 800f9f0:	4630      	mov	r0, r6
 800f9f2:	47c0      	blx	r8
 800f9f4:	4307      	orrs	r7, r0
 800f9f6:	3568      	adds	r5, #104	; 0x68
 800f9f8:	e7e9      	b.n	800f9ce <_fwalk_reent+0x12>

0800f9fa <__retarget_lock_init_recursive>:
 800f9fa:	4770      	bx	lr

0800f9fc <__retarget_lock_acquire_recursive>:
 800f9fc:	4770      	bx	lr

0800f9fe <__retarget_lock_release_recursive>:
 800f9fe:	4770      	bx	lr

0800fa00 <malloc>:
 800fa00:	4b02      	ldr	r3, [pc, #8]	; (800fa0c <malloc+0xc>)
 800fa02:	4601      	mov	r1, r0
 800fa04:	6818      	ldr	r0, [r3, #0]
 800fa06:	f000 b853 	b.w	800fab0 <_malloc_r>
 800fa0a:	bf00      	nop
 800fa0c:	20000014 	.word	0x20000014

0800fa10 <_free_r>:
 800fa10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fa12:	2900      	cmp	r1, #0
 800fa14:	d048      	beq.n	800faa8 <_free_r+0x98>
 800fa16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa1a:	9001      	str	r0, [sp, #4]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	f1a1 0404 	sub.w	r4, r1, #4
 800fa22:	bfb8      	it	lt
 800fa24:	18e4      	addlt	r4, r4, r3
 800fa26:	f000 ff5d 	bl	80108e4 <__malloc_lock>
 800fa2a:	4a20      	ldr	r2, [pc, #128]	; (800faac <_free_r+0x9c>)
 800fa2c:	9801      	ldr	r0, [sp, #4]
 800fa2e:	6813      	ldr	r3, [r2, #0]
 800fa30:	4615      	mov	r5, r2
 800fa32:	b933      	cbnz	r3, 800fa42 <_free_r+0x32>
 800fa34:	6063      	str	r3, [r4, #4]
 800fa36:	6014      	str	r4, [r2, #0]
 800fa38:	b003      	add	sp, #12
 800fa3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fa3e:	f000 bf57 	b.w	80108f0 <__malloc_unlock>
 800fa42:	42a3      	cmp	r3, r4
 800fa44:	d90b      	bls.n	800fa5e <_free_r+0x4e>
 800fa46:	6821      	ldr	r1, [r4, #0]
 800fa48:	1862      	adds	r2, r4, r1
 800fa4a:	4293      	cmp	r3, r2
 800fa4c:	bf04      	itt	eq
 800fa4e:	681a      	ldreq	r2, [r3, #0]
 800fa50:	685b      	ldreq	r3, [r3, #4]
 800fa52:	6063      	str	r3, [r4, #4]
 800fa54:	bf04      	itt	eq
 800fa56:	1852      	addeq	r2, r2, r1
 800fa58:	6022      	streq	r2, [r4, #0]
 800fa5a:	602c      	str	r4, [r5, #0]
 800fa5c:	e7ec      	b.n	800fa38 <_free_r+0x28>
 800fa5e:	461a      	mov	r2, r3
 800fa60:	685b      	ldr	r3, [r3, #4]
 800fa62:	b10b      	cbz	r3, 800fa68 <_free_r+0x58>
 800fa64:	42a3      	cmp	r3, r4
 800fa66:	d9fa      	bls.n	800fa5e <_free_r+0x4e>
 800fa68:	6811      	ldr	r1, [r2, #0]
 800fa6a:	1855      	adds	r5, r2, r1
 800fa6c:	42a5      	cmp	r5, r4
 800fa6e:	d10b      	bne.n	800fa88 <_free_r+0x78>
 800fa70:	6824      	ldr	r4, [r4, #0]
 800fa72:	4421      	add	r1, r4
 800fa74:	1854      	adds	r4, r2, r1
 800fa76:	42a3      	cmp	r3, r4
 800fa78:	6011      	str	r1, [r2, #0]
 800fa7a:	d1dd      	bne.n	800fa38 <_free_r+0x28>
 800fa7c:	681c      	ldr	r4, [r3, #0]
 800fa7e:	685b      	ldr	r3, [r3, #4]
 800fa80:	6053      	str	r3, [r2, #4]
 800fa82:	4421      	add	r1, r4
 800fa84:	6011      	str	r1, [r2, #0]
 800fa86:	e7d7      	b.n	800fa38 <_free_r+0x28>
 800fa88:	d902      	bls.n	800fa90 <_free_r+0x80>
 800fa8a:	230c      	movs	r3, #12
 800fa8c:	6003      	str	r3, [r0, #0]
 800fa8e:	e7d3      	b.n	800fa38 <_free_r+0x28>
 800fa90:	6825      	ldr	r5, [r4, #0]
 800fa92:	1961      	adds	r1, r4, r5
 800fa94:	428b      	cmp	r3, r1
 800fa96:	bf04      	itt	eq
 800fa98:	6819      	ldreq	r1, [r3, #0]
 800fa9a:	685b      	ldreq	r3, [r3, #4]
 800fa9c:	6063      	str	r3, [r4, #4]
 800fa9e:	bf04      	itt	eq
 800faa0:	1949      	addeq	r1, r1, r5
 800faa2:	6021      	streq	r1, [r4, #0]
 800faa4:	6054      	str	r4, [r2, #4]
 800faa6:	e7c7      	b.n	800fa38 <_free_r+0x28>
 800faa8:	b003      	add	sp, #12
 800faaa:	bd30      	pop	{r4, r5, pc}
 800faac:	20000210 	.word	0x20000210

0800fab0 <_malloc_r>:
 800fab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fab2:	1ccd      	adds	r5, r1, #3
 800fab4:	f025 0503 	bic.w	r5, r5, #3
 800fab8:	3508      	adds	r5, #8
 800faba:	2d0c      	cmp	r5, #12
 800fabc:	bf38      	it	cc
 800fabe:	250c      	movcc	r5, #12
 800fac0:	2d00      	cmp	r5, #0
 800fac2:	4606      	mov	r6, r0
 800fac4:	db01      	blt.n	800faca <_malloc_r+0x1a>
 800fac6:	42a9      	cmp	r1, r5
 800fac8:	d903      	bls.n	800fad2 <_malloc_r+0x22>
 800faca:	230c      	movs	r3, #12
 800facc:	6033      	str	r3, [r6, #0]
 800face:	2000      	movs	r0, #0
 800fad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fad2:	f000 ff07 	bl	80108e4 <__malloc_lock>
 800fad6:	4921      	ldr	r1, [pc, #132]	; (800fb5c <_malloc_r+0xac>)
 800fad8:	680a      	ldr	r2, [r1, #0]
 800fada:	4614      	mov	r4, r2
 800fadc:	b99c      	cbnz	r4, 800fb06 <_malloc_r+0x56>
 800fade:	4f20      	ldr	r7, [pc, #128]	; (800fb60 <_malloc_r+0xb0>)
 800fae0:	683b      	ldr	r3, [r7, #0]
 800fae2:	b923      	cbnz	r3, 800faee <_malloc_r+0x3e>
 800fae4:	4621      	mov	r1, r4
 800fae6:	4630      	mov	r0, r6
 800fae8:	f000 fc86 	bl	80103f8 <_sbrk_r>
 800faec:	6038      	str	r0, [r7, #0]
 800faee:	4629      	mov	r1, r5
 800faf0:	4630      	mov	r0, r6
 800faf2:	f000 fc81 	bl	80103f8 <_sbrk_r>
 800faf6:	1c43      	adds	r3, r0, #1
 800faf8:	d123      	bne.n	800fb42 <_malloc_r+0x92>
 800fafa:	230c      	movs	r3, #12
 800fafc:	6033      	str	r3, [r6, #0]
 800fafe:	4630      	mov	r0, r6
 800fb00:	f000 fef6 	bl	80108f0 <__malloc_unlock>
 800fb04:	e7e3      	b.n	800face <_malloc_r+0x1e>
 800fb06:	6823      	ldr	r3, [r4, #0]
 800fb08:	1b5b      	subs	r3, r3, r5
 800fb0a:	d417      	bmi.n	800fb3c <_malloc_r+0x8c>
 800fb0c:	2b0b      	cmp	r3, #11
 800fb0e:	d903      	bls.n	800fb18 <_malloc_r+0x68>
 800fb10:	6023      	str	r3, [r4, #0]
 800fb12:	441c      	add	r4, r3
 800fb14:	6025      	str	r5, [r4, #0]
 800fb16:	e004      	b.n	800fb22 <_malloc_r+0x72>
 800fb18:	6863      	ldr	r3, [r4, #4]
 800fb1a:	42a2      	cmp	r2, r4
 800fb1c:	bf0c      	ite	eq
 800fb1e:	600b      	streq	r3, [r1, #0]
 800fb20:	6053      	strne	r3, [r2, #4]
 800fb22:	4630      	mov	r0, r6
 800fb24:	f000 fee4 	bl	80108f0 <__malloc_unlock>
 800fb28:	f104 000b 	add.w	r0, r4, #11
 800fb2c:	1d23      	adds	r3, r4, #4
 800fb2e:	f020 0007 	bic.w	r0, r0, #7
 800fb32:	1ac2      	subs	r2, r0, r3
 800fb34:	d0cc      	beq.n	800fad0 <_malloc_r+0x20>
 800fb36:	1a1b      	subs	r3, r3, r0
 800fb38:	50a3      	str	r3, [r4, r2]
 800fb3a:	e7c9      	b.n	800fad0 <_malloc_r+0x20>
 800fb3c:	4622      	mov	r2, r4
 800fb3e:	6864      	ldr	r4, [r4, #4]
 800fb40:	e7cc      	b.n	800fadc <_malloc_r+0x2c>
 800fb42:	1cc4      	adds	r4, r0, #3
 800fb44:	f024 0403 	bic.w	r4, r4, #3
 800fb48:	42a0      	cmp	r0, r4
 800fb4a:	d0e3      	beq.n	800fb14 <_malloc_r+0x64>
 800fb4c:	1a21      	subs	r1, r4, r0
 800fb4e:	4630      	mov	r0, r6
 800fb50:	f000 fc52 	bl	80103f8 <_sbrk_r>
 800fb54:	3001      	adds	r0, #1
 800fb56:	d1dd      	bne.n	800fb14 <_malloc_r+0x64>
 800fb58:	e7cf      	b.n	800fafa <_malloc_r+0x4a>
 800fb5a:	bf00      	nop
 800fb5c:	20000210 	.word	0x20000210
 800fb60:	20000214 	.word	0x20000214

0800fb64 <__ssputs_r>:
 800fb64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb68:	688e      	ldr	r6, [r1, #8]
 800fb6a:	429e      	cmp	r6, r3
 800fb6c:	4682      	mov	sl, r0
 800fb6e:	460c      	mov	r4, r1
 800fb70:	4690      	mov	r8, r2
 800fb72:	461f      	mov	r7, r3
 800fb74:	d838      	bhi.n	800fbe8 <__ssputs_r+0x84>
 800fb76:	898a      	ldrh	r2, [r1, #12]
 800fb78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fb7c:	d032      	beq.n	800fbe4 <__ssputs_r+0x80>
 800fb7e:	6825      	ldr	r5, [r4, #0]
 800fb80:	6909      	ldr	r1, [r1, #16]
 800fb82:	eba5 0901 	sub.w	r9, r5, r1
 800fb86:	6965      	ldr	r5, [r4, #20]
 800fb88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fb8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fb90:	3301      	adds	r3, #1
 800fb92:	444b      	add	r3, r9
 800fb94:	106d      	asrs	r5, r5, #1
 800fb96:	429d      	cmp	r5, r3
 800fb98:	bf38      	it	cc
 800fb9a:	461d      	movcc	r5, r3
 800fb9c:	0553      	lsls	r3, r2, #21
 800fb9e:	d531      	bpl.n	800fc04 <__ssputs_r+0xa0>
 800fba0:	4629      	mov	r1, r5
 800fba2:	f7ff ff85 	bl	800fab0 <_malloc_r>
 800fba6:	4606      	mov	r6, r0
 800fba8:	b950      	cbnz	r0, 800fbc0 <__ssputs_r+0x5c>
 800fbaa:	230c      	movs	r3, #12
 800fbac:	f8ca 3000 	str.w	r3, [sl]
 800fbb0:	89a3      	ldrh	r3, [r4, #12]
 800fbb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbb6:	81a3      	strh	r3, [r4, #12]
 800fbb8:	f04f 30ff 	mov.w	r0, #4294967295
 800fbbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbc0:	6921      	ldr	r1, [r4, #16]
 800fbc2:	464a      	mov	r2, r9
 800fbc4:	f7ff fd4c 	bl	800f660 <memcpy>
 800fbc8:	89a3      	ldrh	r3, [r4, #12]
 800fbca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fbce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbd2:	81a3      	strh	r3, [r4, #12]
 800fbd4:	6126      	str	r6, [r4, #16]
 800fbd6:	6165      	str	r5, [r4, #20]
 800fbd8:	444e      	add	r6, r9
 800fbda:	eba5 0509 	sub.w	r5, r5, r9
 800fbde:	6026      	str	r6, [r4, #0]
 800fbe0:	60a5      	str	r5, [r4, #8]
 800fbe2:	463e      	mov	r6, r7
 800fbe4:	42be      	cmp	r6, r7
 800fbe6:	d900      	bls.n	800fbea <__ssputs_r+0x86>
 800fbe8:	463e      	mov	r6, r7
 800fbea:	4632      	mov	r2, r6
 800fbec:	6820      	ldr	r0, [r4, #0]
 800fbee:	4641      	mov	r1, r8
 800fbf0:	f7ff fd44 	bl	800f67c <memmove>
 800fbf4:	68a3      	ldr	r3, [r4, #8]
 800fbf6:	6822      	ldr	r2, [r4, #0]
 800fbf8:	1b9b      	subs	r3, r3, r6
 800fbfa:	4432      	add	r2, r6
 800fbfc:	60a3      	str	r3, [r4, #8]
 800fbfe:	6022      	str	r2, [r4, #0]
 800fc00:	2000      	movs	r0, #0
 800fc02:	e7db      	b.n	800fbbc <__ssputs_r+0x58>
 800fc04:	462a      	mov	r2, r5
 800fc06:	f000 fe79 	bl	80108fc <_realloc_r>
 800fc0a:	4606      	mov	r6, r0
 800fc0c:	2800      	cmp	r0, #0
 800fc0e:	d1e1      	bne.n	800fbd4 <__ssputs_r+0x70>
 800fc10:	6921      	ldr	r1, [r4, #16]
 800fc12:	4650      	mov	r0, sl
 800fc14:	f7ff fefc 	bl	800fa10 <_free_r>
 800fc18:	e7c7      	b.n	800fbaa <__ssputs_r+0x46>
	...

0800fc1c <_svfiprintf_r>:
 800fc1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc20:	4698      	mov	r8, r3
 800fc22:	898b      	ldrh	r3, [r1, #12]
 800fc24:	061b      	lsls	r3, r3, #24
 800fc26:	b09d      	sub	sp, #116	; 0x74
 800fc28:	4607      	mov	r7, r0
 800fc2a:	460d      	mov	r5, r1
 800fc2c:	4614      	mov	r4, r2
 800fc2e:	d50e      	bpl.n	800fc4e <_svfiprintf_r+0x32>
 800fc30:	690b      	ldr	r3, [r1, #16]
 800fc32:	b963      	cbnz	r3, 800fc4e <_svfiprintf_r+0x32>
 800fc34:	2140      	movs	r1, #64	; 0x40
 800fc36:	f7ff ff3b 	bl	800fab0 <_malloc_r>
 800fc3a:	6028      	str	r0, [r5, #0]
 800fc3c:	6128      	str	r0, [r5, #16]
 800fc3e:	b920      	cbnz	r0, 800fc4a <_svfiprintf_r+0x2e>
 800fc40:	230c      	movs	r3, #12
 800fc42:	603b      	str	r3, [r7, #0]
 800fc44:	f04f 30ff 	mov.w	r0, #4294967295
 800fc48:	e0d1      	b.n	800fdee <_svfiprintf_r+0x1d2>
 800fc4a:	2340      	movs	r3, #64	; 0x40
 800fc4c:	616b      	str	r3, [r5, #20]
 800fc4e:	2300      	movs	r3, #0
 800fc50:	9309      	str	r3, [sp, #36]	; 0x24
 800fc52:	2320      	movs	r3, #32
 800fc54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fc58:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc5c:	2330      	movs	r3, #48	; 0x30
 800fc5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fe08 <_svfiprintf_r+0x1ec>
 800fc62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fc66:	f04f 0901 	mov.w	r9, #1
 800fc6a:	4623      	mov	r3, r4
 800fc6c:	469a      	mov	sl, r3
 800fc6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc72:	b10a      	cbz	r2, 800fc78 <_svfiprintf_r+0x5c>
 800fc74:	2a25      	cmp	r2, #37	; 0x25
 800fc76:	d1f9      	bne.n	800fc6c <_svfiprintf_r+0x50>
 800fc78:	ebba 0b04 	subs.w	fp, sl, r4
 800fc7c:	d00b      	beq.n	800fc96 <_svfiprintf_r+0x7a>
 800fc7e:	465b      	mov	r3, fp
 800fc80:	4622      	mov	r2, r4
 800fc82:	4629      	mov	r1, r5
 800fc84:	4638      	mov	r0, r7
 800fc86:	f7ff ff6d 	bl	800fb64 <__ssputs_r>
 800fc8a:	3001      	adds	r0, #1
 800fc8c:	f000 80aa 	beq.w	800fde4 <_svfiprintf_r+0x1c8>
 800fc90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc92:	445a      	add	r2, fp
 800fc94:	9209      	str	r2, [sp, #36]	; 0x24
 800fc96:	f89a 3000 	ldrb.w	r3, [sl]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	f000 80a2 	beq.w	800fde4 <_svfiprintf_r+0x1c8>
 800fca0:	2300      	movs	r3, #0
 800fca2:	f04f 32ff 	mov.w	r2, #4294967295
 800fca6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fcaa:	f10a 0a01 	add.w	sl, sl, #1
 800fcae:	9304      	str	r3, [sp, #16]
 800fcb0:	9307      	str	r3, [sp, #28]
 800fcb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fcb6:	931a      	str	r3, [sp, #104]	; 0x68
 800fcb8:	4654      	mov	r4, sl
 800fcba:	2205      	movs	r2, #5
 800fcbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcc0:	4851      	ldr	r0, [pc, #324]	; (800fe08 <_svfiprintf_r+0x1ec>)
 800fcc2:	f7f0 faad 	bl	8000220 <memchr>
 800fcc6:	9a04      	ldr	r2, [sp, #16]
 800fcc8:	b9d8      	cbnz	r0, 800fd02 <_svfiprintf_r+0xe6>
 800fcca:	06d0      	lsls	r0, r2, #27
 800fccc:	bf44      	itt	mi
 800fcce:	2320      	movmi	r3, #32
 800fcd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fcd4:	0711      	lsls	r1, r2, #28
 800fcd6:	bf44      	itt	mi
 800fcd8:	232b      	movmi	r3, #43	; 0x2b
 800fcda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fcde:	f89a 3000 	ldrb.w	r3, [sl]
 800fce2:	2b2a      	cmp	r3, #42	; 0x2a
 800fce4:	d015      	beq.n	800fd12 <_svfiprintf_r+0xf6>
 800fce6:	9a07      	ldr	r2, [sp, #28]
 800fce8:	4654      	mov	r4, sl
 800fcea:	2000      	movs	r0, #0
 800fcec:	f04f 0c0a 	mov.w	ip, #10
 800fcf0:	4621      	mov	r1, r4
 800fcf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fcf6:	3b30      	subs	r3, #48	; 0x30
 800fcf8:	2b09      	cmp	r3, #9
 800fcfa:	d94e      	bls.n	800fd9a <_svfiprintf_r+0x17e>
 800fcfc:	b1b0      	cbz	r0, 800fd2c <_svfiprintf_r+0x110>
 800fcfe:	9207      	str	r2, [sp, #28]
 800fd00:	e014      	b.n	800fd2c <_svfiprintf_r+0x110>
 800fd02:	eba0 0308 	sub.w	r3, r0, r8
 800fd06:	fa09 f303 	lsl.w	r3, r9, r3
 800fd0a:	4313      	orrs	r3, r2
 800fd0c:	9304      	str	r3, [sp, #16]
 800fd0e:	46a2      	mov	sl, r4
 800fd10:	e7d2      	b.n	800fcb8 <_svfiprintf_r+0x9c>
 800fd12:	9b03      	ldr	r3, [sp, #12]
 800fd14:	1d19      	adds	r1, r3, #4
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	9103      	str	r1, [sp, #12]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	bfbb      	ittet	lt
 800fd1e:	425b      	neglt	r3, r3
 800fd20:	f042 0202 	orrlt.w	r2, r2, #2
 800fd24:	9307      	strge	r3, [sp, #28]
 800fd26:	9307      	strlt	r3, [sp, #28]
 800fd28:	bfb8      	it	lt
 800fd2a:	9204      	strlt	r2, [sp, #16]
 800fd2c:	7823      	ldrb	r3, [r4, #0]
 800fd2e:	2b2e      	cmp	r3, #46	; 0x2e
 800fd30:	d10c      	bne.n	800fd4c <_svfiprintf_r+0x130>
 800fd32:	7863      	ldrb	r3, [r4, #1]
 800fd34:	2b2a      	cmp	r3, #42	; 0x2a
 800fd36:	d135      	bne.n	800fda4 <_svfiprintf_r+0x188>
 800fd38:	9b03      	ldr	r3, [sp, #12]
 800fd3a:	1d1a      	adds	r2, r3, #4
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	9203      	str	r2, [sp, #12]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	bfb8      	it	lt
 800fd44:	f04f 33ff 	movlt.w	r3, #4294967295
 800fd48:	3402      	adds	r4, #2
 800fd4a:	9305      	str	r3, [sp, #20]
 800fd4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fe18 <_svfiprintf_r+0x1fc>
 800fd50:	7821      	ldrb	r1, [r4, #0]
 800fd52:	2203      	movs	r2, #3
 800fd54:	4650      	mov	r0, sl
 800fd56:	f7f0 fa63 	bl	8000220 <memchr>
 800fd5a:	b140      	cbz	r0, 800fd6e <_svfiprintf_r+0x152>
 800fd5c:	2340      	movs	r3, #64	; 0x40
 800fd5e:	eba0 000a 	sub.w	r0, r0, sl
 800fd62:	fa03 f000 	lsl.w	r0, r3, r0
 800fd66:	9b04      	ldr	r3, [sp, #16]
 800fd68:	4303      	orrs	r3, r0
 800fd6a:	3401      	adds	r4, #1
 800fd6c:	9304      	str	r3, [sp, #16]
 800fd6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd72:	4826      	ldr	r0, [pc, #152]	; (800fe0c <_svfiprintf_r+0x1f0>)
 800fd74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fd78:	2206      	movs	r2, #6
 800fd7a:	f7f0 fa51 	bl	8000220 <memchr>
 800fd7e:	2800      	cmp	r0, #0
 800fd80:	d038      	beq.n	800fdf4 <_svfiprintf_r+0x1d8>
 800fd82:	4b23      	ldr	r3, [pc, #140]	; (800fe10 <_svfiprintf_r+0x1f4>)
 800fd84:	bb1b      	cbnz	r3, 800fdce <_svfiprintf_r+0x1b2>
 800fd86:	9b03      	ldr	r3, [sp, #12]
 800fd88:	3307      	adds	r3, #7
 800fd8a:	f023 0307 	bic.w	r3, r3, #7
 800fd8e:	3308      	adds	r3, #8
 800fd90:	9303      	str	r3, [sp, #12]
 800fd92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd94:	4433      	add	r3, r6
 800fd96:	9309      	str	r3, [sp, #36]	; 0x24
 800fd98:	e767      	b.n	800fc6a <_svfiprintf_r+0x4e>
 800fd9a:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd9e:	460c      	mov	r4, r1
 800fda0:	2001      	movs	r0, #1
 800fda2:	e7a5      	b.n	800fcf0 <_svfiprintf_r+0xd4>
 800fda4:	2300      	movs	r3, #0
 800fda6:	3401      	adds	r4, #1
 800fda8:	9305      	str	r3, [sp, #20]
 800fdaa:	4619      	mov	r1, r3
 800fdac:	f04f 0c0a 	mov.w	ip, #10
 800fdb0:	4620      	mov	r0, r4
 800fdb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fdb6:	3a30      	subs	r2, #48	; 0x30
 800fdb8:	2a09      	cmp	r2, #9
 800fdba:	d903      	bls.n	800fdc4 <_svfiprintf_r+0x1a8>
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d0c5      	beq.n	800fd4c <_svfiprintf_r+0x130>
 800fdc0:	9105      	str	r1, [sp, #20]
 800fdc2:	e7c3      	b.n	800fd4c <_svfiprintf_r+0x130>
 800fdc4:	fb0c 2101 	mla	r1, ip, r1, r2
 800fdc8:	4604      	mov	r4, r0
 800fdca:	2301      	movs	r3, #1
 800fdcc:	e7f0      	b.n	800fdb0 <_svfiprintf_r+0x194>
 800fdce:	ab03      	add	r3, sp, #12
 800fdd0:	9300      	str	r3, [sp, #0]
 800fdd2:	462a      	mov	r2, r5
 800fdd4:	4b0f      	ldr	r3, [pc, #60]	; (800fe14 <_svfiprintf_r+0x1f8>)
 800fdd6:	a904      	add	r1, sp, #16
 800fdd8:	4638      	mov	r0, r7
 800fdda:	f3af 8000 	nop.w
 800fdde:	1c42      	adds	r2, r0, #1
 800fde0:	4606      	mov	r6, r0
 800fde2:	d1d6      	bne.n	800fd92 <_svfiprintf_r+0x176>
 800fde4:	89ab      	ldrh	r3, [r5, #12]
 800fde6:	065b      	lsls	r3, r3, #25
 800fde8:	f53f af2c 	bmi.w	800fc44 <_svfiprintf_r+0x28>
 800fdec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fdee:	b01d      	add	sp, #116	; 0x74
 800fdf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdf4:	ab03      	add	r3, sp, #12
 800fdf6:	9300      	str	r3, [sp, #0]
 800fdf8:	462a      	mov	r2, r5
 800fdfa:	4b06      	ldr	r3, [pc, #24]	; (800fe14 <_svfiprintf_r+0x1f8>)
 800fdfc:	a904      	add	r1, sp, #16
 800fdfe:	4638      	mov	r0, r7
 800fe00:	f000 f9d4 	bl	80101ac <_printf_i>
 800fe04:	e7eb      	b.n	800fdde <_svfiprintf_r+0x1c2>
 800fe06:	bf00      	nop
 800fe08:	08013768 	.word	0x08013768
 800fe0c:	08013772 	.word	0x08013772
 800fe10:	00000000 	.word	0x00000000
 800fe14:	0800fb65 	.word	0x0800fb65
 800fe18:	0801376e 	.word	0x0801376e

0800fe1c <__sfputc_r>:
 800fe1c:	6893      	ldr	r3, [r2, #8]
 800fe1e:	3b01      	subs	r3, #1
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	b410      	push	{r4}
 800fe24:	6093      	str	r3, [r2, #8]
 800fe26:	da08      	bge.n	800fe3a <__sfputc_r+0x1e>
 800fe28:	6994      	ldr	r4, [r2, #24]
 800fe2a:	42a3      	cmp	r3, r4
 800fe2c:	db01      	blt.n	800fe32 <__sfputc_r+0x16>
 800fe2e:	290a      	cmp	r1, #10
 800fe30:	d103      	bne.n	800fe3a <__sfputc_r+0x1e>
 800fe32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe36:	f000 bb33 	b.w	80104a0 <__swbuf_r>
 800fe3a:	6813      	ldr	r3, [r2, #0]
 800fe3c:	1c58      	adds	r0, r3, #1
 800fe3e:	6010      	str	r0, [r2, #0]
 800fe40:	7019      	strb	r1, [r3, #0]
 800fe42:	4608      	mov	r0, r1
 800fe44:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe48:	4770      	bx	lr

0800fe4a <__sfputs_r>:
 800fe4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe4c:	4606      	mov	r6, r0
 800fe4e:	460f      	mov	r7, r1
 800fe50:	4614      	mov	r4, r2
 800fe52:	18d5      	adds	r5, r2, r3
 800fe54:	42ac      	cmp	r4, r5
 800fe56:	d101      	bne.n	800fe5c <__sfputs_r+0x12>
 800fe58:	2000      	movs	r0, #0
 800fe5a:	e007      	b.n	800fe6c <__sfputs_r+0x22>
 800fe5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe60:	463a      	mov	r2, r7
 800fe62:	4630      	mov	r0, r6
 800fe64:	f7ff ffda 	bl	800fe1c <__sfputc_r>
 800fe68:	1c43      	adds	r3, r0, #1
 800fe6a:	d1f3      	bne.n	800fe54 <__sfputs_r+0xa>
 800fe6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fe70 <_vfiprintf_r>:
 800fe70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe74:	460d      	mov	r5, r1
 800fe76:	b09d      	sub	sp, #116	; 0x74
 800fe78:	4614      	mov	r4, r2
 800fe7a:	4698      	mov	r8, r3
 800fe7c:	4606      	mov	r6, r0
 800fe7e:	b118      	cbz	r0, 800fe88 <_vfiprintf_r+0x18>
 800fe80:	6983      	ldr	r3, [r0, #24]
 800fe82:	b90b      	cbnz	r3, 800fe88 <_vfiprintf_r+0x18>
 800fe84:	f7ff fd0a 	bl	800f89c <__sinit>
 800fe88:	4b89      	ldr	r3, [pc, #548]	; (80100b0 <_vfiprintf_r+0x240>)
 800fe8a:	429d      	cmp	r5, r3
 800fe8c:	d11b      	bne.n	800fec6 <_vfiprintf_r+0x56>
 800fe8e:	6875      	ldr	r5, [r6, #4]
 800fe90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe92:	07d9      	lsls	r1, r3, #31
 800fe94:	d405      	bmi.n	800fea2 <_vfiprintf_r+0x32>
 800fe96:	89ab      	ldrh	r3, [r5, #12]
 800fe98:	059a      	lsls	r2, r3, #22
 800fe9a:	d402      	bmi.n	800fea2 <_vfiprintf_r+0x32>
 800fe9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe9e:	f7ff fdad 	bl	800f9fc <__retarget_lock_acquire_recursive>
 800fea2:	89ab      	ldrh	r3, [r5, #12]
 800fea4:	071b      	lsls	r3, r3, #28
 800fea6:	d501      	bpl.n	800feac <_vfiprintf_r+0x3c>
 800fea8:	692b      	ldr	r3, [r5, #16]
 800feaa:	b9eb      	cbnz	r3, 800fee8 <_vfiprintf_r+0x78>
 800feac:	4629      	mov	r1, r5
 800feae:	4630      	mov	r0, r6
 800feb0:	f000 fb5a 	bl	8010568 <__swsetup_r>
 800feb4:	b1c0      	cbz	r0, 800fee8 <_vfiprintf_r+0x78>
 800feb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800feb8:	07dc      	lsls	r4, r3, #31
 800feba:	d50e      	bpl.n	800feda <_vfiprintf_r+0x6a>
 800febc:	f04f 30ff 	mov.w	r0, #4294967295
 800fec0:	b01d      	add	sp, #116	; 0x74
 800fec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fec6:	4b7b      	ldr	r3, [pc, #492]	; (80100b4 <_vfiprintf_r+0x244>)
 800fec8:	429d      	cmp	r5, r3
 800feca:	d101      	bne.n	800fed0 <_vfiprintf_r+0x60>
 800fecc:	68b5      	ldr	r5, [r6, #8]
 800fece:	e7df      	b.n	800fe90 <_vfiprintf_r+0x20>
 800fed0:	4b79      	ldr	r3, [pc, #484]	; (80100b8 <_vfiprintf_r+0x248>)
 800fed2:	429d      	cmp	r5, r3
 800fed4:	bf08      	it	eq
 800fed6:	68f5      	ldreq	r5, [r6, #12]
 800fed8:	e7da      	b.n	800fe90 <_vfiprintf_r+0x20>
 800feda:	89ab      	ldrh	r3, [r5, #12]
 800fedc:	0598      	lsls	r0, r3, #22
 800fede:	d4ed      	bmi.n	800febc <_vfiprintf_r+0x4c>
 800fee0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fee2:	f7ff fd8c 	bl	800f9fe <__retarget_lock_release_recursive>
 800fee6:	e7e9      	b.n	800febc <_vfiprintf_r+0x4c>
 800fee8:	2300      	movs	r3, #0
 800feea:	9309      	str	r3, [sp, #36]	; 0x24
 800feec:	2320      	movs	r3, #32
 800feee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fef2:	f8cd 800c 	str.w	r8, [sp, #12]
 800fef6:	2330      	movs	r3, #48	; 0x30
 800fef8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80100bc <_vfiprintf_r+0x24c>
 800fefc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ff00:	f04f 0901 	mov.w	r9, #1
 800ff04:	4623      	mov	r3, r4
 800ff06:	469a      	mov	sl, r3
 800ff08:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff0c:	b10a      	cbz	r2, 800ff12 <_vfiprintf_r+0xa2>
 800ff0e:	2a25      	cmp	r2, #37	; 0x25
 800ff10:	d1f9      	bne.n	800ff06 <_vfiprintf_r+0x96>
 800ff12:	ebba 0b04 	subs.w	fp, sl, r4
 800ff16:	d00b      	beq.n	800ff30 <_vfiprintf_r+0xc0>
 800ff18:	465b      	mov	r3, fp
 800ff1a:	4622      	mov	r2, r4
 800ff1c:	4629      	mov	r1, r5
 800ff1e:	4630      	mov	r0, r6
 800ff20:	f7ff ff93 	bl	800fe4a <__sfputs_r>
 800ff24:	3001      	adds	r0, #1
 800ff26:	f000 80aa 	beq.w	801007e <_vfiprintf_r+0x20e>
 800ff2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff2c:	445a      	add	r2, fp
 800ff2e:	9209      	str	r2, [sp, #36]	; 0x24
 800ff30:	f89a 3000 	ldrb.w	r3, [sl]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	f000 80a2 	beq.w	801007e <_vfiprintf_r+0x20e>
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ff40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff44:	f10a 0a01 	add.w	sl, sl, #1
 800ff48:	9304      	str	r3, [sp, #16]
 800ff4a:	9307      	str	r3, [sp, #28]
 800ff4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff50:	931a      	str	r3, [sp, #104]	; 0x68
 800ff52:	4654      	mov	r4, sl
 800ff54:	2205      	movs	r2, #5
 800ff56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff5a:	4858      	ldr	r0, [pc, #352]	; (80100bc <_vfiprintf_r+0x24c>)
 800ff5c:	f7f0 f960 	bl	8000220 <memchr>
 800ff60:	9a04      	ldr	r2, [sp, #16]
 800ff62:	b9d8      	cbnz	r0, 800ff9c <_vfiprintf_r+0x12c>
 800ff64:	06d1      	lsls	r1, r2, #27
 800ff66:	bf44      	itt	mi
 800ff68:	2320      	movmi	r3, #32
 800ff6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff6e:	0713      	lsls	r3, r2, #28
 800ff70:	bf44      	itt	mi
 800ff72:	232b      	movmi	r3, #43	; 0x2b
 800ff74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff78:	f89a 3000 	ldrb.w	r3, [sl]
 800ff7c:	2b2a      	cmp	r3, #42	; 0x2a
 800ff7e:	d015      	beq.n	800ffac <_vfiprintf_r+0x13c>
 800ff80:	9a07      	ldr	r2, [sp, #28]
 800ff82:	4654      	mov	r4, sl
 800ff84:	2000      	movs	r0, #0
 800ff86:	f04f 0c0a 	mov.w	ip, #10
 800ff8a:	4621      	mov	r1, r4
 800ff8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff90:	3b30      	subs	r3, #48	; 0x30
 800ff92:	2b09      	cmp	r3, #9
 800ff94:	d94e      	bls.n	8010034 <_vfiprintf_r+0x1c4>
 800ff96:	b1b0      	cbz	r0, 800ffc6 <_vfiprintf_r+0x156>
 800ff98:	9207      	str	r2, [sp, #28]
 800ff9a:	e014      	b.n	800ffc6 <_vfiprintf_r+0x156>
 800ff9c:	eba0 0308 	sub.w	r3, r0, r8
 800ffa0:	fa09 f303 	lsl.w	r3, r9, r3
 800ffa4:	4313      	orrs	r3, r2
 800ffa6:	9304      	str	r3, [sp, #16]
 800ffa8:	46a2      	mov	sl, r4
 800ffaa:	e7d2      	b.n	800ff52 <_vfiprintf_r+0xe2>
 800ffac:	9b03      	ldr	r3, [sp, #12]
 800ffae:	1d19      	adds	r1, r3, #4
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	9103      	str	r1, [sp, #12]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	bfbb      	ittet	lt
 800ffb8:	425b      	neglt	r3, r3
 800ffba:	f042 0202 	orrlt.w	r2, r2, #2
 800ffbe:	9307      	strge	r3, [sp, #28]
 800ffc0:	9307      	strlt	r3, [sp, #28]
 800ffc2:	bfb8      	it	lt
 800ffc4:	9204      	strlt	r2, [sp, #16]
 800ffc6:	7823      	ldrb	r3, [r4, #0]
 800ffc8:	2b2e      	cmp	r3, #46	; 0x2e
 800ffca:	d10c      	bne.n	800ffe6 <_vfiprintf_r+0x176>
 800ffcc:	7863      	ldrb	r3, [r4, #1]
 800ffce:	2b2a      	cmp	r3, #42	; 0x2a
 800ffd0:	d135      	bne.n	801003e <_vfiprintf_r+0x1ce>
 800ffd2:	9b03      	ldr	r3, [sp, #12]
 800ffd4:	1d1a      	adds	r2, r3, #4
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	9203      	str	r2, [sp, #12]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	bfb8      	it	lt
 800ffde:	f04f 33ff 	movlt.w	r3, #4294967295
 800ffe2:	3402      	adds	r4, #2
 800ffe4:	9305      	str	r3, [sp, #20]
 800ffe6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80100cc <_vfiprintf_r+0x25c>
 800ffea:	7821      	ldrb	r1, [r4, #0]
 800ffec:	2203      	movs	r2, #3
 800ffee:	4650      	mov	r0, sl
 800fff0:	f7f0 f916 	bl	8000220 <memchr>
 800fff4:	b140      	cbz	r0, 8010008 <_vfiprintf_r+0x198>
 800fff6:	2340      	movs	r3, #64	; 0x40
 800fff8:	eba0 000a 	sub.w	r0, r0, sl
 800fffc:	fa03 f000 	lsl.w	r0, r3, r0
 8010000:	9b04      	ldr	r3, [sp, #16]
 8010002:	4303      	orrs	r3, r0
 8010004:	3401      	adds	r4, #1
 8010006:	9304      	str	r3, [sp, #16]
 8010008:	f814 1b01 	ldrb.w	r1, [r4], #1
 801000c:	482c      	ldr	r0, [pc, #176]	; (80100c0 <_vfiprintf_r+0x250>)
 801000e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010012:	2206      	movs	r2, #6
 8010014:	f7f0 f904 	bl	8000220 <memchr>
 8010018:	2800      	cmp	r0, #0
 801001a:	d03f      	beq.n	801009c <_vfiprintf_r+0x22c>
 801001c:	4b29      	ldr	r3, [pc, #164]	; (80100c4 <_vfiprintf_r+0x254>)
 801001e:	bb1b      	cbnz	r3, 8010068 <_vfiprintf_r+0x1f8>
 8010020:	9b03      	ldr	r3, [sp, #12]
 8010022:	3307      	adds	r3, #7
 8010024:	f023 0307 	bic.w	r3, r3, #7
 8010028:	3308      	adds	r3, #8
 801002a:	9303      	str	r3, [sp, #12]
 801002c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801002e:	443b      	add	r3, r7
 8010030:	9309      	str	r3, [sp, #36]	; 0x24
 8010032:	e767      	b.n	800ff04 <_vfiprintf_r+0x94>
 8010034:	fb0c 3202 	mla	r2, ip, r2, r3
 8010038:	460c      	mov	r4, r1
 801003a:	2001      	movs	r0, #1
 801003c:	e7a5      	b.n	800ff8a <_vfiprintf_r+0x11a>
 801003e:	2300      	movs	r3, #0
 8010040:	3401      	adds	r4, #1
 8010042:	9305      	str	r3, [sp, #20]
 8010044:	4619      	mov	r1, r3
 8010046:	f04f 0c0a 	mov.w	ip, #10
 801004a:	4620      	mov	r0, r4
 801004c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010050:	3a30      	subs	r2, #48	; 0x30
 8010052:	2a09      	cmp	r2, #9
 8010054:	d903      	bls.n	801005e <_vfiprintf_r+0x1ee>
 8010056:	2b00      	cmp	r3, #0
 8010058:	d0c5      	beq.n	800ffe6 <_vfiprintf_r+0x176>
 801005a:	9105      	str	r1, [sp, #20]
 801005c:	e7c3      	b.n	800ffe6 <_vfiprintf_r+0x176>
 801005e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010062:	4604      	mov	r4, r0
 8010064:	2301      	movs	r3, #1
 8010066:	e7f0      	b.n	801004a <_vfiprintf_r+0x1da>
 8010068:	ab03      	add	r3, sp, #12
 801006a:	9300      	str	r3, [sp, #0]
 801006c:	462a      	mov	r2, r5
 801006e:	4b16      	ldr	r3, [pc, #88]	; (80100c8 <_vfiprintf_r+0x258>)
 8010070:	a904      	add	r1, sp, #16
 8010072:	4630      	mov	r0, r6
 8010074:	f3af 8000 	nop.w
 8010078:	4607      	mov	r7, r0
 801007a:	1c78      	adds	r0, r7, #1
 801007c:	d1d6      	bne.n	801002c <_vfiprintf_r+0x1bc>
 801007e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010080:	07d9      	lsls	r1, r3, #31
 8010082:	d405      	bmi.n	8010090 <_vfiprintf_r+0x220>
 8010084:	89ab      	ldrh	r3, [r5, #12]
 8010086:	059a      	lsls	r2, r3, #22
 8010088:	d402      	bmi.n	8010090 <_vfiprintf_r+0x220>
 801008a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801008c:	f7ff fcb7 	bl	800f9fe <__retarget_lock_release_recursive>
 8010090:	89ab      	ldrh	r3, [r5, #12]
 8010092:	065b      	lsls	r3, r3, #25
 8010094:	f53f af12 	bmi.w	800febc <_vfiprintf_r+0x4c>
 8010098:	9809      	ldr	r0, [sp, #36]	; 0x24
 801009a:	e711      	b.n	800fec0 <_vfiprintf_r+0x50>
 801009c:	ab03      	add	r3, sp, #12
 801009e:	9300      	str	r3, [sp, #0]
 80100a0:	462a      	mov	r2, r5
 80100a2:	4b09      	ldr	r3, [pc, #36]	; (80100c8 <_vfiprintf_r+0x258>)
 80100a4:	a904      	add	r1, sp, #16
 80100a6:	4630      	mov	r0, r6
 80100a8:	f000 f880 	bl	80101ac <_printf_i>
 80100ac:	e7e4      	b.n	8010078 <_vfiprintf_r+0x208>
 80100ae:	bf00      	nop
 80100b0:	08013728 	.word	0x08013728
 80100b4:	08013748 	.word	0x08013748
 80100b8:	08013708 	.word	0x08013708
 80100bc:	08013768 	.word	0x08013768
 80100c0:	08013772 	.word	0x08013772
 80100c4:	00000000 	.word	0x00000000
 80100c8:	0800fe4b 	.word	0x0800fe4b
 80100cc:	0801376e 	.word	0x0801376e

080100d0 <_printf_common>:
 80100d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100d4:	4616      	mov	r6, r2
 80100d6:	4699      	mov	r9, r3
 80100d8:	688a      	ldr	r2, [r1, #8]
 80100da:	690b      	ldr	r3, [r1, #16]
 80100dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80100e0:	4293      	cmp	r3, r2
 80100e2:	bfb8      	it	lt
 80100e4:	4613      	movlt	r3, r2
 80100e6:	6033      	str	r3, [r6, #0]
 80100e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80100ec:	4607      	mov	r7, r0
 80100ee:	460c      	mov	r4, r1
 80100f0:	b10a      	cbz	r2, 80100f6 <_printf_common+0x26>
 80100f2:	3301      	adds	r3, #1
 80100f4:	6033      	str	r3, [r6, #0]
 80100f6:	6823      	ldr	r3, [r4, #0]
 80100f8:	0699      	lsls	r1, r3, #26
 80100fa:	bf42      	ittt	mi
 80100fc:	6833      	ldrmi	r3, [r6, #0]
 80100fe:	3302      	addmi	r3, #2
 8010100:	6033      	strmi	r3, [r6, #0]
 8010102:	6825      	ldr	r5, [r4, #0]
 8010104:	f015 0506 	ands.w	r5, r5, #6
 8010108:	d106      	bne.n	8010118 <_printf_common+0x48>
 801010a:	f104 0a19 	add.w	sl, r4, #25
 801010e:	68e3      	ldr	r3, [r4, #12]
 8010110:	6832      	ldr	r2, [r6, #0]
 8010112:	1a9b      	subs	r3, r3, r2
 8010114:	42ab      	cmp	r3, r5
 8010116:	dc26      	bgt.n	8010166 <_printf_common+0x96>
 8010118:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801011c:	1e13      	subs	r3, r2, #0
 801011e:	6822      	ldr	r2, [r4, #0]
 8010120:	bf18      	it	ne
 8010122:	2301      	movne	r3, #1
 8010124:	0692      	lsls	r2, r2, #26
 8010126:	d42b      	bmi.n	8010180 <_printf_common+0xb0>
 8010128:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801012c:	4649      	mov	r1, r9
 801012e:	4638      	mov	r0, r7
 8010130:	47c0      	blx	r8
 8010132:	3001      	adds	r0, #1
 8010134:	d01e      	beq.n	8010174 <_printf_common+0xa4>
 8010136:	6823      	ldr	r3, [r4, #0]
 8010138:	68e5      	ldr	r5, [r4, #12]
 801013a:	6832      	ldr	r2, [r6, #0]
 801013c:	f003 0306 	and.w	r3, r3, #6
 8010140:	2b04      	cmp	r3, #4
 8010142:	bf08      	it	eq
 8010144:	1aad      	subeq	r5, r5, r2
 8010146:	68a3      	ldr	r3, [r4, #8]
 8010148:	6922      	ldr	r2, [r4, #16]
 801014a:	bf0c      	ite	eq
 801014c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010150:	2500      	movne	r5, #0
 8010152:	4293      	cmp	r3, r2
 8010154:	bfc4      	itt	gt
 8010156:	1a9b      	subgt	r3, r3, r2
 8010158:	18ed      	addgt	r5, r5, r3
 801015a:	2600      	movs	r6, #0
 801015c:	341a      	adds	r4, #26
 801015e:	42b5      	cmp	r5, r6
 8010160:	d11a      	bne.n	8010198 <_printf_common+0xc8>
 8010162:	2000      	movs	r0, #0
 8010164:	e008      	b.n	8010178 <_printf_common+0xa8>
 8010166:	2301      	movs	r3, #1
 8010168:	4652      	mov	r2, sl
 801016a:	4649      	mov	r1, r9
 801016c:	4638      	mov	r0, r7
 801016e:	47c0      	blx	r8
 8010170:	3001      	adds	r0, #1
 8010172:	d103      	bne.n	801017c <_printf_common+0xac>
 8010174:	f04f 30ff 	mov.w	r0, #4294967295
 8010178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801017c:	3501      	adds	r5, #1
 801017e:	e7c6      	b.n	801010e <_printf_common+0x3e>
 8010180:	18e1      	adds	r1, r4, r3
 8010182:	1c5a      	adds	r2, r3, #1
 8010184:	2030      	movs	r0, #48	; 0x30
 8010186:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801018a:	4422      	add	r2, r4
 801018c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010190:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010194:	3302      	adds	r3, #2
 8010196:	e7c7      	b.n	8010128 <_printf_common+0x58>
 8010198:	2301      	movs	r3, #1
 801019a:	4622      	mov	r2, r4
 801019c:	4649      	mov	r1, r9
 801019e:	4638      	mov	r0, r7
 80101a0:	47c0      	blx	r8
 80101a2:	3001      	adds	r0, #1
 80101a4:	d0e6      	beq.n	8010174 <_printf_common+0xa4>
 80101a6:	3601      	adds	r6, #1
 80101a8:	e7d9      	b.n	801015e <_printf_common+0x8e>
	...

080101ac <_printf_i>:
 80101ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80101b0:	460c      	mov	r4, r1
 80101b2:	4691      	mov	r9, r2
 80101b4:	7e27      	ldrb	r7, [r4, #24]
 80101b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80101b8:	2f78      	cmp	r7, #120	; 0x78
 80101ba:	4680      	mov	r8, r0
 80101bc:	469a      	mov	sl, r3
 80101be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80101c2:	d807      	bhi.n	80101d4 <_printf_i+0x28>
 80101c4:	2f62      	cmp	r7, #98	; 0x62
 80101c6:	d80a      	bhi.n	80101de <_printf_i+0x32>
 80101c8:	2f00      	cmp	r7, #0
 80101ca:	f000 80d8 	beq.w	801037e <_printf_i+0x1d2>
 80101ce:	2f58      	cmp	r7, #88	; 0x58
 80101d0:	f000 80a3 	beq.w	801031a <_printf_i+0x16e>
 80101d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80101d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80101dc:	e03a      	b.n	8010254 <_printf_i+0xa8>
 80101de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80101e2:	2b15      	cmp	r3, #21
 80101e4:	d8f6      	bhi.n	80101d4 <_printf_i+0x28>
 80101e6:	a001      	add	r0, pc, #4	; (adr r0, 80101ec <_printf_i+0x40>)
 80101e8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80101ec:	08010245 	.word	0x08010245
 80101f0:	08010259 	.word	0x08010259
 80101f4:	080101d5 	.word	0x080101d5
 80101f8:	080101d5 	.word	0x080101d5
 80101fc:	080101d5 	.word	0x080101d5
 8010200:	080101d5 	.word	0x080101d5
 8010204:	08010259 	.word	0x08010259
 8010208:	080101d5 	.word	0x080101d5
 801020c:	080101d5 	.word	0x080101d5
 8010210:	080101d5 	.word	0x080101d5
 8010214:	080101d5 	.word	0x080101d5
 8010218:	08010365 	.word	0x08010365
 801021c:	08010289 	.word	0x08010289
 8010220:	08010347 	.word	0x08010347
 8010224:	080101d5 	.word	0x080101d5
 8010228:	080101d5 	.word	0x080101d5
 801022c:	08010387 	.word	0x08010387
 8010230:	080101d5 	.word	0x080101d5
 8010234:	08010289 	.word	0x08010289
 8010238:	080101d5 	.word	0x080101d5
 801023c:	080101d5 	.word	0x080101d5
 8010240:	0801034f 	.word	0x0801034f
 8010244:	680b      	ldr	r3, [r1, #0]
 8010246:	1d1a      	adds	r2, r3, #4
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	600a      	str	r2, [r1, #0]
 801024c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010250:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010254:	2301      	movs	r3, #1
 8010256:	e0a3      	b.n	80103a0 <_printf_i+0x1f4>
 8010258:	6825      	ldr	r5, [r4, #0]
 801025a:	6808      	ldr	r0, [r1, #0]
 801025c:	062e      	lsls	r6, r5, #24
 801025e:	f100 0304 	add.w	r3, r0, #4
 8010262:	d50a      	bpl.n	801027a <_printf_i+0xce>
 8010264:	6805      	ldr	r5, [r0, #0]
 8010266:	600b      	str	r3, [r1, #0]
 8010268:	2d00      	cmp	r5, #0
 801026a:	da03      	bge.n	8010274 <_printf_i+0xc8>
 801026c:	232d      	movs	r3, #45	; 0x2d
 801026e:	426d      	negs	r5, r5
 8010270:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010274:	485e      	ldr	r0, [pc, #376]	; (80103f0 <_printf_i+0x244>)
 8010276:	230a      	movs	r3, #10
 8010278:	e019      	b.n	80102ae <_printf_i+0x102>
 801027a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801027e:	6805      	ldr	r5, [r0, #0]
 8010280:	600b      	str	r3, [r1, #0]
 8010282:	bf18      	it	ne
 8010284:	b22d      	sxthne	r5, r5
 8010286:	e7ef      	b.n	8010268 <_printf_i+0xbc>
 8010288:	680b      	ldr	r3, [r1, #0]
 801028a:	6825      	ldr	r5, [r4, #0]
 801028c:	1d18      	adds	r0, r3, #4
 801028e:	6008      	str	r0, [r1, #0]
 8010290:	0628      	lsls	r0, r5, #24
 8010292:	d501      	bpl.n	8010298 <_printf_i+0xec>
 8010294:	681d      	ldr	r5, [r3, #0]
 8010296:	e002      	b.n	801029e <_printf_i+0xf2>
 8010298:	0669      	lsls	r1, r5, #25
 801029a:	d5fb      	bpl.n	8010294 <_printf_i+0xe8>
 801029c:	881d      	ldrh	r5, [r3, #0]
 801029e:	4854      	ldr	r0, [pc, #336]	; (80103f0 <_printf_i+0x244>)
 80102a0:	2f6f      	cmp	r7, #111	; 0x6f
 80102a2:	bf0c      	ite	eq
 80102a4:	2308      	moveq	r3, #8
 80102a6:	230a      	movne	r3, #10
 80102a8:	2100      	movs	r1, #0
 80102aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80102ae:	6866      	ldr	r6, [r4, #4]
 80102b0:	60a6      	str	r6, [r4, #8]
 80102b2:	2e00      	cmp	r6, #0
 80102b4:	bfa2      	ittt	ge
 80102b6:	6821      	ldrge	r1, [r4, #0]
 80102b8:	f021 0104 	bicge.w	r1, r1, #4
 80102bc:	6021      	strge	r1, [r4, #0]
 80102be:	b90d      	cbnz	r5, 80102c4 <_printf_i+0x118>
 80102c0:	2e00      	cmp	r6, #0
 80102c2:	d04d      	beq.n	8010360 <_printf_i+0x1b4>
 80102c4:	4616      	mov	r6, r2
 80102c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80102ca:	fb03 5711 	mls	r7, r3, r1, r5
 80102ce:	5dc7      	ldrb	r7, [r0, r7]
 80102d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80102d4:	462f      	mov	r7, r5
 80102d6:	42bb      	cmp	r3, r7
 80102d8:	460d      	mov	r5, r1
 80102da:	d9f4      	bls.n	80102c6 <_printf_i+0x11a>
 80102dc:	2b08      	cmp	r3, #8
 80102de:	d10b      	bne.n	80102f8 <_printf_i+0x14c>
 80102e0:	6823      	ldr	r3, [r4, #0]
 80102e2:	07df      	lsls	r7, r3, #31
 80102e4:	d508      	bpl.n	80102f8 <_printf_i+0x14c>
 80102e6:	6923      	ldr	r3, [r4, #16]
 80102e8:	6861      	ldr	r1, [r4, #4]
 80102ea:	4299      	cmp	r1, r3
 80102ec:	bfde      	ittt	le
 80102ee:	2330      	movle	r3, #48	; 0x30
 80102f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80102f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80102f8:	1b92      	subs	r2, r2, r6
 80102fa:	6122      	str	r2, [r4, #16]
 80102fc:	f8cd a000 	str.w	sl, [sp]
 8010300:	464b      	mov	r3, r9
 8010302:	aa03      	add	r2, sp, #12
 8010304:	4621      	mov	r1, r4
 8010306:	4640      	mov	r0, r8
 8010308:	f7ff fee2 	bl	80100d0 <_printf_common>
 801030c:	3001      	adds	r0, #1
 801030e:	d14c      	bne.n	80103aa <_printf_i+0x1fe>
 8010310:	f04f 30ff 	mov.w	r0, #4294967295
 8010314:	b004      	add	sp, #16
 8010316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801031a:	4835      	ldr	r0, [pc, #212]	; (80103f0 <_printf_i+0x244>)
 801031c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010320:	6823      	ldr	r3, [r4, #0]
 8010322:	680e      	ldr	r6, [r1, #0]
 8010324:	061f      	lsls	r7, r3, #24
 8010326:	f856 5b04 	ldr.w	r5, [r6], #4
 801032a:	600e      	str	r6, [r1, #0]
 801032c:	d514      	bpl.n	8010358 <_printf_i+0x1ac>
 801032e:	07d9      	lsls	r1, r3, #31
 8010330:	bf44      	itt	mi
 8010332:	f043 0320 	orrmi.w	r3, r3, #32
 8010336:	6023      	strmi	r3, [r4, #0]
 8010338:	b91d      	cbnz	r5, 8010342 <_printf_i+0x196>
 801033a:	6823      	ldr	r3, [r4, #0]
 801033c:	f023 0320 	bic.w	r3, r3, #32
 8010340:	6023      	str	r3, [r4, #0]
 8010342:	2310      	movs	r3, #16
 8010344:	e7b0      	b.n	80102a8 <_printf_i+0xfc>
 8010346:	6823      	ldr	r3, [r4, #0]
 8010348:	f043 0320 	orr.w	r3, r3, #32
 801034c:	6023      	str	r3, [r4, #0]
 801034e:	2378      	movs	r3, #120	; 0x78
 8010350:	4828      	ldr	r0, [pc, #160]	; (80103f4 <_printf_i+0x248>)
 8010352:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010356:	e7e3      	b.n	8010320 <_printf_i+0x174>
 8010358:	065e      	lsls	r6, r3, #25
 801035a:	bf48      	it	mi
 801035c:	b2ad      	uxthmi	r5, r5
 801035e:	e7e6      	b.n	801032e <_printf_i+0x182>
 8010360:	4616      	mov	r6, r2
 8010362:	e7bb      	b.n	80102dc <_printf_i+0x130>
 8010364:	680b      	ldr	r3, [r1, #0]
 8010366:	6826      	ldr	r6, [r4, #0]
 8010368:	6960      	ldr	r0, [r4, #20]
 801036a:	1d1d      	adds	r5, r3, #4
 801036c:	600d      	str	r5, [r1, #0]
 801036e:	0635      	lsls	r5, r6, #24
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	d501      	bpl.n	8010378 <_printf_i+0x1cc>
 8010374:	6018      	str	r0, [r3, #0]
 8010376:	e002      	b.n	801037e <_printf_i+0x1d2>
 8010378:	0671      	lsls	r1, r6, #25
 801037a:	d5fb      	bpl.n	8010374 <_printf_i+0x1c8>
 801037c:	8018      	strh	r0, [r3, #0]
 801037e:	2300      	movs	r3, #0
 8010380:	6123      	str	r3, [r4, #16]
 8010382:	4616      	mov	r6, r2
 8010384:	e7ba      	b.n	80102fc <_printf_i+0x150>
 8010386:	680b      	ldr	r3, [r1, #0]
 8010388:	1d1a      	adds	r2, r3, #4
 801038a:	600a      	str	r2, [r1, #0]
 801038c:	681e      	ldr	r6, [r3, #0]
 801038e:	6862      	ldr	r2, [r4, #4]
 8010390:	2100      	movs	r1, #0
 8010392:	4630      	mov	r0, r6
 8010394:	f7ef ff44 	bl	8000220 <memchr>
 8010398:	b108      	cbz	r0, 801039e <_printf_i+0x1f2>
 801039a:	1b80      	subs	r0, r0, r6
 801039c:	6060      	str	r0, [r4, #4]
 801039e:	6863      	ldr	r3, [r4, #4]
 80103a0:	6123      	str	r3, [r4, #16]
 80103a2:	2300      	movs	r3, #0
 80103a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80103a8:	e7a8      	b.n	80102fc <_printf_i+0x150>
 80103aa:	6923      	ldr	r3, [r4, #16]
 80103ac:	4632      	mov	r2, r6
 80103ae:	4649      	mov	r1, r9
 80103b0:	4640      	mov	r0, r8
 80103b2:	47d0      	blx	sl
 80103b4:	3001      	adds	r0, #1
 80103b6:	d0ab      	beq.n	8010310 <_printf_i+0x164>
 80103b8:	6823      	ldr	r3, [r4, #0]
 80103ba:	079b      	lsls	r3, r3, #30
 80103bc:	d413      	bmi.n	80103e6 <_printf_i+0x23a>
 80103be:	68e0      	ldr	r0, [r4, #12]
 80103c0:	9b03      	ldr	r3, [sp, #12]
 80103c2:	4298      	cmp	r0, r3
 80103c4:	bfb8      	it	lt
 80103c6:	4618      	movlt	r0, r3
 80103c8:	e7a4      	b.n	8010314 <_printf_i+0x168>
 80103ca:	2301      	movs	r3, #1
 80103cc:	4632      	mov	r2, r6
 80103ce:	4649      	mov	r1, r9
 80103d0:	4640      	mov	r0, r8
 80103d2:	47d0      	blx	sl
 80103d4:	3001      	adds	r0, #1
 80103d6:	d09b      	beq.n	8010310 <_printf_i+0x164>
 80103d8:	3501      	adds	r5, #1
 80103da:	68e3      	ldr	r3, [r4, #12]
 80103dc:	9903      	ldr	r1, [sp, #12]
 80103de:	1a5b      	subs	r3, r3, r1
 80103e0:	42ab      	cmp	r3, r5
 80103e2:	dcf2      	bgt.n	80103ca <_printf_i+0x21e>
 80103e4:	e7eb      	b.n	80103be <_printf_i+0x212>
 80103e6:	2500      	movs	r5, #0
 80103e8:	f104 0619 	add.w	r6, r4, #25
 80103ec:	e7f5      	b.n	80103da <_printf_i+0x22e>
 80103ee:	bf00      	nop
 80103f0:	08013779 	.word	0x08013779
 80103f4:	0801378a 	.word	0x0801378a

080103f8 <_sbrk_r>:
 80103f8:	b538      	push	{r3, r4, r5, lr}
 80103fa:	4d06      	ldr	r5, [pc, #24]	; (8010414 <_sbrk_r+0x1c>)
 80103fc:	2300      	movs	r3, #0
 80103fe:	4604      	mov	r4, r0
 8010400:	4608      	mov	r0, r1
 8010402:	602b      	str	r3, [r5, #0]
 8010404:	f7f0 fe16 	bl	8001034 <_sbrk>
 8010408:	1c43      	adds	r3, r0, #1
 801040a:	d102      	bne.n	8010412 <_sbrk_r+0x1a>
 801040c:	682b      	ldr	r3, [r5, #0]
 801040e:	b103      	cbz	r3, 8010412 <_sbrk_r+0x1a>
 8010410:	6023      	str	r3, [r4, #0]
 8010412:	bd38      	pop	{r3, r4, r5, pc}
 8010414:	20006954 	.word	0x20006954

08010418 <__sread>:
 8010418:	b510      	push	{r4, lr}
 801041a:	460c      	mov	r4, r1
 801041c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010420:	f000 fa92 	bl	8010948 <_read_r>
 8010424:	2800      	cmp	r0, #0
 8010426:	bfab      	itete	ge
 8010428:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801042a:	89a3      	ldrhlt	r3, [r4, #12]
 801042c:	181b      	addge	r3, r3, r0
 801042e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010432:	bfac      	ite	ge
 8010434:	6563      	strge	r3, [r4, #84]	; 0x54
 8010436:	81a3      	strhlt	r3, [r4, #12]
 8010438:	bd10      	pop	{r4, pc}

0801043a <__swrite>:
 801043a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801043e:	461f      	mov	r7, r3
 8010440:	898b      	ldrh	r3, [r1, #12]
 8010442:	05db      	lsls	r3, r3, #23
 8010444:	4605      	mov	r5, r0
 8010446:	460c      	mov	r4, r1
 8010448:	4616      	mov	r6, r2
 801044a:	d505      	bpl.n	8010458 <__swrite+0x1e>
 801044c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010450:	2302      	movs	r3, #2
 8010452:	2200      	movs	r2, #0
 8010454:	f000 f9d0 	bl	80107f8 <_lseek_r>
 8010458:	89a3      	ldrh	r3, [r4, #12]
 801045a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801045e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010462:	81a3      	strh	r3, [r4, #12]
 8010464:	4632      	mov	r2, r6
 8010466:	463b      	mov	r3, r7
 8010468:	4628      	mov	r0, r5
 801046a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801046e:	f000 b869 	b.w	8010544 <_write_r>

08010472 <__sseek>:
 8010472:	b510      	push	{r4, lr}
 8010474:	460c      	mov	r4, r1
 8010476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801047a:	f000 f9bd 	bl	80107f8 <_lseek_r>
 801047e:	1c43      	adds	r3, r0, #1
 8010480:	89a3      	ldrh	r3, [r4, #12]
 8010482:	bf15      	itete	ne
 8010484:	6560      	strne	r0, [r4, #84]	; 0x54
 8010486:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801048a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801048e:	81a3      	strheq	r3, [r4, #12]
 8010490:	bf18      	it	ne
 8010492:	81a3      	strhne	r3, [r4, #12]
 8010494:	bd10      	pop	{r4, pc}

08010496 <__sclose>:
 8010496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801049a:	f000 b8db 	b.w	8010654 <_close_r>
	...

080104a0 <__swbuf_r>:
 80104a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104a2:	460e      	mov	r6, r1
 80104a4:	4614      	mov	r4, r2
 80104a6:	4605      	mov	r5, r0
 80104a8:	b118      	cbz	r0, 80104b2 <__swbuf_r+0x12>
 80104aa:	6983      	ldr	r3, [r0, #24]
 80104ac:	b90b      	cbnz	r3, 80104b2 <__swbuf_r+0x12>
 80104ae:	f7ff f9f5 	bl	800f89c <__sinit>
 80104b2:	4b21      	ldr	r3, [pc, #132]	; (8010538 <__swbuf_r+0x98>)
 80104b4:	429c      	cmp	r4, r3
 80104b6:	d12b      	bne.n	8010510 <__swbuf_r+0x70>
 80104b8:	686c      	ldr	r4, [r5, #4]
 80104ba:	69a3      	ldr	r3, [r4, #24]
 80104bc:	60a3      	str	r3, [r4, #8]
 80104be:	89a3      	ldrh	r3, [r4, #12]
 80104c0:	071a      	lsls	r2, r3, #28
 80104c2:	d52f      	bpl.n	8010524 <__swbuf_r+0x84>
 80104c4:	6923      	ldr	r3, [r4, #16]
 80104c6:	b36b      	cbz	r3, 8010524 <__swbuf_r+0x84>
 80104c8:	6923      	ldr	r3, [r4, #16]
 80104ca:	6820      	ldr	r0, [r4, #0]
 80104cc:	1ac0      	subs	r0, r0, r3
 80104ce:	6963      	ldr	r3, [r4, #20]
 80104d0:	b2f6      	uxtb	r6, r6
 80104d2:	4283      	cmp	r3, r0
 80104d4:	4637      	mov	r7, r6
 80104d6:	dc04      	bgt.n	80104e2 <__swbuf_r+0x42>
 80104d8:	4621      	mov	r1, r4
 80104da:	4628      	mov	r0, r5
 80104dc:	f000 f950 	bl	8010780 <_fflush_r>
 80104e0:	bb30      	cbnz	r0, 8010530 <__swbuf_r+0x90>
 80104e2:	68a3      	ldr	r3, [r4, #8]
 80104e4:	3b01      	subs	r3, #1
 80104e6:	60a3      	str	r3, [r4, #8]
 80104e8:	6823      	ldr	r3, [r4, #0]
 80104ea:	1c5a      	adds	r2, r3, #1
 80104ec:	6022      	str	r2, [r4, #0]
 80104ee:	701e      	strb	r6, [r3, #0]
 80104f0:	6963      	ldr	r3, [r4, #20]
 80104f2:	3001      	adds	r0, #1
 80104f4:	4283      	cmp	r3, r0
 80104f6:	d004      	beq.n	8010502 <__swbuf_r+0x62>
 80104f8:	89a3      	ldrh	r3, [r4, #12]
 80104fa:	07db      	lsls	r3, r3, #31
 80104fc:	d506      	bpl.n	801050c <__swbuf_r+0x6c>
 80104fe:	2e0a      	cmp	r6, #10
 8010500:	d104      	bne.n	801050c <__swbuf_r+0x6c>
 8010502:	4621      	mov	r1, r4
 8010504:	4628      	mov	r0, r5
 8010506:	f000 f93b 	bl	8010780 <_fflush_r>
 801050a:	b988      	cbnz	r0, 8010530 <__swbuf_r+0x90>
 801050c:	4638      	mov	r0, r7
 801050e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010510:	4b0a      	ldr	r3, [pc, #40]	; (801053c <__swbuf_r+0x9c>)
 8010512:	429c      	cmp	r4, r3
 8010514:	d101      	bne.n	801051a <__swbuf_r+0x7a>
 8010516:	68ac      	ldr	r4, [r5, #8]
 8010518:	e7cf      	b.n	80104ba <__swbuf_r+0x1a>
 801051a:	4b09      	ldr	r3, [pc, #36]	; (8010540 <__swbuf_r+0xa0>)
 801051c:	429c      	cmp	r4, r3
 801051e:	bf08      	it	eq
 8010520:	68ec      	ldreq	r4, [r5, #12]
 8010522:	e7ca      	b.n	80104ba <__swbuf_r+0x1a>
 8010524:	4621      	mov	r1, r4
 8010526:	4628      	mov	r0, r5
 8010528:	f000 f81e 	bl	8010568 <__swsetup_r>
 801052c:	2800      	cmp	r0, #0
 801052e:	d0cb      	beq.n	80104c8 <__swbuf_r+0x28>
 8010530:	f04f 37ff 	mov.w	r7, #4294967295
 8010534:	e7ea      	b.n	801050c <__swbuf_r+0x6c>
 8010536:	bf00      	nop
 8010538:	08013728 	.word	0x08013728
 801053c:	08013748 	.word	0x08013748
 8010540:	08013708 	.word	0x08013708

08010544 <_write_r>:
 8010544:	b538      	push	{r3, r4, r5, lr}
 8010546:	4d07      	ldr	r5, [pc, #28]	; (8010564 <_write_r+0x20>)
 8010548:	4604      	mov	r4, r0
 801054a:	4608      	mov	r0, r1
 801054c:	4611      	mov	r1, r2
 801054e:	2200      	movs	r2, #0
 8010550:	602a      	str	r2, [r5, #0]
 8010552:	461a      	mov	r2, r3
 8010554:	f7f0 fd1d 	bl	8000f92 <_write>
 8010558:	1c43      	adds	r3, r0, #1
 801055a:	d102      	bne.n	8010562 <_write_r+0x1e>
 801055c:	682b      	ldr	r3, [r5, #0]
 801055e:	b103      	cbz	r3, 8010562 <_write_r+0x1e>
 8010560:	6023      	str	r3, [r4, #0]
 8010562:	bd38      	pop	{r3, r4, r5, pc}
 8010564:	20006954 	.word	0x20006954

08010568 <__swsetup_r>:
 8010568:	4b32      	ldr	r3, [pc, #200]	; (8010634 <__swsetup_r+0xcc>)
 801056a:	b570      	push	{r4, r5, r6, lr}
 801056c:	681d      	ldr	r5, [r3, #0]
 801056e:	4606      	mov	r6, r0
 8010570:	460c      	mov	r4, r1
 8010572:	b125      	cbz	r5, 801057e <__swsetup_r+0x16>
 8010574:	69ab      	ldr	r3, [r5, #24]
 8010576:	b913      	cbnz	r3, 801057e <__swsetup_r+0x16>
 8010578:	4628      	mov	r0, r5
 801057a:	f7ff f98f 	bl	800f89c <__sinit>
 801057e:	4b2e      	ldr	r3, [pc, #184]	; (8010638 <__swsetup_r+0xd0>)
 8010580:	429c      	cmp	r4, r3
 8010582:	d10f      	bne.n	80105a4 <__swsetup_r+0x3c>
 8010584:	686c      	ldr	r4, [r5, #4]
 8010586:	89a3      	ldrh	r3, [r4, #12]
 8010588:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801058c:	0719      	lsls	r1, r3, #28
 801058e:	d42c      	bmi.n	80105ea <__swsetup_r+0x82>
 8010590:	06dd      	lsls	r5, r3, #27
 8010592:	d411      	bmi.n	80105b8 <__swsetup_r+0x50>
 8010594:	2309      	movs	r3, #9
 8010596:	6033      	str	r3, [r6, #0]
 8010598:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801059c:	81a3      	strh	r3, [r4, #12]
 801059e:	f04f 30ff 	mov.w	r0, #4294967295
 80105a2:	e03e      	b.n	8010622 <__swsetup_r+0xba>
 80105a4:	4b25      	ldr	r3, [pc, #148]	; (801063c <__swsetup_r+0xd4>)
 80105a6:	429c      	cmp	r4, r3
 80105a8:	d101      	bne.n	80105ae <__swsetup_r+0x46>
 80105aa:	68ac      	ldr	r4, [r5, #8]
 80105ac:	e7eb      	b.n	8010586 <__swsetup_r+0x1e>
 80105ae:	4b24      	ldr	r3, [pc, #144]	; (8010640 <__swsetup_r+0xd8>)
 80105b0:	429c      	cmp	r4, r3
 80105b2:	bf08      	it	eq
 80105b4:	68ec      	ldreq	r4, [r5, #12]
 80105b6:	e7e6      	b.n	8010586 <__swsetup_r+0x1e>
 80105b8:	0758      	lsls	r0, r3, #29
 80105ba:	d512      	bpl.n	80105e2 <__swsetup_r+0x7a>
 80105bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80105be:	b141      	cbz	r1, 80105d2 <__swsetup_r+0x6a>
 80105c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80105c4:	4299      	cmp	r1, r3
 80105c6:	d002      	beq.n	80105ce <__swsetup_r+0x66>
 80105c8:	4630      	mov	r0, r6
 80105ca:	f7ff fa21 	bl	800fa10 <_free_r>
 80105ce:	2300      	movs	r3, #0
 80105d0:	6363      	str	r3, [r4, #52]	; 0x34
 80105d2:	89a3      	ldrh	r3, [r4, #12]
 80105d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80105d8:	81a3      	strh	r3, [r4, #12]
 80105da:	2300      	movs	r3, #0
 80105dc:	6063      	str	r3, [r4, #4]
 80105de:	6923      	ldr	r3, [r4, #16]
 80105e0:	6023      	str	r3, [r4, #0]
 80105e2:	89a3      	ldrh	r3, [r4, #12]
 80105e4:	f043 0308 	orr.w	r3, r3, #8
 80105e8:	81a3      	strh	r3, [r4, #12]
 80105ea:	6923      	ldr	r3, [r4, #16]
 80105ec:	b94b      	cbnz	r3, 8010602 <__swsetup_r+0x9a>
 80105ee:	89a3      	ldrh	r3, [r4, #12]
 80105f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80105f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80105f8:	d003      	beq.n	8010602 <__swsetup_r+0x9a>
 80105fa:	4621      	mov	r1, r4
 80105fc:	4630      	mov	r0, r6
 80105fe:	f000 f931 	bl	8010864 <__smakebuf_r>
 8010602:	89a0      	ldrh	r0, [r4, #12]
 8010604:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010608:	f010 0301 	ands.w	r3, r0, #1
 801060c:	d00a      	beq.n	8010624 <__swsetup_r+0xbc>
 801060e:	2300      	movs	r3, #0
 8010610:	60a3      	str	r3, [r4, #8]
 8010612:	6963      	ldr	r3, [r4, #20]
 8010614:	425b      	negs	r3, r3
 8010616:	61a3      	str	r3, [r4, #24]
 8010618:	6923      	ldr	r3, [r4, #16]
 801061a:	b943      	cbnz	r3, 801062e <__swsetup_r+0xc6>
 801061c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010620:	d1ba      	bne.n	8010598 <__swsetup_r+0x30>
 8010622:	bd70      	pop	{r4, r5, r6, pc}
 8010624:	0781      	lsls	r1, r0, #30
 8010626:	bf58      	it	pl
 8010628:	6963      	ldrpl	r3, [r4, #20]
 801062a:	60a3      	str	r3, [r4, #8]
 801062c:	e7f4      	b.n	8010618 <__swsetup_r+0xb0>
 801062e:	2000      	movs	r0, #0
 8010630:	e7f7      	b.n	8010622 <__swsetup_r+0xba>
 8010632:	bf00      	nop
 8010634:	20000014 	.word	0x20000014
 8010638:	08013728 	.word	0x08013728
 801063c:	08013748 	.word	0x08013748
 8010640:	08013708 	.word	0x08013708

08010644 <abort>:
 8010644:	b508      	push	{r3, lr}
 8010646:	2006      	movs	r0, #6
 8010648:	f000 f9b8 	bl	80109bc <raise>
 801064c:	2001      	movs	r0, #1
 801064e:	f7f0 fc79 	bl	8000f44 <_exit>
	...

08010654 <_close_r>:
 8010654:	b538      	push	{r3, r4, r5, lr}
 8010656:	4d06      	ldr	r5, [pc, #24]	; (8010670 <_close_r+0x1c>)
 8010658:	2300      	movs	r3, #0
 801065a:	4604      	mov	r4, r0
 801065c:	4608      	mov	r0, r1
 801065e:	602b      	str	r3, [r5, #0]
 8010660:	f7f0 fcb3 	bl	8000fca <_close>
 8010664:	1c43      	adds	r3, r0, #1
 8010666:	d102      	bne.n	801066e <_close_r+0x1a>
 8010668:	682b      	ldr	r3, [r5, #0]
 801066a:	b103      	cbz	r3, 801066e <_close_r+0x1a>
 801066c:	6023      	str	r3, [r4, #0]
 801066e:	bd38      	pop	{r3, r4, r5, pc}
 8010670:	20006954 	.word	0x20006954

08010674 <__sflush_r>:
 8010674:	898a      	ldrh	r2, [r1, #12]
 8010676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801067a:	4605      	mov	r5, r0
 801067c:	0710      	lsls	r0, r2, #28
 801067e:	460c      	mov	r4, r1
 8010680:	d458      	bmi.n	8010734 <__sflush_r+0xc0>
 8010682:	684b      	ldr	r3, [r1, #4]
 8010684:	2b00      	cmp	r3, #0
 8010686:	dc05      	bgt.n	8010694 <__sflush_r+0x20>
 8010688:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801068a:	2b00      	cmp	r3, #0
 801068c:	dc02      	bgt.n	8010694 <__sflush_r+0x20>
 801068e:	2000      	movs	r0, #0
 8010690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010694:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010696:	2e00      	cmp	r6, #0
 8010698:	d0f9      	beq.n	801068e <__sflush_r+0x1a>
 801069a:	2300      	movs	r3, #0
 801069c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80106a0:	682f      	ldr	r7, [r5, #0]
 80106a2:	602b      	str	r3, [r5, #0]
 80106a4:	d032      	beq.n	801070c <__sflush_r+0x98>
 80106a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80106a8:	89a3      	ldrh	r3, [r4, #12]
 80106aa:	075a      	lsls	r2, r3, #29
 80106ac:	d505      	bpl.n	80106ba <__sflush_r+0x46>
 80106ae:	6863      	ldr	r3, [r4, #4]
 80106b0:	1ac0      	subs	r0, r0, r3
 80106b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80106b4:	b10b      	cbz	r3, 80106ba <__sflush_r+0x46>
 80106b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80106b8:	1ac0      	subs	r0, r0, r3
 80106ba:	2300      	movs	r3, #0
 80106bc:	4602      	mov	r2, r0
 80106be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80106c0:	6a21      	ldr	r1, [r4, #32]
 80106c2:	4628      	mov	r0, r5
 80106c4:	47b0      	blx	r6
 80106c6:	1c43      	adds	r3, r0, #1
 80106c8:	89a3      	ldrh	r3, [r4, #12]
 80106ca:	d106      	bne.n	80106da <__sflush_r+0x66>
 80106cc:	6829      	ldr	r1, [r5, #0]
 80106ce:	291d      	cmp	r1, #29
 80106d0:	d82c      	bhi.n	801072c <__sflush_r+0xb8>
 80106d2:	4a2a      	ldr	r2, [pc, #168]	; (801077c <__sflush_r+0x108>)
 80106d4:	40ca      	lsrs	r2, r1
 80106d6:	07d6      	lsls	r6, r2, #31
 80106d8:	d528      	bpl.n	801072c <__sflush_r+0xb8>
 80106da:	2200      	movs	r2, #0
 80106dc:	6062      	str	r2, [r4, #4]
 80106de:	04d9      	lsls	r1, r3, #19
 80106e0:	6922      	ldr	r2, [r4, #16]
 80106e2:	6022      	str	r2, [r4, #0]
 80106e4:	d504      	bpl.n	80106f0 <__sflush_r+0x7c>
 80106e6:	1c42      	adds	r2, r0, #1
 80106e8:	d101      	bne.n	80106ee <__sflush_r+0x7a>
 80106ea:	682b      	ldr	r3, [r5, #0]
 80106ec:	b903      	cbnz	r3, 80106f0 <__sflush_r+0x7c>
 80106ee:	6560      	str	r0, [r4, #84]	; 0x54
 80106f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80106f2:	602f      	str	r7, [r5, #0]
 80106f4:	2900      	cmp	r1, #0
 80106f6:	d0ca      	beq.n	801068e <__sflush_r+0x1a>
 80106f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80106fc:	4299      	cmp	r1, r3
 80106fe:	d002      	beq.n	8010706 <__sflush_r+0x92>
 8010700:	4628      	mov	r0, r5
 8010702:	f7ff f985 	bl	800fa10 <_free_r>
 8010706:	2000      	movs	r0, #0
 8010708:	6360      	str	r0, [r4, #52]	; 0x34
 801070a:	e7c1      	b.n	8010690 <__sflush_r+0x1c>
 801070c:	6a21      	ldr	r1, [r4, #32]
 801070e:	2301      	movs	r3, #1
 8010710:	4628      	mov	r0, r5
 8010712:	47b0      	blx	r6
 8010714:	1c41      	adds	r1, r0, #1
 8010716:	d1c7      	bne.n	80106a8 <__sflush_r+0x34>
 8010718:	682b      	ldr	r3, [r5, #0]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d0c4      	beq.n	80106a8 <__sflush_r+0x34>
 801071e:	2b1d      	cmp	r3, #29
 8010720:	d001      	beq.n	8010726 <__sflush_r+0xb2>
 8010722:	2b16      	cmp	r3, #22
 8010724:	d101      	bne.n	801072a <__sflush_r+0xb6>
 8010726:	602f      	str	r7, [r5, #0]
 8010728:	e7b1      	b.n	801068e <__sflush_r+0x1a>
 801072a:	89a3      	ldrh	r3, [r4, #12]
 801072c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010730:	81a3      	strh	r3, [r4, #12]
 8010732:	e7ad      	b.n	8010690 <__sflush_r+0x1c>
 8010734:	690f      	ldr	r7, [r1, #16]
 8010736:	2f00      	cmp	r7, #0
 8010738:	d0a9      	beq.n	801068e <__sflush_r+0x1a>
 801073a:	0793      	lsls	r3, r2, #30
 801073c:	680e      	ldr	r6, [r1, #0]
 801073e:	bf08      	it	eq
 8010740:	694b      	ldreq	r3, [r1, #20]
 8010742:	600f      	str	r7, [r1, #0]
 8010744:	bf18      	it	ne
 8010746:	2300      	movne	r3, #0
 8010748:	eba6 0807 	sub.w	r8, r6, r7
 801074c:	608b      	str	r3, [r1, #8]
 801074e:	f1b8 0f00 	cmp.w	r8, #0
 8010752:	dd9c      	ble.n	801068e <__sflush_r+0x1a>
 8010754:	6a21      	ldr	r1, [r4, #32]
 8010756:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010758:	4643      	mov	r3, r8
 801075a:	463a      	mov	r2, r7
 801075c:	4628      	mov	r0, r5
 801075e:	47b0      	blx	r6
 8010760:	2800      	cmp	r0, #0
 8010762:	dc06      	bgt.n	8010772 <__sflush_r+0xfe>
 8010764:	89a3      	ldrh	r3, [r4, #12]
 8010766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801076a:	81a3      	strh	r3, [r4, #12]
 801076c:	f04f 30ff 	mov.w	r0, #4294967295
 8010770:	e78e      	b.n	8010690 <__sflush_r+0x1c>
 8010772:	4407      	add	r7, r0
 8010774:	eba8 0800 	sub.w	r8, r8, r0
 8010778:	e7e9      	b.n	801074e <__sflush_r+0xda>
 801077a:	bf00      	nop
 801077c:	20400001 	.word	0x20400001

08010780 <_fflush_r>:
 8010780:	b538      	push	{r3, r4, r5, lr}
 8010782:	690b      	ldr	r3, [r1, #16]
 8010784:	4605      	mov	r5, r0
 8010786:	460c      	mov	r4, r1
 8010788:	b913      	cbnz	r3, 8010790 <_fflush_r+0x10>
 801078a:	2500      	movs	r5, #0
 801078c:	4628      	mov	r0, r5
 801078e:	bd38      	pop	{r3, r4, r5, pc}
 8010790:	b118      	cbz	r0, 801079a <_fflush_r+0x1a>
 8010792:	6983      	ldr	r3, [r0, #24]
 8010794:	b90b      	cbnz	r3, 801079a <_fflush_r+0x1a>
 8010796:	f7ff f881 	bl	800f89c <__sinit>
 801079a:	4b14      	ldr	r3, [pc, #80]	; (80107ec <_fflush_r+0x6c>)
 801079c:	429c      	cmp	r4, r3
 801079e:	d11b      	bne.n	80107d8 <_fflush_r+0x58>
 80107a0:	686c      	ldr	r4, [r5, #4]
 80107a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d0ef      	beq.n	801078a <_fflush_r+0xa>
 80107aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80107ac:	07d0      	lsls	r0, r2, #31
 80107ae:	d404      	bmi.n	80107ba <_fflush_r+0x3a>
 80107b0:	0599      	lsls	r1, r3, #22
 80107b2:	d402      	bmi.n	80107ba <_fflush_r+0x3a>
 80107b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80107b6:	f7ff f921 	bl	800f9fc <__retarget_lock_acquire_recursive>
 80107ba:	4628      	mov	r0, r5
 80107bc:	4621      	mov	r1, r4
 80107be:	f7ff ff59 	bl	8010674 <__sflush_r>
 80107c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80107c4:	07da      	lsls	r2, r3, #31
 80107c6:	4605      	mov	r5, r0
 80107c8:	d4e0      	bmi.n	801078c <_fflush_r+0xc>
 80107ca:	89a3      	ldrh	r3, [r4, #12]
 80107cc:	059b      	lsls	r3, r3, #22
 80107ce:	d4dd      	bmi.n	801078c <_fflush_r+0xc>
 80107d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80107d2:	f7ff f914 	bl	800f9fe <__retarget_lock_release_recursive>
 80107d6:	e7d9      	b.n	801078c <_fflush_r+0xc>
 80107d8:	4b05      	ldr	r3, [pc, #20]	; (80107f0 <_fflush_r+0x70>)
 80107da:	429c      	cmp	r4, r3
 80107dc:	d101      	bne.n	80107e2 <_fflush_r+0x62>
 80107de:	68ac      	ldr	r4, [r5, #8]
 80107e0:	e7df      	b.n	80107a2 <_fflush_r+0x22>
 80107e2:	4b04      	ldr	r3, [pc, #16]	; (80107f4 <_fflush_r+0x74>)
 80107e4:	429c      	cmp	r4, r3
 80107e6:	bf08      	it	eq
 80107e8:	68ec      	ldreq	r4, [r5, #12]
 80107ea:	e7da      	b.n	80107a2 <_fflush_r+0x22>
 80107ec:	08013728 	.word	0x08013728
 80107f0:	08013748 	.word	0x08013748
 80107f4:	08013708 	.word	0x08013708

080107f8 <_lseek_r>:
 80107f8:	b538      	push	{r3, r4, r5, lr}
 80107fa:	4d07      	ldr	r5, [pc, #28]	; (8010818 <_lseek_r+0x20>)
 80107fc:	4604      	mov	r4, r0
 80107fe:	4608      	mov	r0, r1
 8010800:	4611      	mov	r1, r2
 8010802:	2200      	movs	r2, #0
 8010804:	602a      	str	r2, [r5, #0]
 8010806:	461a      	mov	r2, r3
 8010808:	f7f0 fc06 	bl	8001018 <_lseek>
 801080c:	1c43      	adds	r3, r0, #1
 801080e:	d102      	bne.n	8010816 <_lseek_r+0x1e>
 8010810:	682b      	ldr	r3, [r5, #0]
 8010812:	b103      	cbz	r3, 8010816 <_lseek_r+0x1e>
 8010814:	6023      	str	r3, [r4, #0]
 8010816:	bd38      	pop	{r3, r4, r5, pc}
 8010818:	20006954 	.word	0x20006954

0801081c <__swhatbuf_r>:
 801081c:	b570      	push	{r4, r5, r6, lr}
 801081e:	460e      	mov	r6, r1
 8010820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010824:	2900      	cmp	r1, #0
 8010826:	b096      	sub	sp, #88	; 0x58
 8010828:	4614      	mov	r4, r2
 801082a:	461d      	mov	r5, r3
 801082c:	da07      	bge.n	801083e <__swhatbuf_r+0x22>
 801082e:	2300      	movs	r3, #0
 8010830:	602b      	str	r3, [r5, #0]
 8010832:	89b3      	ldrh	r3, [r6, #12]
 8010834:	061a      	lsls	r2, r3, #24
 8010836:	d410      	bmi.n	801085a <__swhatbuf_r+0x3e>
 8010838:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801083c:	e00e      	b.n	801085c <__swhatbuf_r+0x40>
 801083e:	466a      	mov	r2, sp
 8010840:	f000 f8d8 	bl	80109f4 <_fstat_r>
 8010844:	2800      	cmp	r0, #0
 8010846:	dbf2      	blt.n	801082e <__swhatbuf_r+0x12>
 8010848:	9a01      	ldr	r2, [sp, #4]
 801084a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801084e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010852:	425a      	negs	r2, r3
 8010854:	415a      	adcs	r2, r3
 8010856:	602a      	str	r2, [r5, #0]
 8010858:	e7ee      	b.n	8010838 <__swhatbuf_r+0x1c>
 801085a:	2340      	movs	r3, #64	; 0x40
 801085c:	2000      	movs	r0, #0
 801085e:	6023      	str	r3, [r4, #0]
 8010860:	b016      	add	sp, #88	; 0x58
 8010862:	bd70      	pop	{r4, r5, r6, pc}

08010864 <__smakebuf_r>:
 8010864:	898b      	ldrh	r3, [r1, #12]
 8010866:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010868:	079d      	lsls	r5, r3, #30
 801086a:	4606      	mov	r6, r0
 801086c:	460c      	mov	r4, r1
 801086e:	d507      	bpl.n	8010880 <__smakebuf_r+0x1c>
 8010870:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010874:	6023      	str	r3, [r4, #0]
 8010876:	6123      	str	r3, [r4, #16]
 8010878:	2301      	movs	r3, #1
 801087a:	6163      	str	r3, [r4, #20]
 801087c:	b002      	add	sp, #8
 801087e:	bd70      	pop	{r4, r5, r6, pc}
 8010880:	ab01      	add	r3, sp, #4
 8010882:	466a      	mov	r2, sp
 8010884:	f7ff ffca 	bl	801081c <__swhatbuf_r>
 8010888:	9900      	ldr	r1, [sp, #0]
 801088a:	4605      	mov	r5, r0
 801088c:	4630      	mov	r0, r6
 801088e:	f7ff f90f 	bl	800fab0 <_malloc_r>
 8010892:	b948      	cbnz	r0, 80108a8 <__smakebuf_r+0x44>
 8010894:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010898:	059a      	lsls	r2, r3, #22
 801089a:	d4ef      	bmi.n	801087c <__smakebuf_r+0x18>
 801089c:	f023 0303 	bic.w	r3, r3, #3
 80108a0:	f043 0302 	orr.w	r3, r3, #2
 80108a4:	81a3      	strh	r3, [r4, #12]
 80108a6:	e7e3      	b.n	8010870 <__smakebuf_r+0xc>
 80108a8:	4b0d      	ldr	r3, [pc, #52]	; (80108e0 <__smakebuf_r+0x7c>)
 80108aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80108ac:	89a3      	ldrh	r3, [r4, #12]
 80108ae:	6020      	str	r0, [r4, #0]
 80108b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80108b4:	81a3      	strh	r3, [r4, #12]
 80108b6:	9b00      	ldr	r3, [sp, #0]
 80108b8:	6163      	str	r3, [r4, #20]
 80108ba:	9b01      	ldr	r3, [sp, #4]
 80108bc:	6120      	str	r0, [r4, #16]
 80108be:	b15b      	cbz	r3, 80108d8 <__smakebuf_r+0x74>
 80108c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80108c4:	4630      	mov	r0, r6
 80108c6:	f000 f8a7 	bl	8010a18 <_isatty_r>
 80108ca:	b128      	cbz	r0, 80108d8 <__smakebuf_r+0x74>
 80108cc:	89a3      	ldrh	r3, [r4, #12]
 80108ce:	f023 0303 	bic.w	r3, r3, #3
 80108d2:	f043 0301 	orr.w	r3, r3, #1
 80108d6:	81a3      	strh	r3, [r4, #12]
 80108d8:	89a0      	ldrh	r0, [r4, #12]
 80108da:	4305      	orrs	r5, r0
 80108dc:	81a5      	strh	r5, [r4, #12]
 80108de:	e7cd      	b.n	801087c <__smakebuf_r+0x18>
 80108e0:	0800f835 	.word	0x0800f835

080108e4 <__malloc_lock>:
 80108e4:	4801      	ldr	r0, [pc, #4]	; (80108ec <__malloc_lock+0x8>)
 80108e6:	f7ff b889 	b.w	800f9fc <__retarget_lock_acquire_recursive>
 80108ea:	bf00      	nop
 80108ec:	2000695c 	.word	0x2000695c

080108f0 <__malloc_unlock>:
 80108f0:	4801      	ldr	r0, [pc, #4]	; (80108f8 <__malloc_unlock+0x8>)
 80108f2:	f7ff b884 	b.w	800f9fe <__retarget_lock_release_recursive>
 80108f6:	bf00      	nop
 80108f8:	2000695c 	.word	0x2000695c

080108fc <_realloc_r>:
 80108fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108fe:	4607      	mov	r7, r0
 8010900:	4614      	mov	r4, r2
 8010902:	460e      	mov	r6, r1
 8010904:	b921      	cbnz	r1, 8010910 <_realloc_r+0x14>
 8010906:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801090a:	4611      	mov	r1, r2
 801090c:	f7ff b8d0 	b.w	800fab0 <_malloc_r>
 8010910:	b922      	cbnz	r2, 801091c <_realloc_r+0x20>
 8010912:	f7ff f87d 	bl	800fa10 <_free_r>
 8010916:	4625      	mov	r5, r4
 8010918:	4628      	mov	r0, r5
 801091a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801091c:	f000 f88c 	bl	8010a38 <_malloc_usable_size_r>
 8010920:	42a0      	cmp	r0, r4
 8010922:	d20f      	bcs.n	8010944 <_realloc_r+0x48>
 8010924:	4621      	mov	r1, r4
 8010926:	4638      	mov	r0, r7
 8010928:	f7ff f8c2 	bl	800fab0 <_malloc_r>
 801092c:	4605      	mov	r5, r0
 801092e:	2800      	cmp	r0, #0
 8010930:	d0f2      	beq.n	8010918 <_realloc_r+0x1c>
 8010932:	4631      	mov	r1, r6
 8010934:	4622      	mov	r2, r4
 8010936:	f7fe fe93 	bl	800f660 <memcpy>
 801093a:	4631      	mov	r1, r6
 801093c:	4638      	mov	r0, r7
 801093e:	f7ff f867 	bl	800fa10 <_free_r>
 8010942:	e7e9      	b.n	8010918 <_realloc_r+0x1c>
 8010944:	4635      	mov	r5, r6
 8010946:	e7e7      	b.n	8010918 <_realloc_r+0x1c>

08010948 <_read_r>:
 8010948:	b538      	push	{r3, r4, r5, lr}
 801094a:	4d07      	ldr	r5, [pc, #28]	; (8010968 <_read_r+0x20>)
 801094c:	4604      	mov	r4, r0
 801094e:	4608      	mov	r0, r1
 8010950:	4611      	mov	r1, r2
 8010952:	2200      	movs	r2, #0
 8010954:	602a      	str	r2, [r5, #0]
 8010956:	461a      	mov	r2, r3
 8010958:	f7f0 fafe 	bl	8000f58 <_read>
 801095c:	1c43      	adds	r3, r0, #1
 801095e:	d102      	bne.n	8010966 <_read_r+0x1e>
 8010960:	682b      	ldr	r3, [r5, #0]
 8010962:	b103      	cbz	r3, 8010966 <_read_r+0x1e>
 8010964:	6023      	str	r3, [r4, #0]
 8010966:	bd38      	pop	{r3, r4, r5, pc}
 8010968:	20006954 	.word	0x20006954

0801096c <_raise_r>:
 801096c:	291f      	cmp	r1, #31
 801096e:	b538      	push	{r3, r4, r5, lr}
 8010970:	4604      	mov	r4, r0
 8010972:	460d      	mov	r5, r1
 8010974:	d904      	bls.n	8010980 <_raise_r+0x14>
 8010976:	2316      	movs	r3, #22
 8010978:	6003      	str	r3, [r0, #0]
 801097a:	f04f 30ff 	mov.w	r0, #4294967295
 801097e:	bd38      	pop	{r3, r4, r5, pc}
 8010980:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010982:	b112      	cbz	r2, 801098a <_raise_r+0x1e>
 8010984:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010988:	b94b      	cbnz	r3, 801099e <_raise_r+0x32>
 801098a:	4620      	mov	r0, r4
 801098c:	f000 f830 	bl	80109f0 <_getpid_r>
 8010990:	462a      	mov	r2, r5
 8010992:	4601      	mov	r1, r0
 8010994:	4620      	mov	r0, r4
 8010996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801099a:	f000 b817 	b.w	80109cc <_kill_r>
 801099e:	2b01      	cmp	r3, #1
 80109a0:	d00a      	beq.n	80109b8 <_raise_r+0x4c>
 80109a2:	1c59      	adds	r1, r3, #1
 80109a4:	d103      	bne.n	80109ae <_raise_r+0x42>
 80109a6:	2316      	movs	r3, #22
 80109a8:	6003      	str	r3, [r0, #0]
 80109aa:	2001      	movs	r0, #1
 80109ac:	e7e7      	b.n	801097e <_raise_r+0x12>
 80109ae:	2400      	movs	r4, #0
 80109b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80109b4:	4628      	mov	r0, r5
 80109b6:	4798      	blx	r3
 80109b8:	2000      	movs	r0, #0
 80109ba:	e7e0      	b.n	801097e <_raise_r+0x12>

080109bc <raise>:
 80109bc:	4b02      	ldr	r3, [pc, #8]	; (80109c8 <raise+0xc>)
 80109be:	4601      	mov	r1, r0
 80109c0:	6818      	ldr	r0, [r3, #0]
 80109c2:	f7ff bfd3 	b.w	801096c <_raise_r>
 80109c6:	bf00      	nop
 80109c8:	20000014 	.word	0x20000014

080109cc <_kill_r>:
 80109cc:	b538      	push	{r3, r4, r5, lr}
 80109ce:	4d07      	ldr	r5, [pc, #28]	; (80109ec <_kill_r+0x20>)
 80109d0:	2300      	movs	r3, #0
 80109d2:	4604      	mov	r4, r0
 80109d4:	4608      	mov	r0, r1
 80109d6:	4611      	mov	r1, r2
 80109d8:	602b      	str	r3, [r5, #0]
 80109da:	f7f0 faa1 	bl	8000f20 <_kill>
 80109de:	1c43      	adds	r3, r0, #1
 80109e0:	d102      	bne.n	80109e8 <_kill_r+0x1c>
 80109e2:	682b      	ldr	r3, [r5, #0]
 80109e4:	b103      	cbz	r3, 80109e8 <_kill_r+0x1c>
 80109e6:	6023      	str	r3, [r4, #0]
 80109e8:	bd38      	pop	{r3, r4, r5, pc}
 80109ea:	bf00      	nop
 80109ec:	20006954 	.word	0x20006954

080109f0 <_getpid_r>:
 80109f0:	f7f0 ba8e 	b.w	8000f10 <_getpid>

080109f4 <_fstat_r>:
 80109f4:	b538      	push	{r3, r4, r5, lr}
 80109f6:	4d07      	ldr	r5, [pc, #28]	; (8010a14 <_fstat_r+0x20>)
 80109f8:	2300      	movs	r3, #0
 80109fa:	4604      	mov	r4, r0
 80109fc:	4608      	mov	r0, r1
 80109fe:	4611      	mov	r1, r2
 8010a00:	602b      	str	r3, [r5, #0]
 8010a02:	f7f0 faee 	bl	8000fe2 <_fstat>
 8010a06:	1c43      	adds	r3, r0, #1
 8010a08:	d102      	bne.n	8010a10 <_fstat_r+0x1c>
 8010a0a:	682b      	ldr	r3, [r5, #0]
 8010a0c:	b103      	cbz	r3, 8010a10 <_fstat_r+0x1c>
 8010a0e:	6023      	str	r3, [r4, #0]
 8010a10:	bd38      	pop	{r3, r4, r5, pc}
 8010a12:	bf00      	nop
 8010a14:	20006954 	.word	0x20006954

08010a18 <_isatty_r>:
 8010a18:	b538      	push	{r3, r4, r5, lr}
 8010a1a:	4d06      	ldr	r5, [pc, #24]	; (8010a34 <_isatty_r+0x1c>)
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	4604      	mov	r4, r0
 8010a20:	4608      	mov	r0, r1
 8010a22:	602b      	str	r3, [r5, #0]
 8010a24:	f7f0 faed 	bl	8001002 <_isatty>
 8010a28:	1c43      	adds	r3, r0, #1
 8010a2a:	d102      	bne.n	8010a32 <_isatty_r+0x1a>
 8010a2c:	682b      	ldr	r3, [r5, #0]
 8010a2e:	b103      	cbz	r3, 8010a32 <_isatty_r+0x1a>
 8010a30:	6023      	str	r3, [r4, #0]
 8010a32:	bd38      	pop	{r3, r4, r5, pc}
 8010a34:	20006954 	.word	0x20006954

08010a38 <_malloc_usable_size_r>:
 8010a38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a3c:	1f18      	subs	r0, r3, #4
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	bfbc      	itt	lt
 8010a42:	580b      	ldrlt	r3, [r1, r0]
 8010a44:	18c0      	addlt	r0, r0, r3
 8010a46:	4770      	bx	lr

08010a48 <_init>:
 8010a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a4a:	bf00      	nop
 8010a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a4e:	bc08      	pop	{r3}
 8010a50:	469e      	mov	lr, r3
 8010a52:	4770      	bx	lr

08010a54 <_fini>:
 8010a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a56:	bf00      	nop
 8010a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a5a:	bc08      	pop	{r3}
 8010a5c:	469e      	mov	lr, r3
 8010a5e:	4770      	bx	lr
